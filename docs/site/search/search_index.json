{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Code Notes","text":"<p>This is my small learning place, you will find here programming tutorials, notes and everything that I found useful regarding coding. </p> <p> </p> <p>TODO</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Tags</li> <li>Java<ul> <li>Core Java<ul> <li>Object-Oriented Concepts</li> </ul> </li> <li>Collections<ul> <li>Properties</li> </ul> </li> </ul> </li> <li>Algorithms</li> <li>Python</li> </ul>"},{"location":"imperative_vs_functional_language/","title":"Difference betwenn functional and imperative programming languages","text":"<p>Definition: An imperative language uses a sequence of statements to determine how to reach a certain goal. These statements are said to change the state of the program as each one is executed in turn.</p> <p>Examples: Java is an imperative language. For example, a program can be created to add a series of numbers:</p> <pre><code> int total = 0;\n int number1 = 5;\n int number2 = 10;\n int number3 = 15;\n total = number1 + number2 + number3; \n</code></pre> <p>Each statement changes the state of the program, from assigning values to each variable to the final addition of those values. Using a sequence of five statements the program is explicitly told how to add the numbers 5, 10 and 15 together.</p> <p>Functional languages: The functional programming paradigm was explicitly created to support a pure functional approach to problem solving. Functional programming is a form of declarative programming.</p> <p>Advantages of Pure Functions: The primary reason to implement functional transformations as pure functions is that pure functions are composable: that is, self-contained and stateless. These characteristics bring a number of benefits, including the following: Increased readability and maintainability. This is because each function is designed to accomplish a specific task given its arguments. The function does not rely on any external state.</p> <p>Easier reiterative development. Because the code is easier to refactor, changes to design are often easier to implement. For example, suppose you write a complicated transformation, and then realize that some code is repeated several times in the transformation. If you refactor through a pure method, you can call your pure method at will without worrying about side effects.</p> <p>Easier testing and debugging. Because pure functions can more easily be tested in isolation, you can write test code that calls the pure function with typical values, valid edge cases, and invalid edge cases.</p> <p>For OOP People or Imperative languages:</p> <p>Object-oriented languages are good when you have a fixed set of operations on things and as your code evolves, you primarily add new things. This can be accomplished by adding new classes which implement existing methods and the existing classes are left alone.</p> <p>Functional languages are good when you have a fixed set of things and as your code evolves, you primarily add new operations on existing things. This can be accomplished by adding new functions which compute with existing data types and the existing functions are left alone.</p> <p>Cons:</p> <p>It depends on the user requirements to choose the way of programming, so there is harm only when users don\u2019t choose the proper way.</p> <p>When evolution goes the wrong way, you have problems:</p> <ul> <li>Adding a new operation to an object-oriented program may require editing many class definitions to add a new method</li> <li>Adding a new kind of thing to a functional program may require editing many function definitions to add a new case</li> </ul> <p>source: stackoverflow</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#java","title":"Java","text":"<ul> <li>Object-Oriented Concepts</li> </ul>"},{"location":"Docker/Attachements/Drawing%202021-09-26%2020.37.21.excalidraw/","title":"Drawing 2021 09 26 20.37.21.excalidraw","text":"<p>\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0</p>"},{"location":"Docker/Attachements/Drawing%202021-09-26%2020.37.21.excalidraw/#text-elements","title":"Text Elements","text":"<p>%%</p>"},{"location":"Docker/Attachements/Drawing%202021-09-26%2020.37.21.excalidraw/#drawing","title":"Drawing","text":"<p><code>json {\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[],\"appState\":{\"theme\":\"light\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#000000\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"hachure\",\"currentItemStrokeWidth\":1,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":1,\"currentItemOpacity\":100,\"currentItemFontFamily\":1,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"left\",\"currentItemStrokeSharpness\":\"sharp\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemLinearStrokeSharpness\":\"round\",\"gridSize\":null}}</code>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2019.34.34.excalidraw%201/","title":"Drawing 2021 08 12 19.34.34.excalidraw 1","text":"<p>\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2019.34.34.excalidraw%201/#text-elements","title":"Text Elements","text":"<p>Hardware ^nrSWxL1A</p> <p>Kernel ^J6sOCMH6</p> <p>Application ^nt4esWgE</p> <p>Docker ^SrhMuMcJ</p> <p>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2019.34.34.excalidraw%201/#drawing","title":"Drawing","text":"<p><code>json {\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[{\"type\":\"rectangle\",\"version\":71,\"versionNonce\":273784865,\"isDeleted\":false,\"id\":\"ChJsGSqicKclMrr0dhuj_\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-479.17578125,\"y\":32.00043402777777,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":326.61328125,\"height\":379.953125,\"seed\":423348353,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"line\",\"version\":89,\"versionNonce\":1417387649,\"isDeleted\":false,\"id\":\"7miEQudzNE0Xd1Oqx1eCI\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-154.08203125,\"y\":158.23828125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":323.703125,\"height\":1.52734375,\"seed\":1953086465,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-323.703125,1.52734375]]},{\"type\":\"line\",\"version\":62,\"versionNonce\":1840324591,\"isDeleted\":false,\"id\":\"Sf0AIpk6R3IQyOfvajzqQ\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-152.0703125,\"y\":294.1015625,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":324.07421875,\"height\":1.859375,\"seed\":996550241,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-324.07421875,-1.859375]]},{\"type\":\"text\",\"version\":312,\"versionNonce\":706280289,\"isDeleted\":false,\"id\":\"nrSWxL1A\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0.004603442660737755,\"x\":-373.1863369314005,\"y\":335.21004895502375,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":95,\"height\":25,\"seed\":562383375,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":21.911933310302867,\"fontFamily\":2,\"text\":\"Hardware\",\"baseline\":20,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":93,\"versionNonce\":605350881,\"isDeleted\":false,\"id\":\"J6sOCMH6\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-355.10546875,\"y\":214.37109375,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":58,\"height\":23,\"seed\":1946103233,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"Kernel\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":74,\"versionNonce\":720467681,\"isDeleted\":false,\"id\":\"nt4esWgE\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-373.85546875,\"y\":93.53125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":98,\"height\":23,\"seed\":711075745,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"Application\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":65,\"versionNonce\":1341000801,\"isDeleted\":false,\"id\":\"SrhMuMcJ\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-360.65625,\"y\":-79.640625,\"strokeColor\":\"#a61e4d\",\"backgroundColor\":\"transparent\",\"width\":63,\"height\":23,\"seed\":172094145,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"Docker\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":401,\"versionNonce\":1890913345,\"isDeleted\":false,\"id\":\"uS6QophP1BnDEnB7mKL24\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-512.4700520833334,\"y\":22.88617621527777,\"strokeColor\":\"#1864ab\",\"backgroundColor\":\"transparent\",\"width\":389.55078125,\"height\":134.2705078125,\"seed\":998290145,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#1864ab\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"hachure\",\"currentItemStrokeWidth\":1,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":1,\"currentItemOpacity\":100,\"currentItemFontFamily\":2,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"center\",\"currentItemStrokeSharpness\":\"sharp\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemLinearStrokeSharpness\":\"round\",\"gridSize\":null}}</code>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2019.34.34.excalidraw/","title":"Drawing 2021 08 12 19.34.34.excalidraw","text":"<p>\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2019.34.34.excalidraw/#text-elements","title":"Text Elements","text":"<p>Hardware ^nrSWxL1A</p> <p>Kernel ^J6sOCMH6</p> <p>Application ^nt4esWgE</p> <p>Virtual Machine ^SrhMuMcJ</p> <p>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2019.34.34.excalidraw/#drawing","title":"Drawing","text":"<p><code>json {\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[{\"type\":\"rectangle\",\"version\":70,\"versionNonce\":1772701775,\"isDeleted\":false,\"id\":\"ChJsGSqicKclMrr0dhuj_\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-479.17578125,\"y\":32.34765625,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":326.61328125,\"height\":379.953125,\"seed\":423348353,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"line\",\"version\":89,\"versionNonce\":1417387649,\"isDeleted\":false,\"id\":\"7miEQudzNE0Xd1Oqx1eCI\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-154.08203125,\"y\":158.23828125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":323.703125,\"height\":1.52734375,\"seed\":1953086465,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-323.703125,1.52734375]]},{\"type\":\"line\",\"version\":62,\"versionNonce\":1840324591,\"isDeleted\":false,\"id\":\"Sf0AIpk6R3IQyOfvajzqQ\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-152.0703125,\"y\":294.1015625,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":324.07421875,\"height\":1.859375,\"seed\":996550241,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-324.07421875,-1.859375]]},{\"type\":\"text\",\"version\":312,\"versionNonce\":706280289,\"isDeleted\":false,\"id\":\"nrSWxL1A\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0.004603442660737755,\"x\":-373.1863369314005,\"y\":335.21004895502375,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":95,\"height\":25,\"seed\":562383375,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":21.911933310302867,\"fontFamily\":2,\"text\":\"Hardware\",\"baseline\":20,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":93,\"versionNonce\":605350881,\"isDeleted\":false,\"id\":\"J6sOCMH6\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-355.10546875,\"y\":214.37109375,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":58,\"height\":23,\"seed\":1946103233,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"Kernel\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":74,\"versionNonce\":720467681,\"isDeleted\":false,\"id\":\"nt4esWgE\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-373.85546875,\"y\":93.53125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":98,\"height\":23,\"seed\":711075745,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"Application\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":58,\"versionNonce\":1678621441,\"isDeleted\":false,\"id\":\"SrhMuMcJ\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-398.15625,\"y\":-79.640625,\"strokeColor\":\"#a61e4d\",\"backgroundColor\":\"transparent\",\"width\":138,\"height\":23,\"seed\":172094145,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"Virtual Machine\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":220,\"versionNonce\":409255823,\"isDeleted\":false,\"id\":\"uS6QophP1BnDEnB7mKL24\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-507.80859375,\"y\":-21.46875,\"strokeColor\":\"#1864ab\",\"backgroundColor\":\"transparent\",\"width\":389.55078125,\"height\":314.55859375,\"seed\":998290145,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#1864ab\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"hachure\",\"currentItemStrokeWidth\":1,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":1,\"currentItemOpacity\":100,\"currentItemFontFamily\":2,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"center\",\"currentItemStrokeSharpness\":\"sharp\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemLinearStrokeSharpness\":\"round\",\"gridSize\":null}}</code>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2021.42.50.excalidraw/","title":"Drawing 2021 08 12 21.42.50.excalidraw","text":"<p>\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0 1. </p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2021.42.50.excalidraw/#text-elements","title":"Text Elements","text":"<p>Image Layer ^zhxqrrLj</p> <p>Image Layer ^6MgVftxW</p> <p>Image Layer ^MF4eQCIY</p> <p>Docker Image ^cS3bS1HS</p> <p>Docker Containers ^qGqIjJAq</p> <p>r/w layer ^QvHVQfzC</p> <p>r/w layer ^VmZqy9gz</p> <p>r/w layer ^gchN39QO</p> <p>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Drawing%202021-08-12%2021.42.50.excalidraw/#drawing","title":"Drawing","text":"<p><code>json {\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[{\"type\":\"rectangle\",\"version\":245,\"versionNonce\":1868828303,\"isDeleted\":false,\"id\":\"poQaE6_r4PuwBmWTKIIE3\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"dashed\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-438.8706597222222,\"y\":294.58203125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":302.7890625,\"height\":375.62109375,\"seed\":1907088417,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"aYSAlbnMtUEgt-0dIgqgF\",\"ozKcw_ybID3z-9-cwDfZo\"]},{\"type\":\"rectangle\",\"version\":155,\"versionNonce\":1857468705,\"isDeleted\":false,\"id\":\"4YVYqXJf1lU5OTUtoOl8z\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-392.5972222222221,\"y\":360.83311631944423,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":208.5546875,\"height\":61.494140625,\"seed\":753000815,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":80,\"versionNonce\":528244929,\"isDeleted\":false,\"id\":\"zhxqrrLj\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-346.8040364583332,\"y\":378.2078993055553,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":129,\"height\":24,\"seed\":1527904129,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Image Layer\",\"baseline\":19,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":239,\"versionNonce\":798787119,\"isDeleted\":false,\"id\":\"izJIYLtEEUqgtsKUFOEsL\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-396.6662326388886,\"y\":552.8822699652777,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":208.5546875,\"height\":61.494140625,\"seed\":1409847695,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":164,\"versionNonce\":184121409,\"isDeleted\":false,\"id\":\"6MgVftxW\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-350.87304687499966,\"y\":570.2570529513888,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":129,\"height\":24,\"seed\":1001280225,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Image Layer\",\"baseline\":19,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":253,\"versionNonce\":1742582575,\"isDeleted\":false,\"id\":\"6iTji2Oftnbp2Mn4ME1fR\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-396.7139756944441,\"y\":456.0636935763888,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":208.5546875,\"height\":61.494140625,\"seed\":426692545,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":178,\"versionNonce\":1416469313,\"isDeleted\":false,\"id\":\"MF4eQCIY\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-350.9207899305552,\"y\":473.4384765624999,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":129,\"height\":24,\"seed\":360171727,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Image Layer\",\"baseline\":19,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":108,\"versionNonce\":1866120559,\"isDeleted\":false,\"id\":\"cS3bS1HS\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-378.0659722222219,\"y\":691.0347222222221,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":174,\"height\":32,\"seed\":226134817,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":28,\"fontFamily\":2,\"text\":\"Docker Image\",\"baseline\":26,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":157,\"versionNonce\":1523639873,\"isDeleted\":false,\"id\":\"hSgNrNOc2Ha6u1wsqGhb_\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-478.0052083333326,\"y\":-188.2534722222224,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":334.2751736111112,\"height\":77.54774305555554,\"seed\":1258239887,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":80,\"versionNonce\":209673697,\"isDeleted\":false,\"id\":\"qGqIjJAq\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-411.1462673611103,\"y\":-166.06814236111128,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":199,\"height\":24,\"seed\":1791081825,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Docker Containers\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"arrow\",\"version\":113,\"versionNonce\":379646671,\"isDeleted\":false,\"id\":\"aYSAlbnMtUEgt-0dIgqgF\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-391.6698585847819,\"y\":292.94791666666634,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":147.07753724855013,\"height\":175.76822916666666,\"seed\":1706213601,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"poQaE6_r4PuwBmWTKIIE3\",\"focus\":0.17607537873257248,\"gap\":1.6341145833337123},\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-147.07753724855013,-175.76822916666666]]},{\"type\":\"arrow\",\"version\":58,\"versionNonce\":175410689,\"isDeleted\":false,\"id\":\"ozKcw_ybID3z-9-cwDfZo\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-292.7751736111097,\"y\":284.0373263888886,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":1.553819444444457,\"height\":197.03993055555557,\"seed\":112705775,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"poQaE6_r4PuwBmWTKIIE3\",\"focus\":-0.024430674784105717,\"gap\":10.544704861111427},\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-1.553819444444457,-197.03993055555557]]},{\"type\":\"arrow\",\"version\":88,\"versionNonce\":176500481,\"isDeleted\":false,\"id\":\"x_QnbAV0iWP6uslxVbvQW\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":1,\"opacity\":100,\"angle\":0,\"x\":-156.4600694444431,\"y\":299.4887152777775,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":130.03024704410808,\"height\":227.6411144192434,\"seed\":865412577,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[130.03024704410808,-227.6411144192434]]},{\"type\":\"rectangle\",\"version\":216,\"versionNonce\":1006136591,\"isDeleted\":false,\"id\":\"vM0GvuTs9GHA6lFc2DJZf\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-708.0138888888872,\"y\":24.97048611111103,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":258.7673611111112,\"height\":65.65972222222217,\"seed\":1889666721,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":106,\"versionNonce\":1876684641,\"isDeleted\":false,\"id\":\"QvHVQfzC\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-630.5225694444425,\"y\":44.190104166666515,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":105,\"height\":24,\"seed\":807966113,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"r/w layer\",\"baseline\":19,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":332,\"versionNonce\":649479361,\"isDeleted\":false,\"id\":\"vHV3Lixq6CsAe8bD6FFwr\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-415.60503472222047,\"y\":-5.038194444444741,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":258.7673611111112,\"height\":65.65972222222217,\"seed\":2141582127,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":222,\"versionNonce\":2051941327,\"isDeleted\":false,\"id\":\"VmZqy9gz\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-338.11371527777567,\"y\":14.181423611110745,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":105,\"height\":24,\"seed\":743004993,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"r/w layer\",\"baseline\":19,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":260,\"versionNonce\":440453423,\"isDeleted\":false,\"id\":\"9eC0DpzjgtPWLxu1NhCCN\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-100.7395833333311,\"y\":-14.777777777778056,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":258.7673611111112,\"height\":65.65972222222217,\"seed\":183084769,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":150,\"versionNonce\":1039066433,\"isDeleted\":false,\"id\":\"gchN39QO\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-23.2482638888863,\"y\":4.44184027777743,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":105,\"height\":24,\"seed\":789672879,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"r/w layer\",\"baseline\":19,\"textAlign\":\"left\",\"verticalAlign\":\"top\"},{\"type\":\"line\",\"version\":120,\"versionNonce\":211273153,\"isDeleted\":false,\"id\":\"hKqV7ediWRQYltnvUc-VG\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-45.24045138888573,\"y\":-16.930555555555884,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":145.546875,\"height\":95.06944444444449,\"seed\":147704655,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-145.546875,-95.06944444444449]]},{\"type\":\"line\",\"version\":58,\"versionNonce\":2074522735,\"isDeleted\":false,\"id\":\"65mo2VJQ8MwTqoKWFDDoz\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-300.48350694444133,\"y\":-4.530381944444798,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":1.484375,\"height\":106.44097222222223,\"seed\":1140549025,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-1.484375,-106.44097222222223]]},{\"type\":\"line\",\"version\":50,\"versionNonce\":359207311,\"isDeleted\":false,\"id\":\"0KhzykPwfMN49b4fvtZlC\",\"fillStyle\":\"hachure\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-577.7317708333292,\"y\":25.881944444444798,\"strokeColor\":\"#000000\",\"backgroundColor\":\"transparent\",\"width\":135.16059027777783,\"height\":134.31423611111114,\"seed\":2124434945,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[135.16059027777783,-134.31423611111114]]}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#000000\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"hachure\",\"currentItemStrokeWidth\":1,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":0,\"currentItemOpacity\":100,\"currentItemFontFamily\":3,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"left\",\"currentItemStrokeSharpness\":\"sharp\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemLinearStrokeSharpness\":\"round\",\"gridSize\":null}}</code>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Port_Communication/","title":"Port Communication","text":"<p>\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0</p>"},{"location":"Docker/Attachements/Excalidraw/Port_Communication/#text-elements","title":"Text Elements","text":"<p>HOST ^yNADj82I</p> <p>Port 4000 ^7sZJfTgm</p> <p>Container 1 ^xWfcU4IV</p> <p>Port 5000 ^1H5KtVtG</p> <p>Port 5000 ^7T5ULNPt</p> <p>Container 2 ^C1BTUbuC</p> <p>Port 4000 ^9ijz9UUb</p> <p>Port 5001 ^Zu8Jgp6L</p> <p>Container 3 ^mgozxqZG</p> <p>Port 4000 ^Eh4aC3bj</p> <p>%%</p>"},{"location":"Docker/Attachements/Excalidraw/Port_Communication/#drawing","title":"Drawing","text":"<p><code>json {\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[{\"type\":\"text\",\"version\":570,\"versionNonce\":1245785678,\"isDeleted\":false,\"id\":\"yNADj82I\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1262.9765625,\"y\":-186.95214843750003,\"strokeColor\":\"#2b8a3e\",\"backgroundColor\":\"#bdddda\",\"width\":108,\"height\":45,\"seed\":14736834,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":39.02439024390247,\"fontFamily\":2,\"text\":\"HOST\",\"baseline\":36,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":659,\"versionNonce\":526622094,\"isDeleted\":false,\"id\":\"5h1FkGaPJaelYkgmlIbN3\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1034.7635151883703,\"y\":-87.50320870535714,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":164.00000000000003,\"height\":56.999999999999986,\"seed\":1280107470,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"HiBi_ywisAKcanrSgAMWb\"]},{\"type\":\"text\",\"version\":419,\"versionNonce\":1979462414,\"isDeleted\":false,\"id\":\"7sZJfTgm\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1068.2645144212538,\"y\":-70.50721415795127,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":105,\"height\":24,\"seed\":373196818,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Port 4000\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"middle\"},{\"type\":\"rectangle\",\"version\":542,\"versionNonce\":1791610002,\"isDeleted\":false,\"id\":\"Zi5cuj_uUvWwRiK8Z_EhA\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1043.9014257487033,\"y\":105.91583434534834,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":147.96875,\"height\":114.521484375,\"seed\":265300110,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":171,\"versionNonce\":1990378254,\"isDeleted\":false,\"id\":\"xWfcU4IV\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1051.1973241862033,\"y\":150.90118590784834,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":129,\"height\":24,\"seed\":856616786,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Container 1\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":1099,\"versionNonce\":343194574,\"isDeleted\":false,\"id\":\"6Su4YksyChMOrB417VlSh\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1039.4001795933486,\"y\":48.80384593133361,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":156.8276756543304,\"height\":54.50717995302944,\"seed\":2098718414,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"HiBi_ywisAKcanrSgAMWb\"]},{\"type\":\"text\",\"version\":819,\"versionNonce\":434798734,\"isDeleted\":false,\"id\":\"1H5KtVtG\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1071.1235566774371,\"y\":64.74404300635422,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":101,\"height\":22,\"seed\":1842951442,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":19.125326299308583,\"fontFamily\":3,\"text\":\"Port 5000\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"middle\"},{\"type\":\"arrow\",\"version\":63,\"versionNonce\":2118652430,\"isDeleted\":false,\"id\":\"HiBi_ywisAKcanrSgAMWb\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1119.4448767955137,\"y\":-22.928431919642435,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":0.0341796875,\"height\":62.0849609375,\"seed\":1799426642,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"5h1FkGaPJaelYkgmlIbN3\",\"focus\":-0.032452248069990114,\"gap\":7.577443384340093},\"endBinding\":{\"elementId\":\"6Su4YksyChMOrB417VlSh\",\"focus\":0.021489703181311007,\"gap\":9.645631317199786},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[0.0341796875,62.0849609375]]},{\"type\":\"rectangle\",\"version\":864,\"versionNonce\":374688782,\"isDeleted\":false,\"id\":\"PNQH5lED6tfO-_hVNbT7n\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1240.9302283580137,\"y\":-86.14964421125441,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":164.00000000000003,\"height\":56.999999999999986,\"seed\":894471378,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"qT4aI7F_m23NecUw93ijo\"]},{\"type\":\"text\",\"version\":623,\"versionNonce\":1744716558,\"isDeleted\":false,\"id\":\"7T5ULNPt\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1274.431227590897,\"y\":-69.15364966384854,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":105,\"height\":24,\"seed\":1869144398,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Port 5000\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":742,\"versionNonce\":1346747602,\"isDeleted\":false,\"id\":\"UOFN5lGOjJhZwAiwvLm4I\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1250.0681389183464,\"y\":107.5818988394511,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":147.96875,\"height\":114.521484375,\"seed\":1091248786,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":368,\"versionNonce\":1309845518,\"isDeleted\":false,\"id\":\"C1BTUbuC\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1263.1296623558464,\"y\":148.67271915195104,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":129,\"height\":24,\"seed\":43747214,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Container 2\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":1304,\"versionNonce\":1311545934,\"isDeleted\":false,\"id\":\"ebXPYONQhfOit42afbTel\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1245.5668927629922,\"y\":50.157410425436325,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":156.8276756543304,\"height\":54.50717995302944,\"seed\":745341010,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"qT4aI7F_m23NecUw93ijo\"]},{\"type\":\"text\",\"version\":1017,\"versionNonce\":265695314,\"isDeleted\":false,\"id\":\"9ijz9UUb\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1277.6027698470807,\"y\":66.41010750045697,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":101,\"height\":22,\"seed\":1562338766,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":19.125326299308583,\"fontFamily\":3,\"text\":\"Port 4000\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"middle\"},{\"type\":\"arrow\",\"version\":673,\"versionNonce\":494912466,\"isDeleted\":false,\"id\":\"qT4aI7F_m23NecUw93ijo\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1325.6115899651568,\"y\":-21.574867425539708,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":0.0341796875,\"height\":62.0849609375,\"seed\":323823122,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"PNQH5lED6tfO-_hVNbT7n\",\"focus\":-0.03245224806998517,\"gap\":7.577443384340093},\"endBinding\":{\"elementId\":\"ebXPYONQhfOit42afbTel\",\"focus\":0.021489703181308106,\"gap\":9.645631317199772},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[0.0341796875,62.0849609375]]},{\"type\":\"rectangle\",\"version\":945,\"versionNonce\":1442577742,\"isDeleted\":false,\"id\":\"9aoGcP25MLE-g5eBquirH\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1460.5109342731919,\"y\":-85.9151505876878,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":164.00000000000003,\"height\":56.999999999999986,\"seed\":1918416526,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"zgSMLgbRXIcsai5Ah2zH2\"]},{\"type\":\"text\",\"version\":704,\"versionNonce\":2121765966,\"isDeleted\":false,\"id\":\"Zu8Jgp6L\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1494.0119335060751,\"y\":-68.91915604028193,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":105,\"height\":24,\"seed\":94257490,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Port 5001\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":823,\"versionNonce\":1535771922,\"isDeleted\":false,\"id\":\"aSmwWd3gUvNGAQNlxsGbL\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1469.0238448335247,\"y\":107.81639246301768,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":147.96875,\"height\":114.521484375,\"seed\":1532933326,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[]},{\"type\":\"text\",\"version\":449,\"versionNonce\":767501330,\"isDeleted\":false,\"id\":\"mgozxqZG\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1479.7220870210247,\"y\":150.95799402551768,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":129,\"height\":24,\"seed\":380520210,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":3,\"text\":\"Container 3\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"rectangle\",\"version\":1385,\"versionNonce\":1617634190,\"isDeleted\":false,\"id\":\"w35TR-W0e60UtTgif7V7T\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1465.1475986781704,\"y\":50.39190404900296,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":156.8276756543304,\"height\":54.50717995302944,\"seed\":663415566,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"zgSMLgbRXIcsai5Ah2zH2\"]},{\"type\":\"text\",\"version\":1096,\"versionNonce\":1499194130,\"isDeleted\":false,\"id\":\"Eh4aC3bj\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":6.282184069173454,\"x\":1497.183475762259,\"y\":66.64460112402355,\"strokeColor\":\"#087f5b\",\"backgroundColor\":\"#bdddda\",\"width\":101,\"height\":22,\"seed\":456627410,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":19.125326299308583,\"fontFamily\":3,\"text\":\"Port 4000\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"middle\"},{\"type\":\"arrow\",\"version\":913,\"versionNonce\":365414034,\"isDeleted\":false,\"id\":\"zgSMLgbRXIcsai5Ah2zH2\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":1545.192295880335,\"y\":-21.3403738019731,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#bdddda\",\"width\":0.0341796875,\"height\":62.0849609375,\"seed\":89545038,\"groupIds\":[],\"strokeSharpness\":\"sharp\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"9aoGcP25MLE-g5eBquirH\",\"focus\":-0.03245224806998656,\"gap\":7.5774433843401},\"endBinding\":{\"elementId\":\"w35TR-W0e60UtTgif7V7T\",\"focus\":0.021489703181306656,\"gap\":9.645631317199793},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[0.0341796875,62.0849609375]]}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#0b7285\",\"currentItemBackgroundColor\":\"#bdddda\",\"currentItemFillStyle\":\"solid\",\"currentItemStrokeWidth\":4,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":0,\"currentItemOpacity\":100,\"currentItemFontFamily\":3,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"center\",\"currentItemStrokeSharpness\":\"sharp\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemLinearStrokeSharpness\":\"sharp\",\"gridSize\":null}}</code>%%</p>"},{"location":"Docker/Attachements/Excalidraw/docker-project_2021-08-31%2015.06.21.excalidraw/","title":"Docker project 2021 08 31 15.06.21.excalidraw","text":"<p>\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0</p>"},{"location":"Docker/Attachements/Excalidraw/docker-project_2021-08-31%2015.06.21.excalidraw/#text-elements","title":"Text Elements","text":"<p>my app image ^BoYEqTel</p> <p>node:lts-alpine3.11 ^N6TtiFP5</p> <p>alpine:3.11 ^2g69Px01</p> <p>FROM node:lts-alpine ^JEKHpTeO</p> <p>FROM alpine:lts ^LOWPRplh</p> <p>%%</p>"},{"location":"Docker/Attachements/Excalidraw/docker-project_2021-08-31%2015.06.21.excalidraw/#drawing","title":"Drawing","text":"<p><code>json {\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[{\"type\":\"rectangle\",\"version\":146,\"versionNonce\":909756374,\"isDeleted\":false,\"id\":\"5LzVL3rBb2PsaFcTNEWU9\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-183.640625,\"y\":-299.296875,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#15aabf\",\"width\":242.6484375,\"height\":77.734375,\"seed\":433074966,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[]},{\"type\":\"rectangle\",\"version\":293,\"versionNonce\":1090987030,\"isDeleted\":false,\"id\":\"_oKRZlgbpoEY04pgU-u7p\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-182.19140625,\"y\":-208.5390625,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#15aabf\",\"width\":242.6484375,\"height\":77.734375,\"seed\":1327687062,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"4r3wd8eSFp9K81lvdBw4F\"]},{\"type\":\"rectangle\",\"version\":249,\"versionNonce\":982393686,\"isDeleted\":false,\"id\":\"h1182feObKlZwI1O9kZmh\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-180.33203125,\"y\":-113.30859375,\"strokeColor\":\"#0b7285\",\"backgroundColor\":\"#15aabf\",\"width\":242.6484375,\"height\":77.734375,\"seed\":934608266,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"4r3wd8eSFp9K81lvdBw4F\",\"7b7FrSSs7NwiRxWJ5v8Im\"]},{\"type\":\"text\",\"version\":134,\"versionNonce\":852633418,\"isDeleted\":false,\"id\":\"BoYEqTel\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-127.40234375,\"y\":-270.0625,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":126,\"height\":23,\"seed\":1716746070,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"my app image\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":23,\"versionNonce\":943606358,\"isDeleted\":false,\"id\":\"N6TtiFP5\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-144.33984375,\"y\":-179.73828125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":168,\"height\":23,\"seed\":2138867274,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"node:lts-alpine3.11\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"middle\"},{\"type\":\"text\",\"version\":25,\"versionNonce\":694332938,\"isDeleted\":false,\"id\":\"2g69Px01\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-107.0078125,\"y\":-85.94140625,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":96,\"height\":23,\"seed\":1245521866,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"fontSize\":20,\"fontFamily\":2,\"text\":\"alpine:3.11\",\"baseline\":18,\"textAlign\":\"center\",\"verticalAlign\":\"middle\"},{\"type\":\"text\",\"version\":148,\"versionNonce\":1005547222,\"isDeleted\":false,\"id\":\"JEKHpTeO\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":72.962890625,\"y\":-277.591796875,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":234,\"height\":24,\"seed\":854548362,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"4r3wd8eSFp9K81lvdBw4F\"],\"fontSize\":20,\"fontFamily\":3,\"text\":\"FROM node:lts-alpine\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"text\",\"version\":283,\"versionNonce\":271930902,\"isDeleted\":false,\"id\":\"LOWPRplh\",\"fillStyle\":\"solid\",\"strokeWidth\":4,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":96.580078125,\"y\":-179.482421875,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":176,\"height\":24,\"seed\":1045152202,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[\"7b7FrSSs7NwiRxWJ5v8Im\",\"4r3wd8eSFp9K81lvdBw4F\"],\"fontSize\":20,\"fontFamily\":3,\"text\":\"FROM alpine:lts\",\"baseline\":19,\"textAlign\":\"center\",\"verticalAlign\":\"top\"},{\"type\":\"arrow\",\"version\":1193,\"versionNonce\":1344541066,\"isDeleted\":false,\"id\":\"4r3wd8eSFp9K81lvdBw4F\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":99.225955297711,\"y\":-249.986328125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":33.17908969435567,\"height\":62.96386590613935,\"seed\":1583770634,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"JEKHpTeO\",\"focus\":0.6690824957695334,\"gap\":3.60546875},\"endBinding\":{\"elementId\":\"_oKRZlgbpoEY04pgU-u7p\",\"focus\":0.8305116520707461,\"gap\":5.589834353355329},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-33.17908969435567,62.96386590613935]]},{\"type\":\"arrow\",\"version\":1357,\"versionNonce\":956513866,\"isDeleted\":false,\"id\":\"7b7FrSSs7NwiRxWJ5v8Im\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":114.06958186964133,\"y\":-153.61328125,\"strokeColor\":\"#000000\",\"backgroundColor\":\"#ced4da\",\"width\":38.038331869641326,\"height\":66.93946157696914,\"seed\":44511818,\"groupIds\":[],\"strokeSharpness\":\"round\",\"boundElementIds\":[],\"startBinding\":{\"elementId\":\"LOWPRplh\",\"focus\":0.6605149040402252,\"gap\":1.869140625},\"endBinding\":{\"elementId\":\"h1182feObKlZwI1O9kZmh\",\"focus\":0.8931564101633984,\"gap\":13.71484375},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-38.038331869641326,66.93946157696914]]}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#f1f3f5\",\"currentItemStrokeColor\":\"#000000\",\"currentItemBackgroundColor\":\"#ced4da\",\"currentItemFillStyle\":\"solid\",\"currentItemStrokeWidth\":2,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":0,\"currentItemOpacity\":100,\"currentItemFontFamily\":3,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"center\",\"currentItemStrokeSharpness\":\"round\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemLinearStrokeSharpness\":\"round\",\"gridSize\":null}}</code>%%</p>"},{"location":"Docker/docker-notes/TO-DO-Docker/","title":"Learning Plan","text":""},{"location":"Docker/docker-notes/TO-DO-Docker/#to-do","title":"TO-DO","text":"<p>todo - [ ] video - [ ] curriculum - [ ] networking - [ ] docker-compose - [ ] Dockerfile</p>"},{"location":"Docker/docker-notes/container-and-OS/","title":"container and OS","text":"<p>a</p>"},{"location":"Docker/docker-notes/container-and-OS/#docker-container-doesnt-need-and-os-but-each-container-has-one-why","title":"Docker container doesn't need and OS, but each container has one. Why?","text":""},{"location":"Docker/docker-notes/container-and-OS/#questions","title":"Questions","text":"<p>The introduction section of the documentation (https://docs.docker.com/get-started/#a-brief-explanation-of-containers) reads:</p> <p>Containers run apps natively on the host machine\u2019s kernel. They have better performance characteristics than virtual machines that only get virtual access to host resources through a hypervisor. Containers can get native access, each one running in a discrete process, taking no more memory than any other executable.</p> <p>Bingo! Here is the difference. Containers run directly on the kernel of hosting OS, this is why they are so lightweight and fast (plus they provide isolation of processes and nice distribution mechanism in the shape of docker hub, which plays well with the ability to connect containers with each other).</p> <p>But wait a second. I can run Linux applications on windows using docker - how can it be? Sure, there is some VM. Otherwise we would just not get job done...</p> <p>OK, but how does it look like, when we work on Linux host??? And here comes real confusion... there one still defines OS as a base image for every image we want to create. Even if we say \"FROM scratch\" - scratch is still some minimalistic kernel... So here comes</p> <p>QUESTION 1: If I run e.g. CentOS host, can I create the container, which would directly use kernel of this host operating system (and not VM, which includes its own OS)? If yes, how can I do it? If no, why the documentaion of docker lies to us (as then docker images always run within some VM and it is not too much different from other VMs, or ist it?)?</p> <p>After some thinking about it and looking around I was wondering, if some optimization is done for running the images. Here comes</p> <p>QUESTION 2: If I run two containers, images of both of which are based on the same parent image, will this parent image be loaded into memory only once? Will there be one VM for each container or just one, which runs both containers? And what if we use different OSs?</p> <p>The third question is quite beaten:</p> <p>QUESTION 3: Are there somewhere some resources, which describe this kind of things... because most of the articles, which discuss docker just tell \"it is so cool, you must definitely use it. Just run one command and be happy\"... which does not explain too much.</p>"},{"location":"Docker/docker-notes/container-and-OS/#answers","title":"Answers","text":"<p>Docker \"containers\" are not virtual machines; they are just regular processes running on the host system (and thus always on the host's Linux kernel) with some special configuration to partition them off from the rest of the system.</p> <p>You can see this for yourself by starting a process in a container and doing a <code>ps</code> outside the container; you'll see that process in the host's list of all processes. Running <code>ps</code> in the containerized process, however, will show only processes in that container; limiting the view of processes on the system is one of the facilities that containerization provides.</p> <p>The container is also usually given a limited or separate view of many other system resources, such as files, network interfaces and users. In particular, containerized processes are often given a completely different root filesystem and set of users, making it look almost as if it's running on a separate machine. (But it's not; it still shares the host's CPU, memory, I/O bandwidth and, most importantly, Linux kernel of the host.)</p> <p>To answer your specific questions:</p> <ol> <li> <p>On CentOS (or any other system), all containers you create are using the host's kernel. There is no way to create a container that uses a different kernel; you need to start a virtual machine for that.</p> </li> <li> <p>The image is just files on disk; these files are \"loaded into memory\" in the same way any files are. So no, for any particular disk block of a file in a shared parent image there will never be more than one copy of that disk block in memory at once. However, each container has its own private \"transparent\" filesystem layer above the base image layer that is used to handle writes, so if you change a file the changed blocks will be stored there, and will now be separate from the underlying image that that other processes (who have not changed any blocks in that file) see.</p> </li> <li> <p>In Linux you can try <code>man cgroups</code> and <code>man cgroup_namespaces</code> to get some fairly technical details about the cgroup mechanism, which is what Docker (and any other containerization scheme on Linux) uses to limit and change what a containerized process sees. I don't have any other particular suggestions on readings directly related to this, but I think it might help to learn the technical details of how processes and various other systems work on Unix and POSIX systems in general, because understanding that gives you the background to understand what kinds of things containerization does. Perhaps start with learning about the chroot(2) system call and programming with it a bit (or even playing around with the chroot(8) program); that would give you a practical hands-on example of how one particular area of containerization.</p> </li> </ol> <p>Follow-up questions:</p> <ol> <li> <p>There is no kernel version matching; only the one host kernel is ever used. If the program in the container doesn't work on that version of that kernel, you're simply out of luck. For example, try runing the Docker official <code>centos:6</code> or <code>centos:5</code> container on a Linux system with a 4.19 or later kernel, and you'll see that <code>/bin/bash</code> segfaults when you try to start it. The kernel and userland program are not compatible. If the program tries to use newer facilities that are not in the kernel, it will similarly fail. This is no different from running the same binaries (program and shared libraries!) outside of a container.</p> </li> <li> <p>Windows and Macintosh systems can't run Linux containers directly, since they're not Linux kernels with the appropriate facilities to run even Linux programs, much less supporting the same extra cgroup facilities. So when you install Docker on these, generally it installs a Linux VM on which to run the containers. Almost invariably it will install only a single VM and run all containers in that one VM; to do otherwise would be a waste of resources for no benefit. (Actually, there could be benefit in being able to have several different kernel versions, as mentioned above.) </p> </li> </ol> <p>source: stackoverflow</p> <p>My comment: Windows 10 provides a native support for Docker, so only macOS is the only one that lags behind.</p> <p>Docker does not has an OS in its containers. In simple terms, a docker container image just has a kind of filesystem snapshot of the linux-image the container image is dependent on.</p> <p>The container-image includes some basic programs like bash-shell, vim-editor etc to facilitate developer to work easily with the docker image. Also, docker images can include pre-installed dependencies like nodeJS, redis-server etc as we can find on docker hub.</p> <p>Docker behind the scene uses the host OS which is linux itself to run its containers. The programs included in linux-like filesystem snapshot that we see in form of docker containers actually runs on the host OS in isolation.</p> <p>The container-images may sound like different linux distros but they are the filesystem snapshot of those distros. All Linux distributions are based on the same kernel. They differ in the programs, tools and dependencies that they ships with.</p> <p>Also take note of this comment click. It is very much relevant to this question.</p> <p>Hope this helps</p> <p>source: stackoverflow</p>"},{"location":"Docker/docker-notes/contents/","title":"Contents","text":"<p>-</p>"},{"location":"Docker/docker-notes/docker-notes/","title":"Docker Notes","text":""},{"location":"Docker/docker-notes/docker-notes/#what-is-docker","title":"What is Docker","text":"<p>It is way to simplify application development and application deployment so you have isolated environments and configurations in one box and we don't have to install apps and configurations on different machines</p>"},{"location":"Docker/docker-notes/docker-notes/#installation","title":"Installation","text":""},{"location":"Docker/docker-notes/docker-notes/#before-docker-containers","title":"Before Docker containers","text":"<ul> <li>Installation process is different for each operating system</li> <li>Many steps in which something can go wrong</li> </ul>"},{"location":"Docker/docker-notes/docker-notes/#after-docker-containers","title":"After Docker containers","text":"<ul> <li>Isolated environment</li> <li>Packaged with config already</li> <li>One command to install app</li> <li>Ability to run the same application with different versions</li> </ul>"},{"location":"Docker/docker-notes/docker-notes/#deployment","title":"Deployment","text":""},{"location":"Docker/docker-notes/docker-notes/#before-docker-containers_1","title":"Before Docker containers","text":"<ul> <li>We need to package program ourselves and configurations  - it is prone to dependency conflicts</li> <li>It needs textual guide of deployment, which can lead to misunderstandings </li> <li>It is time-consuming to create/update guides and contact with DevOps after finishing version of the program</li> </ul>"},{"location":"Docker/docker-notes/docker-notes/#after-docker-containers_1","title":"After Docker containers","text":"<ul> <li>Developers and DevOps work together to package app into a container</li> <li>No environmental configuration on the server is required (except Docker Runtime ofc)</li> <li>Configuration, package with app and dependencies are in container so we have single entity with all of this stuff</li> </ul>"},{"location":"Docker/docker-notes/docker-notes/#differences-between-docker-and-vm","title":"Differences between Docker and VM","text":""},{"location":"Docker/docker-notes/docker-notes/#what-is-virtualized-in-virtual-machine","title":"What is virtualized in Virtual Machine","text":""},{"location":"Docker/docker-notes/docker-notes/#what-is-virtualized-in-docker","title":"What is virtualized in Docker","text":"<p>Because of Docker virtualizes (dunno spelling) only the Application Environment, Docker Images are much smaller storage-wise and they are much less resource hungry, than Virtual Machines</p>"},{"location":"Docker/docker-notes/docker-notes/#what-is-an-docker-image-and-a-docker-container","title":"What is  an Docker Image and a Docker Container","text":""},{"location":"Docker/docker-notes/docker-notes/#docker-image","title":"Docker Image","text":"<p>Docker Image is read-only template with instructions for deploying containers</p> <p>An Image consists of collection of files (layers) that have: dependencies, source code and necessary libraries for setting up container environments</p> <ul> <li>Image layers are stacked atop each other</li> <li>Image layers may be different, but every one of them may depend on the one immediately below it</li> <li>Layers between image of OS and Application itself are called intermediate layers</li> <li> <p>Intermediate layers are files that a container layer will be added on top of every one of them</p> </li> <li> <p>To see docker images on your system we use command <code>docker images</code> with output:</p> <ul> <li><code>TAG</code>: version number</li> <li><code>IMAGE ID</code>: unique image identity</li> <li><code>CREATED</code>: time since it was created</li> <li><code>SIZE</code>: the image size</li> </ul> </li> <li>To see all the layers that make the downloaded image: <code>docker history appimage:version_number</code></li> </ul> <p></p>"},{"location":"Docker/docker-notes/docker-notes/#docker-container","title":"Docker Container","text":"<ul> <li>Docker Container provides virtualized runtime environment that separates the execution of an application from the OS</li> <li>Docker Containers provide lightweight and portable environment for deploying apps</li> <li>Each container is autonomous and isolated: it ensures that running app won't disrupt other  programs and OS itself</li> <li>There are several (6) container states:<ul> <li>created</li> <li>restarting</li> <li>running</li> <li>paused</li> <li>exited</li> <li>dead</li> </ul> </li> <li>Every time Docker creates container from an image and  it places <code>rw</code> layer on top that image, because image itself is immutable</li> </ul> Docker Image Docker Container It is container blueprint It's an image instance Immutable Writable Doesn't need computer resources Does need computer resources to run It can be shared No need to share running entity Created only once Multiple containers can be created from the single image"},{"location":"Docker/docker-notes/docker-notes/#working-with-docker","title":"Working with Docker","text":""},{"location":"Docker/docker-notes/docker-notes/#getting-started","title":"Getting Started","text":"<ul> <li><code>docker pull image_name:version</code> <ul> <li>get docker image (without version specified it gets whatever is <code>latest</code>)</li> <li>Example: <code>docker pull postgres:9.6</code></li> </ul> </li> <li><code>docker run image_name:version_number</code><ul> <li>create a new container of an image, and execute the container: </li> <li>Example: <code>docker run -e POSTGRES_PASSWORD=password postgres:9.6</code> (needs password to run)    </li> </ul> </li> <li><code>docker start id_num</code> <ul> <li>starts already created container</li> </ul> </li> <li><code>docker ps</code> <ul> <li>Listing containers</li> </ul> </li> </ul> <ul> <li>Stopping container: <code>docker stop container_id</code></li> </ul> <p>   ### Docker Communication and Settings  Docker uses port binding for communication between containers and a host.  Container ports can be the same (see Container 2 and Container 3), but host needs to use different ports to distinguish communication between different containers (to avoid conflicts).</p> <ul> <li>Option to specify ports:<ul> <li><code>docker -p host_port_nr:container_port_nr</code></li> <li>If port isn't specified there is no way to communicate between host &lt;-&gt; container</li> </ul> </li> </ul> <p> </p> <p>Example: </p> <p></p> <p>Docker can run your container in detached mode (in the background.) To do this, use the <code>--detach</code> or <code>-d</code> for short. Docker will \u201cdetach\u201d from the container and return you to the terminal prompt. * Checking out container logs: <code>docker logs container_id | container_name</code>: print log output of a docker container      * Example of the <code>redis</code> container log:</p> <p> * Setting container name: <code>--name</code>     * Example   <pre><code>    docker run -d -p 5000:6379 --name redis_latest redis\n</code></pre> <pre><code>    docker run -d -p 5001:6379 --name redis_6 redis:6.0\n</code></pre> </p> <ul> <li>Starting interactive terminal: <code>docker exec -it container_id /directory/shell</code><ul> <li>Example:</li> </ul> </li> </ul> <p></p> <p>Additional stuff: -  check the differences between sh and bash -  Docker container does not need an OS, but each container has one. Why?</p> <p>Useful links: - https://www.whitesourcesoftware.com/free-developer-tools/blog/docker-images-vs-docker-containers/ - https://devconnected.com/docker-exec-command-with-examples/</p>"},{"location":"Docker/docker-notes/docker-project/","title":"Docker Project","text":""},{"location":"Docker/docker-notes/docker-project/#js-app-with-mongodb","title":"JS App with MongoDB","text":"<ol> <li>Get <code>mongodb</code> (Database) <pre><code>\u276f docker pull mongo\n</code></pre></li> <li>Get <code>mongo-express</code> (Web-based MongoDB admin interface written with Node.js, Express and Bootstrap3</li> </ol> <pre><code>\u276f docker pull mongo-express\n</code></pre> <ol> <li>Create new network <pre><code>docker network-create mongo-network\n</code></pre> Check networks with <code>docker network ls</code> </li> <li>Create <code>mongodb</code> container with root and password environmental variables and specified network: Excerpt from official repo for MongoDB: <p>Example <code>stack.yml</code> for <code>mongo</code></p> </li> </ol> <pre><code># Use root/example as user/password credentials\nversion: '3.1'\n\nservices:\n\nmongo:\nimage: mongo\nrestart: always\nenvironment:\nMONGO_INITDB_ROOT_USERNAME: root # &lt;------------------------------ (environmental\nMONGO_INITDB_ROOT_PASSWORD: example # &lt;--------------------------- variables)\n\nmongo-express:\nimage: mongo-express\nrestart: always\nports:\n- 8081:8081\nenvironment:\nME_CONFIG_MONGODB_ADMINUSERNAME: root\nME_CONFIG_MONGODB_ADMINPASSWORD: example\nME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/\n</code></pre> <pre><code>docker run -d \\\n-p 27017:27017 \\\n-e MONGO_INITDB_ROOT_USERNAME=admin \\\n-e MONGO_INITDB_ROOT_PASSWORD=secret \\\n--name mongodb \\\n--net mongo-network \\\nmongo \n</code></pre> <ul> <li> <p>Environmental variables provide arguments for the docker containers upon its creation.   </p> </li> <li> <p>Create <code>mongo-express</code> container To connect it to MongoDB we need to add:</p> </li> <li>name of admin</li> <li>admin password</li> <li>name of the database server</li> </ul> <p></p> <pre><code> docker run -d \\                            \n-p 8081:8081 \\                              \n-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \\  \n-e ME_CONFIG_MONGODB_ADMINPASSWORD=secret \\ \n--net mongo-network \\                       \n--name mongo-express \\                      \n-e ME_CONFIG_MONGODB_SERVER=mongodb \\       \nmongo-express   \n</code></pre> <ol> <li>Create <code>my-db</code> database  |  | | :------------------------------------ :| | http://localhost:8081/               |</li> <li>Create <code>users</code> collection in <code>my-db</code></li> </ol> <p></p> <ul> <li>to view constantly changes in logs: <code>docker logs [-f | --follow] [container_id | container_name]</code> </li> </ul>"},{"location":"Docker/docker-notes/docker-project/#putting-docker-run-into-docker-compose-automate-containers","title":"Putting <code>docker run</code> into Docker Compose (automate containers)","text":"<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration.</p> <p> We don't have to setup network in docker-compose, it takes care of creating it <pre><code>version: \"3\"                # version of Docker Compose\nservices:                   # begins docker container specification     \nmongodb:                # container name = --name\nimage: mongo        # name of image\nports:              # ports = -p\n- 27017:27017   # host:container\nenvironment:        # environment = -e\n- MONGO_INITDB_ROOT_USERNAME=admin\n- MONGO_INITDB_ROOT_PASSWORD=password\nmongo-express:\nimage: mongo-express\nports:\n- 8080:8081\nenvironment:\n- ME_CONFIG_MONGODB_ADMINUSERNAME=admin\n- ME_CONFIG_MONGODB_ADMINPASSWORD=password\n- ME_CONFIG_MONGODB_SERVER=mongodb\nrestart: unless-stopped     # on the first run mongodb doesnt work \n</code></pre></p> <ul> <li>to run compose script: <code>docker-compose -f script_name.yaml up</code><ul> <li><code>f</code> = <code>--file</code>: Specify an alternate docker-compose file (default: docker-compose.yml) </li> </ul> </li> <li>to stop <code>docker-compose</code> containers and its network: <code>docker-compose -f docker-compose.yaml down</code></li> </ul> <p></p>"},{"location":"Docker/docker-notes/docker-project/#dockerfile-automate-image-creation","title":"Dockerfile - automate image creation","text":"<p>Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. </p> <pre><code># image base\nFROM node\n\n# environment variables (optional)\n\n# You can create a user with restricted access \n#to a database while starting the container for the first time.\nENV MONGO_DB_USERNAME=admin \\\nMONGO_DB_PWD=password\n# ececute any Linux command inside container    \nRUN mkdir -p /home/app  # copy host -&gt; container\nCOPY . /home/app\n\n\n# set default dir so that next commands executes in /home/app dir\nWORKDIR /home/app\n\n# will execute npm install in /home/app because of WORKDIR\nRUN npm install\n\n# There can only be &gt;&gt; one &lt;&lt; CMD instruction in a `Dockerfile`. If you list more than one `CMD` then only the last `CMD` will take effect.\n# **The main purpose of a CMD is to provide defaults for an executing container.**\n# no need for /home/app/server.js because of WORKDIR\nCMD [\"node\", \"server.js\"]\n</code></pre> <p>When we are building our images we often build images that are based on atop of other images:</p> <p></p> <ul> <li>to build image:  <code>docker build -t my-app:1.0 path</code><ul> <li><code>-t</code>:  Repository, name and tag for the image</li> </ul> </li> </ul> <p></p>"},{"location":"Docker/docker-notes/nextcloud-docker/","title":"NextCloud Docker Install","text":""},{"location":"Docker/docker-notes/nextcloud-docker/#create-network-for-containers","title":"Create network for containers","text":"<pre><code>$ docker network create nextcloud_network\n</code></pre>"},{"location":"Docker/docker-notes/nextcloud-docker/#configure-the-nginx-reverse-proxy-container","title":"Configure the Nginx reverse proxy container","text":"<p>Impportant read: - proxies</p> <p>We will setup image with: - <code>jwilder/nginx-proxy</code>, which contains:     - nginx reverse proxy     - <code>docker-gen</code>         - a file generator that renders templates using docker container meta-data.         - It is used for: Reverse Proxy Configs - to route requests from the host to containers</p> <pre><code>version: '3'  services:\n\nproxy:\nimage: jwilder/nginx-proxy:alpine\nlabels:\n- \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\ncontainer_name: nextcloud-proxy\nnetworks:\n- nextcloud_network\nports:\n- 80:80\n- 443:443\nvolumes:\n- ./proxy/conf.d:/etc/nginx/conf.d:rw\n- ./proxy/vhost.d:/etc/nginx/vhost.d:rw\n- ./proxy/html:/usr/share/nginx/html:rw\n- ./proxy/certs:/etc/nginx/certs:ro\n- /etc/localtime:/etc/localtime:ro\n- /var/run/docker.sock:/tmp/docker.sock:ro\nrestart: unless-stopped\n</code></pre> <ul> <li><code>\"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\"</code> is used so that the Let\u2019s Encrypt container knows which nginx proxy container to use for certificate generation</li> <li>network: <code>nextcloud_network</code>is used by the containers to communicate among themselves</li> <li>Volumes section is used by the container to configure the Nginx virtual host and to access certificates generated by Let\u2019s Encrypt companion container. The <code>/etc/localtime:/etc/localtime:ro</code> is used to duplicate the host timezone inside the container.</li> </ul>"},{"location":"Docker/docker-notes/nextcloud-docker/#configure-lets-encrypt-container","title":"Configure Let's Encrypt container","text":"<p>```yaml letsencrypt:     image: jrcs/letsencrypt-nginx-proxy-companion     container_name: nextcloud-letsencrypt     depends_on:       - proxy     networks:       - nextcloud_network     volumes:       - ./proxy/certs:/etc/nginx/certs:rw       - ./proxy/vhost.d:/etc/nginx/vhost.d:rw       - ./proxy/html:/usr/share/nginx/html:rw       - /etc/localtime:/etc/localtime:ro       - /var/run/docker.sock:/var/run/docker.sock:ro     restart: unless-stopped <pre><code> - The Lets\u2019 Encrypt container depends on our first service - `proxy`\n -  is a part of the network `nextcloud_network`\n -  The `restart: unless-stopped` allows the containers to be stopped gracefully unless you manually run `docker stop letsencrypt` or `docker-compose down letsencrypt`\n ## Configure the MariaDB container\n ```yaml\n db:\n    image: mariadb\n    container_name: nextcloud-mariadb\n    networks:\n      - nextcloud_network\n    volumes:\n      - db:/var/lib/mysql\n      - /etc/localtime:/etc/localtime:ro\n    environment:\n      - MYSQL_ROOT_PASSWORD=secret\n      - MYSQL_PASSWORD=mysql\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    restart: unless-stopped\n</code></pre></p>"},{"location":"Docker/docker-notes/nextcloud-docker/#configure-the-nextcloud-docker-container","title":"Configure the Nextcloud Docker container","text":""},{"location":"Docker/docker-notes/nextcloud-docker/#1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23app-image-nextcloudlatest-container_name-nextcloud-app-networks-nextcloud_network-depends_on-letsencrypt-proxy-db-volumes-nextcloudvarwwwhtml-appconfigvarwwwhtmlconfig-appcustom_appsvarwwwhtmlcustom_apps-appdatavarwwwhtmldata-appthemesvarwwwhtmlthemes-etclocaltimeetclocaltimero-environment-virtual_hostnextcloudcodenotesdev-letsencrypt_hostnextcloudcodenotesdev-letsencrypt_emailandrzejzahorskigmailcom-restart-unless-stopped","title":"<pre><code>app:\n    image: nextcloud:latest\n    container_name: nextcloud-app\n    networks:\n      - nextcloud_network\n    depends_on:\n      - letsencrypt\n      - proxy\n      - db\n    volumes:\n      - nextcloud:/var/www/html\n      - ./app/config:/var/www/html/config\n      - ./app/custom_apps:/var/www/html/custom_apps\n      - ./app/data:/var/www/html/data\n      - ./app/themes:/var/www/html/themes\n      - /etc/localtime:/etc/localtime:ro\n    environment:\n      - VIRTUAL_HOST=nextcloud.codenotes.dev\n      - LETSENCRYPT_HOST=nextcloud.codenotes.dev\n      - LETSENCRYPT_EMAIL=andrzej.zahorski@gmail.com\n\n\n    restart: unless-stopped\n</code></pre>","text":"<p>Good Reads: - Automated Nginx Reverse Proxy for Docker</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/control_flow/exercises/exercises/","title":"Control Flow - exercises","text":""},{"location":"Latex/latex-template/out/production/Java_Tutorial/control_flow/exercises/exercises/#1","title":"1","text":""},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/","title":"Test 1","text":""},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-1","title":"Exercise 1","text":"<p>Write program with <code>for</code> loop that will print out even numbers in specific range </p> <ul> <li>do not use <code>if</code> statement</li> </ul>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-2","title":"Exercise 2","text":"<p>Write program that will calculate the factorial function</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-3","title":"Exercise 3","text":"<p>Write program that will generate multiplication table</p> <ul> <li>biggest number should be 10</li> <li>use <code>\\t</code>(tab) for spacing between numbers</li> </ul> <pre><code>    Output:\n\n1       2       3       4       5       6       7       8       9       10\n2       4       6       8       10      12      14      16      18      20\n3       6       9       12      15      18      21      24      27      30\n4       8       12      16      20      24      28      32      36      40\n5       10      15      20      25      30      35      40      45      50\n6       12      18      24      30      36      42      48      54      60\n7       14      21      28      35      42      49      56      63      70\n8       16      24      32      40      48      56      64      72      80\n9       18      27      36      45      54      63      72      81      90\n10      20      30      40      50      60      70      80      90      100\n</code></pre> <p>Let's imagine that we have boxes for coins. When the box is full, we take another one.  All boxes have <code>n</code> coin capacity. Write the program that prints out how many containers do we need to keep <code>x</code> number of coins and how much of them is in the last box.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-5","title":"Exercise 5","text":"<p>Write program that generates an integer array with either 0 or 1 in random places. Count total occurrences for 0 and 1.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-6","title":"Exercise 6","text":"<p>Create an integer array with random length.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-7","title":"Exercise 7","text":"<ul> <li>Create double array with length of 10 filled with random numbers.</li> <li>Write code that will print out the content of it (do not use built-in functions)</li> <li>Change all  the values of the array accordingly: 1 if value is even, 0 if it's not.</li> </ul>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-8","title":"Exercise 8","text":"<p>Create two-dimensional array with random values in range of 0 to 9 (inclusive),  then print it, so the output will be formatted like this (use <code>\\t</code> for spacing) <pre><code>7       3       6       0\n0       0       2       0\n4       5       8       5\n9       2       9       0\n0       4       7       5\n</code></pre></p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-9","title":"Exercise 9","text":"<p>Create an array with a random size, but not bigger than 5 x 5. Fill it with random numbers from 0 to 9 (inclusive). Print the index of the first occurrence of the lowest number as well as the value of this number.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/exercises/langBasics_cFlow/Test_1/#exercise-10","title":"Exercise 10","text":"<p>Write program that will check if matrix (square array) is diagonal.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/","title":"Strong vs weak static vs dynamic","text":"<p>This is often misunderstood so let me clear it up.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#staticdynamic-typing","title":"Static/Dynamic Typing","text":"<p>Static typing is where the type is bound to the variable.  Types are checked at compile time.</p> <p>Dynamic typing is where the type is bound to the value.  Types are checked at run time.</p> <p>So in Java for example:</p> <pre><code>String s = \"abcd\";\n</code></pre> <p><code>s</code> will \"forever\" be a <code>String</code>. During its life it may point to different <code>String</code>s (since <code>s</code> is a reference in Java). It may have a <code>null</code> value but it will never refer to an <code>Integer</code> or a <code>List</code>. That's static typing.</p> <p>In PHP:</p> <pre><code>$s = \"abcd\";          // $s is a string\n$s = 123;             // $s is now an integer\n$s = array(1, 2, 3);  // $s is now an array\n$s = new DOMDocument; // $s is an instance of the DOMDocument class\n</code></pre> <p>That's dynamic typing.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#strongweak-typing","title":"Strong/Weak Typing","text":"<p>Strong typing is a phrase with no widely agreed upon meaning.  Most programmers who use this term to mean something other than static typing use it to imply that there is a type discipline that is enforced by the compiler.  For example, CLU has a strong type system that does not allow client code to create a value of abstract type except by using the constructors provided by the type.  C has a somewhat strong type system, but it can be \"subverted\" to a degree because a program can always cast a value of one pointer type to a value of another pointer type.  So for example, in C you can take a value returned by <code>malloc()</code> and cheerfully cast it to <code>FILE*</code>, and the compiler won't try to stop you\u2014or even warn you that you are doing anything dodgy.</p> <p>(The original answer said something about a value \"not changing type at run time\".  I have known many language designers and compiler writers and have not known one that talked about values changing type at run time, except possibly some very advanced research in type systems, where this is known as the \"strong update problem\".)</p> <p>Weak typing implies that the compiler does not enforce a typing discpline, or perhaps that enforcement can easily be subverted.</p> <p>The original of this answer conflated weak typing with implicit conversion (sometimes also called \"implicit promotion\"). For example, in Java:</p> <pre><code>String s = \"abc\" + 123; // \"abc123\";\n</code></pre> <p>This is code is an example of implicit promotion: 123 is implicitly converted to a string before being concatenated with <code>\"abc\"</code>. It can be argued the Java compiler rewrites that code as:</p> <pre><code>String s = \"abc\" + new Integer(123).toString();\n</code></pre> <p>Consider a classic PHP \"starts with\" problem:</p> <pre><code>if (strpos('abcdef', 'abc') == false) {\n  // not found  \n}\n</code></pre> <p>The error here is that <code>strpos()</code> returns the index of the match, being 0. 0 is coerced into boolean <code>false</code> and thus the condition is actually true. The solution is to use <code>===</code> instead of <code>==</code> to avoid implicit conversion.</p> <p>This example illustrates how a combination of implicit conversion and dynamic typing can lead programmers astray.</p> <p>Compare that to Ruby:</p> <pre><code>val = \"abc\" + 123\n</code></pre> <p>which is a runtime error because in Ruby the object 123 is not implicitly converted just because it happens to be passed to a <code>+</code> method. In Ruby the programmer must make the conversion explicit:</p> <pre><code>val = \"abc\" + 123.to_s\n</code></pre> <p>Comparing PHP and Ruby is a good illustration here. Both are dynamically typed languages but PHP has lots of implicit conversions and Ruby (perhaps surprisingly if you're unfamiliar with it) doesn't.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#staticdynamic-vs-strongweak","title":"Static/Dynamic vs Strong/Weak","text":"<p>The point here is that the static/dynamic axis is independent of the strong/weak axis. People confuse them probably in part because strong vs weak typing is not only less clearly defined, there is no real consensus on exactly what is meant by strong and weak. For this reason strong/weak typing is far more of a shade of grey rather than black or white.</p> <p>So to answer your question: another way to look at this that's mostly correct is to say that static typing is compile-time type safety and strong typing is runtime type safety.</p> <p>The reason for this is that variables in a statically typed language have a type that must be declared and can be checked at compile time. A strongly-typed language has values that have a type at run time, and it's difficult for the programmer to subvert the type system without a dynamic check.</p> <p>But it's important to understand that a language can be Static/Strong, Static/Weak, Dynamic/Strong or Dynamic/Weak.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#java-is-strongly-typed","title":"Java is Strongly-Typed","text":"<p>source: https://www.cs.usfca.edu/~wolber/courses/110/lectures/java_is_strongly.htm All variables must be declared.</p> <pre><code>You cannot say assign to a variable before it is declared.\n\nDeclaration specifies the type of the variable\n\n    &lt;type&gt; &lt;variable&gt;;\n\nYou can define a variable as a scalar:\n\n    int x;\n    float f;\n\nor programmer-defined type (some class)\n\n    Person p;\n    ArrayList list;\n    ProgramStatement statement;\n\nWhen you define a class, you create a new programmer-defined type.\n</code></pre> <p>After a variable is declared, you can assign to it.</p> <pre><code>    int x;\n    x = 4;\n</code></pre> <p>You can also declare and assign with one fell swoop:</p> <pre><code>    int x=4;  // equivalent to above two lines.\n</code></pre> <p>We call a variable which has a class for a type an object.</p> <p>Once an object is declared, you can 1) assign to it, often with a creation statement. 2) access its data members, and 3) call its methods.</p> <pre><code>Person p;\np = new Person(\"Wolber\",25); // note constructor with parameters\np.age=27; // assigning to data member\np.older(jones) ;   // call a method\n\nWith objects as well, you can declare and assign with one fell swoop:\n\n    Person p = new Person();\n\nQuestion: why does the sentence above say 'often' with a creation statement. How else do we assign to an object?\n</code></pre> <p>Now let's convert a Python program to Java step by step. Here's the program.</p> <p>The key changes are:</p> <ol> <li>use of { ...} instead of indenting</li> <li>Declaring the types of all data members, local variables, parameters, and return values.</li> <li>Create objects using 'new'</li> <li>Input data using Scanner class.</li> <li>Use ArrayList instead of python built-in lists.</li> </ol> <p>We'll also need some Math functions, so we'll import java.lang.Math.* and take a look at the API docs for it. And we'll need to convert some integers to Strings, so we'll use the valueof function from the String class</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/oop_concepts/e01_objects/objects/","title":"What is an Object","text":"<ul> <li>Real-world objects share two characteristics: They all have state and behavior. Dogs have state   (name, color, breed, hungry) and behavior (barking, fetching, wagging tail).</li> <li>Software objects are conceptually similar to real-world objects:    they too consist of state and related behavior.__     An object stores its state in fields     (variables in some programming languages) and exposes its behavior through *methods     (functions in some programming languages).    Methods operate on an object's internal state and    serve as the primary mechanism for object-to-object communication.   </li> </ul> <p>Object representation: </p> <p>### Important!    Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation \u2014 a fundamental principle of object-oriented programming.</p>"},{"location":"Latex/latex-template/out/production/Java_Tutorial/oop_concepts/e01_objects/objects/#bicycle-example","title":"Bicycle example","text":""},{"location":"Latex/latex-template/out/production/Java_Tutorial/oop_concepts/e01_objects/objects/#benefits-of-object-oriented-programming","title":"Benefits of Object Oriented Programming","text":"<ul> <li> <p>Modularity</p> </li> <li> <p>The source code for an object can be written and maintained independently of the source code for other objects.        Once created, an object can be easily passed around inside the system.</p> </li> <li> <p>Information-hiding</p> <ul> <li>By interacting only with an object's methods, the details of its internal   implementation remain hidden from the outside world.</li> </ul> </li> <li> <p>Code re-use</p> <ul> <li>If an object already exists (perhaps written by another software developer),    you can use that object in your program. This allows specialists to implement/test/debug    complex, task-specific objects, which you can then trust to run in your own code.</li> </ul> </li> <li> <p>Pluggability and debugging ease</p> </li> <li>If a particular object turns out to be problematic,    you can simply remove it from your application and plug in a different   object as its replacement. This is analogous to fixing mechanical problems in the real world. If a bolt breaks, you replace it, not the entire machine.</li> </ul>"},{"location":"Latex/latex-template/src/control_flow/exercises/exercises/","title":"Control Flow - exercises","text":""},{"location":"Latex/latex-template/src/control_flow/exercises/exercises/#1","title":"1","text":""},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/","title":"Test 1","text":""},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-1","title":"Exercise 1","text":"<p>Write program with <code>for</code> loop that will print out even numbers in specific range </p> <ul> <li>do not use <code>if</code> statement</li> </ul>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-2","title":"Exercise 2","text":"<p>Write program that will calculate the factorial function</p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-3","title":"Exercise 3","text":"<p>Write program that will generate multiplication table</p> <ul> <li>biggest number should be 10</li> <li>use <code>\\t</code>(tab) for spacing between numbers</li> </ul> <pre><code>    Output:\n\n1       2       3       4       5       6       7       8       9       10\n2       4       6       8       10      12      14      16      18      20\n3       6       9       12      15      18      21      24      27      30\n4       8       12      16      20      24      28      32      36      40\n5       10      15      20      25      30      35      40      45      50\n6       12      18      24      30      36      42      48      54      60\n7       14      21      28      35      42      49      56      63      70\n8       16      24      32      40      48      56      64      72      80\n9       18      27      36      45      54      63      72      81      90\n10      20      30      40      50      60      70      80      90      100\n</code></pre> <p>Let's imagine that we have boxes for coins. When the box is full, we take another one.  All boxes have <code>n</code> coin capacity. Write the program that prints out how many containers do we need to keep <code>x</code> number of coins and how much of them is in the last box.</p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-5","title":"Exercise 5","text":"<p>Write program that generates an integer array with either 0 or 1 in random places. Count total occurrences for 0 and 1.</p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-6","title":"Exercise 6","text":"<p>Create an integer array with random length.</p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-7","title":"Exercise 7","text":"<ul> <li>Create double array with length of 10 filled with random numbers.</li> <li>Write code that will print out the content of it (do not use built-in functions)</li> <li>Change all  the values of the array accordingly: 1 if value is even, 0 if it's not.</li> </ul>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-8","title":"Exercise 8","text":"<p>Create two-dimensional array with random values in range of 0 to 9 (inclusive),  then print it, so the output will be formatted like this (use <code>\\t</code> for spacing) <pre><code>7       3       6       0\n0       0       2       0\n4       5       8       5\n9       2       9       0\n0       4       7       5\n</code></pre></p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-9","title":"Exercise 9","text":"<p>Create an array with a random size, but not bigger than 5 x 5. Fill it with random numbers from 0 to 9 (inclusive). Print the index of the first occurrence of the lowest number as well as the value of this number.</p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-10","title":"Exercise 10","text":"<p>Write program that will check if matrix (square array) is diagonal.</p>"},{"location":"Latex/latex-template/src/exercises/langBasics_cFlow/Test_1/#exercise-11","title":"Exercise 11","text":"<p>Write program that will create arrays in such way: <pre><code>    3 3 3 3 3 3 3 3\n    3 2 2 2 2 2 2 3\n    3 2 1 1 1 1 2 3\n    3 2 1 0 0 1 2 3\n    3 2 1 0 0 1 2 3\n    3 2 1 1 1 1 2 3\n    3 2 2 2 2 2 2 3\n    3 3 3 3 3 3 3 3\n</code></pre></p>"},{"location":"Latex/latex-template/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/","title":"Strong vs weak static vs dynamic","text":"<p>This is often misunderstood so let me clear it up.</p>"},{"location":"Latex/latex-template/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#staticdynamic-typing","title":"Static/Dynamic Typing","text":"<p>Static typing is where the type is bound to the variable.  Types are checked at compile time.</p> <p>Dynamic typing is where the type is bound to the value.  Types are checked at run time.</p> <p>So in Java for example:</p> <pre><code>String s = \"abcd\";\n</code></pre> <p><code>s</code> will \"forever\" be a <code>String</code>. During its life it may point to different <code>String</code>s (since <code>s</code> is a reference in Java). It may have a <code>null</code> value but it will never refer to an <code>Integer</code> or a <code>List</code>. That's static typing.</p> <p>In PHP:</p> <pre><code>$s = \"abcd\";          // $s is a string\n$s = 123;             // $s is now an integer\n$s = array(1, 2, 3);  // $s is now an array\n$s = new DOMDocument; // $s is an instance of the DOMDocument class\n</code></pre> <p>That's dynamic typing.</p>"},{"location":"Latex/latex-template/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#strongweak-typing","title":"Strong/Weak Typing","text":"<p>Strong typing is a phrase with no widely agreed upon meaning.  Most programmers who use this term to mean something other than static typing use it to imply that there is a type discipline that is enforced by the compiler.  For example, CLU has a strong type system that does not allow client code to create a value of abstract type except by using the constructors provided by the type.  C has a somewhat strong type system, but it can be \"subverted\" to a degree because a program can always cast a value of one pointer type to a value of another pointer type.  So for example, in C you can take a value returned by <code>malloc()</code> and cheerfully cast it to <code>FILE*</code>, and the compiler won't try to stop you\u2014or even warn you that you are doing anything dodgy.</p> <p>(The original answer said something about a value \"not changing type at run time\".  I have known many language designers and compiler writers and have not known one that talked about values changing type at run time, except possibly some very advanced research in type systems, where this is known as the \"strong update problem\".)</p> <p>Weak typing implies that the compiler does not enforce a typing discpline, or perhaps that enforcement can easily be subverted.</p> <p>The original of this answer conflated weak typing with implicit conversion (sometimes also called \"implicit promotion\"). For example, in Java:</p> <pre><code>String s = \"abc\" + 123; // \"abc123\";\n</code></pre> <p>This is code is an example of implicit promotion: 123 is implicitly converted to a string before being concatenated with <code>\"abc\"</code>. It can be argued the Java compiler rewrites that code as:</p> <pre><code>String s = \"abc\" + new Integer(123).toString();\n</code></pre> <p>Consider a classic PHP \"starts with\" problem:</p> <pre><code>if (strpos('abcdef', 'abc') == false) {\n  // not found  \n}\n</code></pre> <p>The error here is that <code>strpos()</code> returns the index of the match, being 0. 0 is coerced into boolean <code>false</code> and thus the condition is actually true. The solution is to use <code>===</code> instead of <code>==</code> to avoid implicit conversion.</p> <p>This example illustrates how a combination of implicit conversion and dynamic typing can lead programmers astray.</p> <p>Compare that to Ruby:</p> <pre><code>val = \"abc\" + 123\n</code></pre> <p>which is a runtime error because in Ruby the object 123 is not implicitly converted just because it happens to be passed to a <code>+</code> method. In Ruby the programmer must make the conversion explicit:</p> <pre><code>val = \"abc\" + 123.to_s\n</code></pre> <p>Comparing PHP and Ruby is a good illustration here. Both are dynamically typed languages but PHP has lots of implicit conversions and Ruby (perhaps surprisingly if you're unfamiliar with it) doesn't.</p>"},{"location":"Latex/latex-template/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#staticdynamic-vs-strongweak","title":"Static/Dynamic vs Strong/Weak","text":"<p>The point here is that the static/dynamic axis is independent of the strong/weak axis. People confuse them probably in part because strong vs weak typing is not only less clearly defined, there is no real consensus on exactly what is meant by strong and weak. For this reason strong/weak typing is far more of a shade of grey rather than black or white.</p> <p>So to answer your question: another way to look at this that's mostly correct is to say that static typing is compile-time type safety and strong typing is runtime type safety.</p> <p>The reason for this is that variables in a statically typed language have a type that must be declared and can be checked at compile time. A strongly-typed language has values that have a type at run time, and it's difficult for the programmer to subvert the type system without a dynamic check.</p> <p>But it's important to understand that a language can be Static/Strong, Static/Weak, Dynamic/Strong or Dynamic/Weak.</p>"},{"location":"Latex/latex-template/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#java-is-strongly-typed","title":"Java is Strongly-Typed","text":"<p>source: https://www.cs.usfca.edu/~wolber/courses/110/lectures/java_is_strongly.htm All variables must be declared.</p> <pre><code>You cannot say assign to a variable before it is declared.\n\nDeclaration specifies the type of the variable\n\n    &lt;type&gt; &lt;variable&gt;;\n\nYou can define a variable as a scalar:\n\n    int x;\n    float f;\n\nor programmer-defined type (some class)\n\n    Person p;\n    ArrayList list;\n    ProgramStatement statement;\n\nWhen you define a class, you create a new programmer-defined type.\n</code></pre> <p>After a variable is declared, you can assign to it.</p> <pre><code>    int x;\n    x = 4;\n</code></pre> <p>You can also declare and assign with one fell swoop:</p> <pre><code>    int x=4;  // equivalent to above two lines.\n</code></pre> <p>We call a variable which has a class for a type an object.</p> <p>Once an object is declared, you can 1) assign to it, often with a creation statement. 2) access its data members, and 3) call its methods.</p> <pre><code>Person p;\np = new Person(\"Wolber\",25); // note constructor with parameters\np.age=27; // assigning to data member\np.older(jones) ;   // call a method\n\nWith objects as well, you can declare and assign with one fell swoop:\n\n    Person p = new Person();\n\nQuestion: why does the sentence above say 'often' with a creation statement. How else do we assign to an object?\n</code></pre> <p>Now let's convert a Python program to Java step by step. Here's the program.</p> <p>The key changes are:</p> <ol> <li>use of { ...} instead of indenting</li> <li>Declaring the types of all data members, local variables, parameters, and return values.</li> <li>Create objects using 'new'</li> <li>Input data using Scanner class.</li> <li>Use ArrayList instead of python built-in lists.</li> </ol> <p>We'll also need some Math functions, so we'll import java.lang.Math.* and take a look at the API docs for it. And we'll need to convert some integers to Strings, so we'll use the valueof function from the String class</p>"},{"location":"Latex/latex-template/src/oop_concepts/e01_objects/objects/","title":"What is an Object","text":"<ul> <li>Real-world objects share two characteristics: They all have state and behavior. Dogs have state   (name, color, breed, hungry) and behavior (barking, fetching, wagging tail).</li> <li>Software objects are conceptually similar to real-world objects:    they too consist of state and related behavior.__     An object stores its state in fields     (variables in some programming languages) and exposes its behavior through *methods     (functions in some programming languages).    Methods operate on an object's internal state and    serve as the primary mechanism for object-to-object communication.   </li> </ul> <p>Object representation: </p> <p>### Important!    Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation \u2014 a fundamental principle of object-oriented programming.</p>"},{"location":"Latex/latex-template/src/oop_concepts/e01_objects/objects/#bicycle-example","title":"Bicycle example","text":""},{"location":"Latex/latex-template/src/oop_concepts/e01_objects/objects/#benefits-of-object-oriented-programming","title":"Benefits of Object Oriented Programming","text":"<ul> <li> <p>Modularity</p> </li> <li> <p>The source code for an object can be written and maintained independently of the source code for other objects.        Once created, an object can be easily passed around inside the system.</p> </li> <li> <p>Information-hiding</p> <ul> <li>By interacting only with an object's methods, the details of its internal   implementation remain hidden from the outside world.</li> </ul> </li> <li> <p>Code re-use</p> <ul> <li>If an object already exists (perhaps written by another software developer),    you can use that object in your program. This allows specialists to implement/test/debug    complex, task-specific objects, which you can then trust to run in your own code.</li> </ul> </li> <li> <p>Pluggability and debugging ease</p> </li> <li>If a particular object turns out to be problematic,    you can simply remove it from your application and plug in a different   object as its replacement. This is analogous to fixing mechanical problems in the real world. If a bolt breaks, you replace it, not the entire machine.</li> </ul>"},{"location":"Python-Notes/iterators_generators/","title":"Iterators generators","text":"<pre><code>sizes = [\n    \"Really Smol\",\n    \"Smol\",\n    \"Medium\",\n    \"Big\",\n    \"Chungus\"\n]\n\nsizes_iterator = iter(sizes)\n\nwhile sizes_iterator:\n    try:\n        print(next(sizes_iterator))\n    except StopIteration:\n        print(\"Nothing left to iterate over\")\n        break\n</code></pre> <pre>\n<code>Really Smol\nSmol\nMedium\nBig\nChungus\nNothing left to iterate over\n</code>\n</pre> <pre><code>capitals = { \n    \"France\":\"Paris\", \n    \"Netherlands\":\"Amsterdam\", \n    \"Germany\":\"Berlin\", \n    \"Switzerland\":\"Bern\", \n    \"Austria\":\"Vienna\"}\n\ncapitals_iterator = iter(capitals)\n\nwhile capitals_iterator:\n    try:\n        print(next(capitals_iterator))\n    except StopIteration:\n        print(\"Nothing left to iterate over\")\n        break\n</code></pre> <pre>\n<code>France\nNetherlands\nGermany\nSwitzerland\nAustria\nNothing left to iterate over\n</code>\n</pre> <ul> <li>Example: iterate from \\(2^0\\) to \\(2^x\\) (including), where \\(x\\) is argument for the constructor of the object.</li> </ul> <pre><code>class PowerTwo:\n    def __init__(self, x = 0):\n        self.x = x\n\n    def __iter__(self):\n        # we start with 2^0\n        self.n = 0\n        # print(type(self))\n        return self\n\n    def __next__(self):\n        if self.n &lt;= self.x:\n            result = 2 ** self.n\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n\nnums = PowerTwo(3)\nnums_iter = iter(nums)\ntry:\n    print(next(nums))\n    print(next(nums))\n    print(next(nums))\n    print(next(nums))\n    print(next(nums))\nexcept StopIteration:\n    print(\"nothing to iterate\")\n</code></pre> <pre>\n<code>1\n2\n4\n8\nnothing to iterate\n</code>\n</pre> <ul> <li>Example 2: iterate over elements of a list (or any iterable object) and if it ends return to beginning (create a cycle)\"</li> </ul> <pre><code>class Cycle(object):\n    def __init__(self, iterable) -&gt; None:\n        self.iterable = iterable\n        self.object_iterator = iter(iterable)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        while True:\n            try:\n                return next(self.object_iterator)\n            except StopIteration:\n                self.object_iterator = iter(self.iterable)\n\ncycle_list = Cycle([1, 2, 3])\n\nfor _ in range(10):\n    print(next(cycle_list), end = \", \")\n</code></pre> <pre>\n<code>1, 2, 3, 1, 2, 3, 1, 2, 3, 1, </code>\n</pre> <ul> <li>Example: burger generator:</li> </ul> <pre><code>def burger_generator():\n    yield \"Chese Borgir\"\n    yield \"Big Mag\"\n    yield \"Smol Mag\"\n    yield \"Vegan Borgir\"\n\nref_burger_generator = burger_generator()\n\ntry:\n    print(next(ref_burger_generator))\n    print(next(ref_burger_generator))\n    print(next(ref_burger_generator))\n    print(next(ref_burger_generator))\n    print(next(ref_burger_generator))\nexcept StopIteration:\n    print(\"no more yield\")\n\n#  There is no reset, but it's possible to create another generator. \nref_burger_generator = burger_generator()\nprint(next(ref_burger_generator))\n</code></pre> <pre>\n<code>Chese Borgir\nBig Mag\nSmol Mag\nVegan Borgir\nno more yield\nChese Borgir\n</code>\n</pre> <pre><code>mindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness&lt;br/&gt;and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n\n</code></pre> <p>Sources:</p> <ul> <li>https://python-course.eu/advanced-python/generators-and-iterators.php</li> <li>https://www.programiz.com/python-programming/iterator</li> </ul>"},{"location":"Python-Notes/iterators_generators/#generators-and-iterators-in-python","title":"Generators and Iterators in Python","text":"<ul> <li>They work on a principle of lazy evaluation</li> <li>An iterator can be seen as a pointer to a container, which enables us to iterate over all the elements of this container</li> <li>An iterator is an abstraction, which enables the programmer to access all the elements of an iterable object (a set, a string, a list etc.) without any deeper knowledge of the data structure of this object.</li> <li>Generators are a special kind of function, which enable us to implement or generate iterators.</li> </ul>"},{"location":"Python-Notes/iterators_generators/#iterators","title":"Iterators","text":"<ul> <li>If we will iterate after the end of the <code>iterable</code> has nothing to produce we will get <code>StopIteration</code> exception</li> <li>In the example if we use <code>next(sizes_iterator)</code> after <code>\"Chungus\"</code> is returned we will get this exception </li> </ul>"},{"location":"Python-Notes/iterators_generators/#iterator-example-1-lists","title":"Iterator example 1 - lists","text":""},{"location":"Python-Notes/iterators_generators/#iterator-example-2-dictionaries","title":"Iterator example 2 - dictionaries","text":""},{"location":"Python-Notes/iterators_generators/#building-custom-iterators","title":"Building Custom Iterators","text":"<p>Needed methods:</p> <ul> <li><code>__iter__()</code></li> <li>returns the iterator object itself. If required, some initialization can be performed.</li> <li><code>__next__()</code> </li> <li>must return the next item in the sequence. </li> <li>On reaching the end, and in subsequent calls, it must raise <code>StopIteration</code>.</li> </ul>"},{"location":"Python-Notes/iterators_generators/#_1","title":"Iterators generators","text":""},{"location":"Python-Notes/iterators_generators/#generators","title":"Generators","text":"<ul> <li>In Python, a generator is a function that returns an iterator that produces a sequence of values when iterated over.</li> <li>A generator is a function which returns a generator object</li> <li>The values, on which can be iterated, are created by using the <code>yield</code> statement.</li> <li>The execution of the code stops when a yield statement is reached</li> <li>The value behind the yield will be returned. The execution of the generator is interrupted now. </li> <li>As soon as \"next\" is called again on the generator object, the generator function will resume execution right after the yield statement in the code, where the last call is made. </li> <li>The execution will continue in the state in which the generator was left after the last yield.</li> <li>Local variables still exist, because they are automatically saved between calls. This is a fundamental difference to functions.</li> </ul>"},{"location":"Python-Notes/lazy_evaluation/","title":"Lazy evaluation","text":"<ul> <li>Lazy evaluation is a strategy used in programming where the evaluation of an expression is delayed until it is needed.</li> <li>Lazy evaluation can be useful in situations:</li> <li>the calculation of a sequence of values is expensive or memory-intensive</li> <li>where the entire sequence does not need to be calculated upfront</li> </ul>"},{"location":"Python-Notes/lazy_evaluation/#lazy-evaluation","title":"Lazy Evaluation","text":""},{"location":"Python-Notes/old/python-course/md/","title":"Python Tutorial","text":""},{"location":"Python-Notes/old/python-course/md/Test/","title":"Test","text":"<p>[!info] something</p>"},{"location":"Python-Notes/old/python-course/md/assigment_expressions/","title":"Assigment expressions","text":""},{"location":"Python-Notes/old/python-course/md/assigment_expressions/#assignment-expressions","title":"Assignment Expressions","text":"<ul> <li>In most of languages assigning variables in the middle of expressions is not allowed.</li> <li>Python allows that with a special operator: <code>:=</code><ul> <li>It is affectionately known as \u201cthe walrus operator\u201d due to its resemblance to the eyes and tusks of a walrus.</li> </ul> </li> </ul> <ul> <li> <p>Here is sample of Java code which uses assignment and expression in single instruction: <pre><code>    if (int x = 5 &gt; 1) { // this will return error\nSystem.out.println(\"Number Bigger than 1\");\n}\n</code></pre> The code won't even compile. Compiler will return error that we need an <code>;</code> operator (which is used for end of the statement), but even if we would have it there, the code still won't run.</p> </li> <li> <p>Here is same code written in Python:</p> </li> </ul> <pre><code>if (x := 5 ) &gt; 1:\n    print(\"Number\", x, \"is bigger than 1\")\n</code></pre> <pre><code>Number 5 is bigger than 1\n</code></pre> <ul> <li>If we won't use parenthesis Python will evaluate whole statement first as <code>True</code> or <code>False</code> and then write it to the variable:</li> </ul> <pre><code>if x := 5 &gt; 1:\n    print(x, \"is bigger than 1\")\nelse:\n    print(\"Number\", x, \"is not bigger than 1\")\n</code></pre> <pre><code>True is bigger than 1\n</code></pre> <pre><code>if x := 0 &gt; 1:\n    print(x, \"is bigger than 1\")\nelse:\n    print(x, \"is not bigger than 1\")\n</code></pre> <pre><code>False is not bigger than 1\n</code></pre> <ul> <li>Another example with list comprehensions <ul> <li>Program that prints out odd numbers of the list that has values three times bigger than original, and value is lower than 20:</li> </ul> </li> </ul> <pre><code>def f(x):\n    return x + 3\n\nnumbers = [3, 7, 2, 9, 12]\n\nodd_numbers = [result for x in numbers if (result := f(x)) % 2 and result &lt; 20]\n\nprint(odd_numbers)\n</code></pre> <ul> <li>A program that adds cube to every number in the list if cube of this number is less than 20:</li> </ul> <pre><code>def f(x):\n    return x + 3\n\nnumbers = [3, 7, 2, 9, 12]\n\nodd_numbers = [result for x in numbers if (result := f(x)) % 2 and result &lt; 20]\n\nprint(odd_numbers)\n</code></pre> <pre><code>- A program that adds cube to every number in the list if cube of this number is less than 20:\n</code></pre> <pre><code>def cube(x):\n    return x**3\n\nnumbers = [1, 2, 3, 4, 5]\n\nless20_cubes = [result for val in numbers if (result := cube(val)) &lt; 20]\nprint(less20_cubes)\n</code></pre>"},{"location":"Python-Notes/old/python-course/md/objects/","title":"Objects","text":"<pre><code>print(\"Under Construction\")\n</code></pre> <pre><code>Under Construction\n</code></pre>"},{"location":"Python-Notes/old/python-course/md/t01_strings/","title":"Strings","text":"<p>Strings are created by putting a sequence of characters in quotes. Strings can be surrounded with:</p> <ul> <li>single quotes: <code>'python'</code></li> <li>double quotes: <code>\"python\"</code></li> <li>triple single/double quotes: <code>'''python'''</code> or <code>\"\"\"python\"\"\"</code></li> </ul>"},{"location":"Python-Notes/old/python-course/md/t01_strings/#examples","title":"Examples:","text":"<pre><code>txt_1 = \"python\"\ntxt_2 = 'is'\ntxt_3 = \"\"\"really\"\"\"\ntxt_4 = '''cool'''\n\nprint(txt_1)\nprint(txt_2)\nprint(txt_3)\nprint(txt_4)\n</code></pre> <pre><code>python\nis\nreally\ncool\n</code></pre> <ul> <li>Python does not allow mixed syntax for strings, so something like this won't work:     <pre><code>txt_5 = \"no go'\n</code></pre></li> <li>Strings are immutable - once defined they cannot be changed</li> </ul>"},{"location":"Python-Notes/old/python-course/md/t02_python_internals/","title":"Python Internals","text":""},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#basic-informations","title":"Basic Informations","text":"<ul> <li>Python code is translated into intermediate code, which has to be executed by a virtual machine, known as the PVM, the Python Virtual Machine. </li> <li>This is a similar approach to the one taken by Java. </li> <li>There is even a way of translating Python programs into Java byte code for the Java Virtual Machine (JVM) - this can be achieved with Jython.</li> <li>Python takes necessary steps for compiling automatically, but it can be done manually by:</li> </ul> <p>a) <code>py_compile</code> module: </p> <pre><code>import py_compile \nimport os\nimport shutil\n\n\n# Set path to files\ndir_path = './compile_example/'\nif not os.path.exists(dir_path):\n    os.mkdir(dir_path)\n\n# Create a file called \"test.py\"\nwith open(dir_path + 'test.py', 'w'): pass\n\n# Compile the file\npy_compile.compile('./compile_example/test.py')\n\n# Create list of files in the directory\ndirs = os.listdir(dir_path)\nprint(dir_path +\":\")\n\n# Print out every file in the directory\nfor file in dirs:\n    print(file) \n# Remove \"test.py\" as it is not longer needed\nos.remove(dir_path + 'test.py')\n\n# Print \"__pycache__\" directory\ndirs = os.listdir(dir_path + '__pycache__/')\nprint(dir_path + '__pycache__/:')\nfor file in dirs:\n    print(file)\n\n# remove \"compile_example\" directory  (if it exists) with all its contents\nif os.path.exists(dir_path):\n    shutil.rmtree(dir_path)\n</code></pre> <pre><code>./compile_example/:\n__pycache__\ntest.py\n./compile_example/__pycache__/:\ntest.cpython-39.pyc\n</code></pre> <p>b) shell prompt: <code>python -m py_compile &lt;file&gt;</code></p> <pre><code>\u276f ls\n\ue606 test_1.py\n\u276f python3 -m py_compile test_1.py\n\u276f ls\n\uf115 __pycache__  \ue606 test_1.py\n\u276f cd __pycache__/\n\u276f ls\n\ue606 test_1.cpython-39.pyc\n</code></pre> <p>c) <code>compileall</code> module for  compiling all Python files in the directory </p> <pre><code>\u276f python3 -m compileall .\nListing '.'...\nCompiling './test_1.py'...\nCompiling './test_2.py'...\n\u276f ls\n\uf115 __pycache__  \ue606 test_1.py  \ue606 test_2.py\n\u276f cd __pycache__/\n\u276f ls\n\ue606 test_1.cpython-39.pyc  \ue606 test_2.cpython-39.pyc\n</code></pre> <ul> <li>Python only creates .pyc files for imported modules.</li> <li>Above options can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.</li> <li>Python will check, if a compiled version with the .pyc suffix exists. This file has to be newer than the file with the .py suffix. <ul> <li>If such a file exists, Python will load the byte code, which will speed up the start up time of the script. If there is no byte code version, Python will create the byte code before it starts the execution of the program. </li> </ul> </li> </ul>"},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#difference-between-compiler-and-interpreter","title":"Difference Between Compiler and Interpreter","text":""},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#compiler","title":"Compiler","text":"<ul> <li>A compiler is a computer program that transforms (translates) source code of a programming language (the source language) into another computer language (the target language). In most cases compilers are used to transform source code into executable program, i.e. they translate code from high-level programming languages into low (or lower) level languages, mostly assembly or machine code.</li> </ul>"},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#interpreter","title":"Interpreter","text":"<ul> <li> <p>In computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program.</p> </li> <li> <p>An interpreter generally uses one of the following strategies for program execution:</p> <ol> <li>Parse the source code and perform its behavior directly;</li> <li>Translate source code into some efficient intermediate representation or object code and immediately execute that;</li> <li>Explicitly execute stored precompiled bytecode made by a compiler and matched with the interpreter Virtual Machine.</li> </ol> </li> </ul>"},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#python-code-style","title":"Python Code Style","text":""},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#expressions","title":"Expressions","text":"<ul> <li> <p>An expression usually refers to a piece of code that can be evaluated to a value.</p> </li> <li> <p>examples:</p> <ul> <li><code>1 + 1</code></li> <li><code>5 &gt; 3</code></li> </ul> </li> </ul>"},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#statements","title":"Statements","text":"<ul> <li> <p>A statement refers to a piece of code that executes a specific instruction or tells the computer to complete a task. </p> </li> <li> <p>examples:</p> <ul> <li><code>if a &gt; 5:</code></li> <li><code>x = 4</code></li> </ul> </li> </ul>"},{"location":"Python-Notes/old/python-course/md/t02_python_internals/#code-blocks","title":"Code Blocks","text":"<ul> <li>A block is a group of statements in a program or script. </li> <li>Usually, it consists of at least one statement and declarations for the block, depending on the programming or scripting language. </li> <li>A language which allows grouping with blocks, is called a block structured language.</li> <li>Generally, blocks can contain blocks as well, so we get a nested block structure. </li> <li>A block in a script or program functions as a means to group statements to be treated as if they were one statement. </li> <li>In many cases, it also serves as a way to limit the lexical scope of variables and functions.</li> </ul> <ul> <li> <p>Different languages have different recipes for code blocks.</p> </li> <li> <p>For example Java uses curly braces to delimit different code blocks.</p> </li> <li> <p>Here is simple Java program that will print out any number bigger than 5 in 0 - 10 (excluding 10) range:</p> </li> </ul> <pre><code>for (int i = 0; i &lt; 10; i++) { // block 1\nif ( i &gt; 5) {                   // block 2\nSystem.out.println(i)\n}                               // block 2 end\n} // block 1 end\n</code></pre> <ul> <li>Spaces in code above (except a type and name of variable - <code>int i</code> - space here is required so java will know when type declaration ends) are used only for readability purposes and Java Virtual Machine ignores them, so code below will work as well:</li> </ul> <pre><code>for(int i=0;i&lt;10;i++){if( i&gt;5){System.out.println(i)}} </code></pre> <ul> <li>Python uses a different and quite unique approach it uses space as delimiters of code blocks and colons for the end of functions, loops and conditional statements.</li> <li>Python uses four spaces as default indentation spaces.</li> <li>However, the number of spaces can be anything; it is up to the user. </li> <li>A minimum of one space is needed to indent a statement.</li> <li> <p>The first line of python code cannot have an indentation</p> </li> <li> <p>As the example here is rewritten mentioned earlier Java code in Python:</p> </li> </ul> <pre><code> # block 1\nfor i in range(10):    \n    # block 2\n    if i &gt; 5:               \n        print(i)\n    # block 2 end\n# block 1 end\n</code></pre> <pre><code>6\n7\n8\n9\n</code></pre>"},{"location":"Python-Notes/old/python-course/md/t03_variables/","title":"Variables","text":"<ul> <li>A variable is a way of referring to a memory location used by a computer program.</li> <li>In many programming languages a variable is a symbolic name for this physical location.</li> <li>This memory location contains values, like numbers, text or more complicated types.</li> <li> <p>We can use this variable to tell the computer to save some data in this location or to retrieve some data from this location.</p> </li> <li> <p>here is a simple example of a variable:</p> </li> </ul> <pre><code>x = 10\n</code></pre> <ul> <li> <p>A variable <code>x</code> is assigned to the value <code>10</code>.</p> </li> <li> <p>In other languages like Java there is possibility to declare variable first and initialize it later:</p> </li> </ul> <pre><code>int i;\ni = 10\n</code></pre> <ul> <li>It's not possible to just declare the variables in Python</li> <li>If there is need for a variable, you should think of a name and start using it as a variable.</li> <li>Not only the value of a variable may change during program execution, but the type as well.</li> <li> <p>You can assign an integer value to a variable, use it as an integer for a while and then assign a string to the same variable</p> </li> <li> <p>The equal \"=\" sign in the assignment shouldn't be seen as \"is equal to\". It should be \"read\" or interpreted as \"is set to\"</p> </li> <li>When Python executes an assignment like \"i = 42\", it evaluates the right side of the assignment and recognizes that it corresponds to the integer number 42.</li> <li>It creates an object of the integer class to save this data - The equal \"=\" sign in the assignment shouldn't be seen as \"is equal to\". It should be \"read\" or interpreted as \"is set to\".</li> </ul>"},{"location":"Python-Notes/old/python-course/md/t03_variables/#dynamic-vs-static-typing","title":"Dynamic vs Static Typing","text":"<p><pre><code>x = 1\nprint(x)\nprint(type(x))\n\nx = x + 0.1\nprint(x)\nprint(type(x))\n\nx = \"it is a string now\"\nprint(x)\nprint(type(x))\n\n\n    1\n    &lt;class 'int'&gt;\n    1.1\n    &lt;class 'float'&gt;\n    it is a string now\n    &lt;class 'str'&gt;\n\n- C++ different approach to declare a variable in C++:\n  - In C++ you have to declare a variable with a type and a name:\n\n\n  ```cpp\n    int i = 1;\n    i = \"text\";\n    // print function:\n    cout &lt;&lt; i;\n  ```\n\n- Assigning `\"text\"` to a variable `x` will will raise an error during the compilation:\n</code></pre> test.cpp:8:9: error: assigning to 'int' from incompatible type 'const char [5]'     i = \"text\";         ^~~~ <pre><code>- Up to Java 10 it worked similarly to C++, but since there is added `var` keyword which allievates (partially) those restrictions:\n\n  ```java\n  var x = 10;\n  var b = \"cat\";\n  ```\n\n- but assigning `x = b` will raise an error:\n\n```console\nTest.java:6: error: incompatible types: String cannot be converted to int\n        x = b; \n            ^\n1 error\n</code></pre></p>"},{"location":"Python-Notes/old/python-course/notebooks/assigment_expressions/","title":"Assigment expressions","text":"<pre><code>if (x := 5 ) &gt; 1:\n    print(\"Number\", x, \"is bigger than 1\")\n</code></pre> <pre>\n<code>Number 5 is bigger than 1\n</code>\n</pre> <ul> <li>If we won't use parenthesis Python will evaluate whole statement first as <code>True</code> or <code>False</code> and then write it to the variable:</li> </ul> <pre><code>if x := 5 &gt; 1:\n    print(x, \"is bigger than 1\")\nelse:\n    print(\"Number\", x, \"is not bigger than 1\")\n</code></pre> <pre>\n<code>True is bigger than 1\n</code>\n</pre> <pre><code>if x := 0 &gt; 1:\n    print(x, \"is bigger than 1\")\nelse:\n    print(x, \"is not bigger than 1\")\n</code></pre> <pre>\n<code>False is not bigger than 1\n</code>\n</pre> <ul> <li>Another example with list comprehensions <ul> <li>Program that prints out odd numbers of the list that has values three times bigger than original, and value is lower than 20:</li> </ul> </li> </ul> <pre><code>def f(x):\n    return x + 3\n\nnumbers = [3, 7, 2, 9, 12]\n\nodd_numbers = [result for x in numbers if (result := f(x)) % 2 and result &lt; 20]\n\nprint(odd_numbers)\n</code></pre> <ul> <li>A program that adds cube to every number in the list if cube of this number is less than 20:</li> </ul> <pre><code>def f(x):\n    return x + 3\n\nnumbers = [3, 7, 2, 9, 12]\n\nodd_numbers = [result for x in numbers if (result := f(x)) % 2 and result &lt; 20]\n\nprint(odd_numbers)\n</code></pre> <pre><code>- A program that adds cube to every number in the list if cube of this number is less than 20:\n</code></pre> <pre><code>def cube(x):\n    return x**3\n\nnumbers = [1, 2, 3, 4, 5]\n\nless20_cubes = [result for val in numbers if (result := cube(val)) &lt; 20]\nprint(less20_cubes)\n</code></pre>"},{"location":"Python-Notes/old/python-course/notebooks/assigment_expressions/#assignment-expressions","title":"Assignment Expressions","text":"<ul> <li>In most of languages assigning variables in the middle of expressions is not allowed.</li> <li>Python allows that with a special operator: <code>:=</code><ul> <li>It is affectionately known as \u201cthe walrus operator\u201d due to its resemblance to the eyes and tusks of a walrus.</li> </ul> </li> </ul> <ul> <li> <p>Here is sample of Java code which uses assignment and expression in single instruction: <pre><code>    if (int x = 5 &gt; 1) { // this will return error\nSystem.out.println(\"Number Bigger than 1\");\n}\n</code></pre> The code won't even compile. Compiler will return error that we need an <code>;</code> operator (which is used for end of the statement), but even if we would have it there, the code still won't run.</p> </li> <li> <p>Here is same code written in Python:</p> </li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/objects/","title":"Objects","text":"<pre><code>print(\"Under Construction\")\n</code></pre> <pre>\n<code>Under Construction\n</code>\n</pre>"},{"location":"Python-Notes/old/python-course/notebooks/t01_strings/","title":"T01 strings","text":"<pre><code>txt_1 = \"python\"\ntxt_2 = 'is'\ntxt_3 = \"\"\"really\"\"\"\ntxt_4 = '''cool'''\n\nprint(txt_1)\nprint(txt_2)\nprint(txt_3)\nprint(txt_4)\n</code></pre> <pre>\n<code>python\nis\nreally\ncool\n</code>\n</pre> <ul> <li>Python does not allow mixed syntax for strings, so something like this won't work:     <pre><code>txt_5 = \"no go'\n</code></pre></li> <li>Strings are immutable - once defined they cannot be changed</li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t01_strings/#strings","title":"Strings","text":"<p>Strings are created by putting a sequence of characters in quotes. Strings can be surrounded with:</p> <ul> <li>single quotes: <code>'python'</code></li> <li>double quotes: <code>\"python\"</code></li> <li>triple single/double quotes: <code>'''python'''</code> or <code>\"\"\"python\"\"\"</code></li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t01_strings/#examples","title":"Examples:","text":""},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/","title":"T02 python internals","text":"<pre><code>import py_compile \nimport os\nimport shutil\n\n\n# Set path to files\ndir_path = './compile_example/'\nif not os.path.exists(dir_path):\n    os.mkdir(dir_path)\n\n# Create a file called \"test.py\"\nwith open(dir_path + 'test.py', 'w'): pass\n\n# Compile the file\npy_compile.compile('./compile_example/test.py')\n\n# Create list of files in the directory\ndirs = os.listdir(dir_path)\nprint(dir_path +\":\")\n\n# Print out every file in the directory\nfor file in dirs:\n    print(file) \n# Remove \"test.py\" as it is not longer needed\nos.remove(dir_path + 'test.py')\n\n# Print \"__pycache__\" directory\ndirs = os.listdir(dir_path + '__pycache__/')\nprint(dir_path + '__pycache__/:')\nfor file in dirs:\n    print(file)\n\n# remove \"compile_example\" directory  (if it exists) with all its contents\nif os.path.exists(dir_path):\n    shutil.rmtree(dir_path)\n</code></pre> <pre>\n<code>./compile_example/:\n__pycache__\ntest.py\n./compile_example/__pycache__/:\ntest.cpython-39.pyc\n</code>\n</pre> <p>b) shell prompt: <code>python -m py_compile &lt;file&gt;</code></p> <pre><code>\u276f ls\n\ue606 test_1.py\n\u276f python3 -m py_compile test_1.py\n\u276f ls\n\uf115 __pycache__  \ue606 test_1.py\n\u276f cd __pycache__/\n\u276f ls\n\ue606 test_1.cpython-39.pyc\n</code></pre> <p>c) <code>compileall</code> module for  compiling all Python files in the directory </p> <pre><code>\u276f python3 -m compileall .\nListing '.'...\nCompiling './test_1.py'...\nCompiling './test_2.py'...\n\u276f ls\n\uf115 __pycache__  \ue606 test_1.py  \ue606 test_2.py\n\u276f cd __pycache__/\n\u276f ls\n\ue606 test_1.cpython-39.pyc  \ue606 test_2.cpython-39.pyc\n</code></pre> <ul> <li>Python only creates .pyc files for imported modules.</li> <li>Above options can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.</li> <li>Python will check, if a compiled version with the .pyc suffix exists. This file has to be newer than the file with the .py suffix. <ul> <li>If such a file exists, Python will load the byte code, which will speed up the start up time of the script. If there is no byte code version, Python will create the byte code before it starts the execution of the program. </li> </ul> </li> </ul> <ul> <li>As the example here is rewritten mentioned earlier Java code in Python:</li> </ul> <pre><code> # block 1\nfor i in range(10):    \n    # block 2\n    if i &gt; 5:               \n        print(i)\n    # block 2 end\n# block 1 end\n</code></pre> <pre>\n<code>6\n7\n8\n9\n</code>\n</pre>"},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#python-internals","title":"Python Internals","text":""},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#basic-informations","title":"Basic Informations","text":"<ul> <li>Python code is translated into intermediate code, which has to be executed by a virtual machine, known as the PVM, the Python Virtual Machine. </li> <li>This is a similar approach to the one taken by Java. </li> <li>There is even a way of translating Python programs into Java byte code for the Java Virtual Machine (JVM) - this can be achieved with Jython.</li> <li>Python takes necessary steps for compiling automatically, but it can be done manually by:</li> </ul> <p>a) <code>py_compile</code> module: </p>"},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#difference-between-compiler-and-interpreter","title":"Difference Between Compiler and Interpreter","text":""},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#compiler","title":"Compiler","text":"<ul> <li>A compiler is a computer program that transforms (translates) source code of a programming language (the source language) into another computer language (the target language). In most cases compilers are used to transform source code into executable program, i.e. they translate code from high-level programming languages into low (or lower) level languages, mostly assembly or machine code.</li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#interpreter","title":"Interpreter","text":"<ul> <li> <p>In computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program.</p> </li> <li> <p>An interpreter generally uses one of the following strategies for program execution:</p> <ol> <li>Parse the source code and perform its behavior directly;</li> <li>Translate source code into some efficient intermediate representation or object code and immediately execute that;</li> <li>Explicitly execute stored precompiled bytecode made by a compiler and matched with the interpreter Virtual Machine.</li> </ol> </li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#python-code-style","title":"Python Code Style","text":""},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#expressions","title":"Expressions","text":"<ul> <li> <p>An expression usually refers to a piece of code that can be evaluated to a value.</p> </li> <li> <p>examples:</p> <ul> <li><code>1 + 1</code></li> <li><code>5 &gt; 3</code></li> </ul> </li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#statements","title":"Statements","text":"<ul> <li> <p>A statement refers to a piece of code that executes a specific instruction or tells the computer to complete a task. </p> </li> <li> <p>examples:</p> <ul> <li><code>if a &gt; 5:</code></li> <li><code>x = 4</code></li> </ul> </li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t02_python_internals/#code-blocks","title":"Code Blocks","text":"<ul> <li>A block is a group of statements in a program or script. </li> <li>Usually, it consists of at least one statement and declarations for the block, depending on the programming or scripting language. </li> <li>A language which allows grouping with blocks, is called a block structured language.</li> <li>Generally, blocks can contain blocks as well, so we get a nested block structure. </li> <li>A block in a script or program functions as a means to group statements to be treated as if they were one statement. </li> <li>In many cases, it also serves as a way to limit the lexical scope of variables and functions.</li> </ul> <ul> <li> <p>Different languages have different recipes for code blocks.</p> </li> <li> <p>For example Java uses curly braces to delimit different code blocks.</p> </li> <li> <p>Here is simple Java program that will print out any number bigger than 5 in 0 - 10 (excluding 10) range:</p> </li> </ul> <pre><code>for (int i = 0; i &lt; 10; i++) { // block 1\nif ( i &gt; 5) {                   // block 2\nSystem.out.println(i)\n}                               // block 2 end\n} // block 1 end\n</code></pre> <ul> <li>Spaces in code above (except a type and name of variable - <code>int i</code> - space here is required so java will know when type declaration ends) are used only for readability purposes and Java Virtual Machine ignores them, so code below will work as well:</li> </ul> <pre><code>for(int i=0;i&lt;10;i++){if( i&gt;5){System.out.println(i)}} </code></pre> <ul> <li>Python uses a different and quite unique approach it uses space as delimiters of code blocks and colons for the end of functions, loops and conditional statements.</li> <li>Python uses four spaces as default indentation spaces.</li> <li>However, the number of spaces can be anything; it is up to the user. </li> <li>A minimum of one space is needed to indent a statement.</li> <li>The first line of python code cannot have an indentation</li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t03_variables/","title":"T03 variables","text":"<ul> <li>The equal \"=\" sign in the assignment shouldn't be seen as \"is equal to\". It should be \"read\" or interpreted as \"is set to\"</li> <li>When Python executes an assignment like \"i = 42\", it evaluates the right side of the assignment and recognizes that it corresponds to the integer number 42. </li> <li>It creates an object of the integer class to save this data - The equal \"=\" sign in the assignment shouldn't be seen as \"is equal to\". It should be \"read\" or interpreted as \"is set to\"</li> <li>In Python it is not possible to declare the variable without initializatizing it with a value. </li> <li> <ul> <li>If there is need for a variable, you should think of a name and start using it as a variable.</li> </ul> </li> </ul> <ul> <li>In other languages like Java there is possibility to declare variable first and initialize it later:</li> </ul> <pre><code>int i;\ni = 10\n</code></pre> <ul> <li>Dynamically-typed languages perform type checking at runtime, while statically typed languages perform type checking at compile time.</li> <li>This means that scripts written in dynamically-typed languages (like Groovy or Python) can compile or be run via interpreter even if they contain errors that will prevent the script from running properly (if at all).</li> <li>If a script written in a statically-typed language (such as Java or C++) contains errors, it will fail to compile until the errors have been fixed.</li> <li>For example if we run following program with all lines uncommented, it will calcute new <code>num</code> value, print it out and after that raise an error complaining about the fact that we can't use division for integer and string:</li> </ul> <pre><code>num = 1\nword = \"dog\"\nnum = num + len(word)\n# print(num)\n# print(num/word) # can't divide int by string\n</code></pre> <ul> <li>Functionally the same code in Java  won't compile:</li> </ul> <pre><code>var num = 1;\nvar word = \"dog\";\nnum = num + word.length();\nSystem.out.println(num);\nSystem.out.println(num/word)\n</code></pre> <pre><code>\u276f javac Test.java\nTest.java:14: error: bad operand types for binary operator '/'\n        System.out.println(num/word);\n                              ^\n  first type:  int\n  second type: String\n1 error\n</code></pre> <ul> <li>Statically-typed languages (Java, C++) require you to declare the data types of your variables before you use them, while dynamically-typed languages do not.</li> <li>In statically-typed languages you can declare variable first and initialize it later.</li> </ul> C++ <pre><code>int i; // declaration of the variable\ni = 0; // initialization of the variable\n\nnt i; // declaration of the variable\ni = 0; // initialization of the variable\n\nint j = 1; // declaration and initialization\n</code></pre> Java <pre><code>int i; // declaration of the variable\ni = 0; // initialization of the variable\n\nint j = 1; // declaration and initialization\n\n// Since Java 10\n// var keyword has to be initialized with a value \nvar x = \"dog\" // x becomes String\nvar y = 10 // y becomes an int\n// y = x // doesn't work, still static typing\n\nint j = 1; // declaration and initialization\n</code></pre> Java <pre><code>int i; // declaration of the variable\ni = 0; // initialization of the variable\n\nint j = 1; // declaration and initialization\n\n// Since Java 10\n// var keyword has to be initialized with a value \nvar x = \"dog\" // x becomes String\nvar y = 10 // y becomes an int\n// y = x // doesn't work, still static typing\n</code></pre> <p>In Python it is not possible to just declare the variables, we always have to assign value to it:</p> <pre><code># x # it will raise an error: NameError: name 'x' is not defined\nx = 10 # fine\n</code></pre> <ul> <li>In Python (and rest of dynamically typed languages) not only the value of a variable may change during program execution, but the type as well.</li> <li>You can assign an integer value to a variable, use it as an integer for a while and then assign a string to the same variable</li> </ul> <pre><code>x = 1\nprint(x)\nprint(type(x))\n\nx = x + 0.1\nprint(x)\nprint(type(x))\n\nx = \"it is a string now\"\nprint(x)\nprint(type(x))\n</code></pre> <pre>\n<code>1\n&lt;class 'int'&gt;\n1.1\n&lt;class 'float'&gt;\nit is a string now\n&lt;class 'str'&gt;\n</code>\n</pre> <ul> <li>We can make more than reference point to the same object and check it with <code>id()</code> function (every instance (object or variable) has an identity, i.e., an integer which is unique within the script or program, i.e., other objects have different identities. )</li> </ul> <pre><code>x = 10\nprint(\"x\")\nprint(\"id(x)\", id(x))\n\ny = x\nprint(\"y = x\")\nprint(\"id(x)\", id(x))\nprint(\"id(y)\", id(y))\n\ny = 5\nprint(\"y = 5\")\nprint(\"id(x)\", id(x))\n</code></pre> <pre>\n<code>x\nid(x) 4401379920\ny = x\nid(x) 4401379920\nid(y) 4401379920\ny = 5\nid(x) 4401379920\n</code>\n</pre>"},{"location":"Python-Notes/old/python-course/notebooks/t03_variables/#variables","title":"Variables","text":""},{"location":"Python-Notes/old/python-course/notebooks/t03_variables/#basics","title":"Basics","text":"<ul> <li>A variable is a way of referring to a memory location used by a computer program.</li> <li>In many programming languages a variable is a symbolic name for this physical location.</li> <li>This memory location contains values, like numbers, text or more complicated types. </li> <li>We can use this variable to tell the computer to save some data in this location or to retrieve some data from this location.</li> <li>here is a simple example of a variable:</li> </ul> <pre><code>x = 10\n</code></pre> <ul> <li>A variable <code>x</code> is assigned to the value <code>10</code>.</li> </ul>"},{"location":"Python-Notes/old/python-course/notebooks/t03_variables/#dynamic-vs-static-typing","title":"Dynamic vs Static Typing","text":""},{"location":"Python-Notes/old/python-course/notebooks/t03_variables/#references","title":"References","text":"<ul> <li>Python variables are references to objects, but the actual data is contained in the objects</li> <li>Variables don't have types associated with them, because they are pointing to objects and objects can be of arbitrary data types.</li> <li>For example the graphical representation of following code is shown below: <pre><code>x = 10\n</code></pre></li> </ul>"},{"location":"Python-Notes/old/python-notes/","title":"Python","text":"<p>blog/m01</p>"},{"location":"Python-Notes/old/python-notes/lambda/","title":"Lambda","text":"<pre><code>(lambda x: x)(1)\n</code></pre> <pre>\n<code>1</code>\n</pre> <p>The parentheses around the lambda function are necessary because they ensure that the lambda function is evaluated first, before the argument 1 is passed to it. </p> <pre><code>(lambda x: x) (1)\n</code></pre> <pre>\n<code>1</code>\n</pre> <ul> <li>Add 1 to an argument</li> </ul> <pre><code>(lambda x: x + 1)(1)\n</code></pre> <pre>\n<code>2</code>\n</pre> <ul> <li>higher order functions (which take one or more functions as arguments or return one or more functions)</li> <li><code>new order</code> is function that maps (x, function) -&gt; x + function(x)</li> </ul> <pre><code>new_order = lambda x, func: x + func(x)\nnew_order(2, lambda x: x * x)\n</code></pre> <pre>\n<code>6</code>\n</pre>"},{"location":"Python-Notes/old/python-notes/lambda/#lambda-operators","title":"Lambda operators","text":""},{"location":"Python-Notes/old/python-notes/lambda/#syntax","title":"Syntax","text":"<p>lambda arguments: expressions</p>"},{"location":"Python-Notes/old/python-notes/lambda/#example","title":"Example","text":"<ul> <li>Identity function</li> </ul> <p>\\(f: X \\mapsto X \\quad \\forall X \\in M\\)</p>"},{"location":"Python-Notes/old/python-notes/m01/","title":"M01","text":""},{"location":"Python-Notes/old/python-notes/m01/#test","title":"Test","text":""},{"location":"Python-Notes/old/python-notes/m01/#example","title":"Example","text":"<p>This is just an example, move along.</p>"},{"location":"Web/CSS/FCC/Notes/note/","title":"Note","text":""},{"location":"Web/CSS/FCC/Notes/note/#fonts","title":"Fonts","text":"<p>There are several default fonts that are available in all browsers. These generic font families include monospace, serif and sans-serif</p> <p>When one font isn't available, you can tell the browser to \"degrade\" to another font.</p> <p>For example, if you wanted an element to use the Helvetica font, but degrade to the sans-serif font when Helvetica isn't available, you will specify it as follows: <pre><code>p {\n  font-family: Helvetica, sans-serif;\n}\n</code></pre></p> <p>CSS has a property called width that controls an element's width. Just like with fonts, we'll use px (pixels)  to specify the image's width.</p> <p>For example, if we wanted to create a CSS class called larger-image that gave HTML elements a width of 500 pixels,  we'd use: <pre><code>&lt;style&gt;\n  .larger-image {\n    width: 500px;\n  }\n&lt;/style&gt;\n</code></pre></p>"},{"location":"Web/CSS/FCC/Notes/note/#add-borders-around-your-elements","title":"Add Borders Around Your Elements","text":"<p>CSS borders have properties like style, color and width.</p> <p>For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class: <pre><code>&lt;style&gt;\n  .thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n  }\n&lt;/style&gt;\n</code></pre></p>"},{"location":"Web/CSS/FCC/Notes/note/#basic-css-add-rounded-corners-with-border-radius","title":"Basic CSS: Add Rounded Corners with border-radius","text":"<p>Your cat photo currently has sharp corners.  We can round out those corners with a CSS property called <code>border-radius</code>. In addition to pixels, you can also specify the `border-radius using a percentage.</p>"},{"location":"Web/CSS/FCC/Notes/note/#give-a-background-color-to-a-div-element","title":"Give a Background Color to a div Element","text":"<p>You can set an element's background color with the background-color property.</p> <p>For example, if you wanted an element's background color to be green, you'd put this within your style element: <pre><code>.green-background {\n  background-color: green;\n}\n</code></pre></p>"},{"location":"Web/CSS/FCC/Notes/note/#basic-css-set-the-id-of-an-element","title":"Basic CSS: Set the <code>id</code> of an Element","text":"<p>In addition to classes, each HTML element can also have an <code>id</code> attribute.</p> <p>There are several benefits to using <code>id</code> attributes: You can use an <code>id</code> to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.</p> <p><code>id</code> attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same <code>id</code> attribute.</p> <p>Here's an example of how you give your h2 element the <code>id</code> of cat-photo-app:</p> <p><pre><code>&lt;h2 id=\"cat-photo-app\"&gt;\n</code></pre> One cool thing about id attributes is that, like classes, you can style them using CSS.</p> <p>However, an id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied.</p> <p>Here's an example of how you can take your element with the id attribute of cat-photo-element and give it the background color of green. In your style element: <pre><code>#cat-photo-element {\n  background-color: green;\n}\n</code></pre></p>"},{"location":"Web/CSS/FCC/Notes/note/#padding","title":"Padding","text":"<p>You may have already noticed this, but all HTML elements are essentially little rectangles.</p> <p>Three important properties control the space that surrounds each HTML element:  <code>padding</code>, <code>margin</code>, and <code>border</code>.</p> <ul> <li>An element's padding controls the amount of space between the element's content and its border.</li> <li>An element's margin controls the amount of space between an element's border and  surrounding elements.</li> <li>If you set an element's margin to a negative value, the element will grow larger.</li> <li>Sometimes you will want to customize an element so that it has different amounts of padding on each of its sides. CSS allows you to control the padding of all four individual sides of an element with the  <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties.</li> <li>Instead of specifying an element's padding-top, padding-right, padding-bottom, and padding-left  properties individually, you can specify them all in one line, like this: <code>padding: 10px 20px 10px 20px;</code></li> </ul> <p>These four values work like a clock: top, right, bottom, left, and will produce the  exact same result as using the side-specific padding instructions.</p>"},{"location":"Web/CSS/FCC/Notes/note/#margin","title":"Margin","text":"<p>CSS allows you to control the margin of all four individual sides of an element with the  <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties.</p>"},{"location":"Web/CSS/FCC/Notes/note/#attribute-selectors","title":"Attribute selectors","text":"<ul> <li><code>[attr=value]</code>  This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute type and a corresponding value of radio:</li> </ul> <pre><code>[type='radio'] {\n  margin: 20px 0px 20px 0px;\n}\n</code></pre>"},{"location":"Web/CSS/m02_cascading_inheritance/sources/","title":"Cascade and inheritance sources","text":"<ul> <li>General: https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance</li> <li>Inheritance: https://medium.com/@elad/understanding-the-initial-inherit-and-unset-css-keywords-2d70b7121695</li> <li>Specificity rules: https://stuffandnonsense.co.uk/archives/css_specificity_wars.html</li> </ul>"},{"location":"Web/CSS/m02_cascading_inheritance/exercises/ex_cascading_inheritance/","title":"Cascading and inheritance exercises","text":""},{"location":"Web/CSS/m02_cascading_inheritance/exercises/ex_cascading_inheritance/#exercise-1","title":"Exercise 1","text":"<p>Edit  files from directory <code>ex_1</code>  without changing color values so page will look like this:</p> <p></p>"},{"location":"Web/CSS/m02_cascading_inheritance/exercises/ex_cascading_inheritance/#exercise-2","title":"Exercise 2","text":"<p>Write CSS and HTML so browser will display: </p>"},{"location":"Web/CSS/m02_cascading_inheritance/exercises/ex_cascading_inheritance/#exercise-3","title":"Exercise 3","text":"<p>Write specificity values and tell why  things looks like they look like</p>"},{"location":"Web/CSS/m02_cascading_inheritance/exercises/ex_cascading_inheritance/#exerise-4","title":"Exerise 4","text":"<p>Write CSS and HTML using color value only in one selector to achieve this result:</p> <p></p>"},{"location":"Web/CSS/m03_selectors/selectors/","title":"Selectors","text":"<p>Where to look for selector specifcations: https://www.w3.org/TR/selectors-3/</p>"},{"location":"Web/CSS/m03_selectors/selectors/#1-selector-lists","title":"1. Selector lists","text":"<p><pre><code>  h1, .monospace-text {\n            font-family: monospace;\n        }\n</code></pre> They are used for combining selectors. If you make mistake in any of them - nothing will work (rule will be ignored).</p>"},{"location":"Web/CSS/m03_selectors/selectors/#2-types-of-selectors","title":"2. Types of selectors:","text":"<ul> <li>Universal selector:  <pre><code>* {\n    stuff...\n    margin: 0\n}\n</code></pre> They are often used to make other stuff easier to read: Element of possible confusion: </li> </ul> <pre><code>article :first-child (first element of an article)\narticle:first-child (article that is first child of any element)\n</code></pre> <p>It could look nicer with '*' <pre><code>    article *:first-child {...}\n</code></pre></p> <ul> <li>Class selectors: <pre><code>.red-color {\n            color: red;\n        }\n</code></pre></li> <li>class selector on element  ```  / It will target div with blue-color class / div.blue-color {             color: blue;         }  <pre><code>* selector for matching more than one class:\n</code></pre> .info {         color: blue; }</li> </ul> <p>/ it matches two classes: info and warning / .info.warning {     color: orange; }  <pre><code>* ID selectors\nThey should be uniqe, im most cases we do not use them, because of high specificity (0100)\n</code></pre></p>"},{"location":"Web/CSS/m03_selectors/selectors/#first","title":"first {","text":"<pre><code>background-color: violet;\n</code></pre> <p>} / This will work if and only if element h1 has class heading / h1#heading {     background-color: orange; }  ```</p>"},{"location":"Web/CSS/m03_selectors/selectors/#2-attribute-selectors","title":"2. Attribute selectors:","text":""},{"location":"Web/CSS/m03_selectors/selectors/#existential-selectors","title":"\"Existential\" selectors:","text":"<ul> <li><code>element[attribute]</code>- element has an exact attribute<ul> <li><code>li[class]</code>  matches list item with any class</li> </ul> </li> <li><code>element[attribute=value]</code> - matches with exact value<ul> <li><code>li[class=\"x\"]</code></li> </ul> </li> <li><code>element[attribute~=val]</code> - matches attribute that has <code>val</code>  somewhere  in space separated list<ul> <li><code>h1[class~=\"external\"] { color: red; }   matches:   &lt;h1 class=\"friend external sandwich\"&gt;Attribute Space Separated&lt;/h1&gt;</code></li> </ul> </li> <li> <p><code>[attr|=value</code>] - This will select if the start of a   dash-separated list of attribute values matches the selector.</p> <ul> <li>Example: ```     h1[class|=\"friend\"] { color: red; }    matches:   Attribute Dash Separated</li> </ul> <p>```</p> </li> </ul> <p><code>* `[attr$=value]` - Attribute Ends with Certain Value     * Example: <pre><code>h1[class$=\"external\"] { color: red; }\nmatches:\n&lt;h1 class=\"friend external\"&gt;Attribute Ends&lt;/h1&gt;\n</code></pre> * `` - Matches elements with an attr attribute whose  value contains value anywhere within the string.     * Example:</code>   h1[class*=\"external\"] { color: red; }  Attribute Contains</p> <pre><code>```\n</code></pre>"},{"location":"Web/CSS/m03_selectors/selectors/#substring-matching-selectors","title":"Substring matching selectors","text":"<ul> <li><code>[attr^=value]</code> - attribute begins with value</li> <li>Example:  ```   h1[class^=\"external\"] { color: red; }   matches:  Attribute Begins</li> </ul>"},{"location":"Web/CSS/m03_selectors/selectors/#to-make-selectors-case-insensitive","title":"To make selectors case-insensitive:","text":"<pre><code>li[class^=\"a\" i] {\n    color: red;\n}\n</code></pre>"},{"location":"blog/2023-02-12/","title":"2023 02 12","text":""},{"location":"blog/2023-02-12/#journal","title":"journal","text":"<p>This is test page</p>"},{"location":"blog/m01/","title":"Module 01","text":""},{"location":"blog/m01/#differences-between-compilers-and-interpeters","title":"Differences Between Compilers and Interpeters","text":""},{"location":"blog/m01/#compiler","title":"Compiler","text":"<ul> <li>A compiler is a computer program that transforms (translates) source code of a programming language (the source language) into another computer language (the target language). </li> <li>In most cases compilers are used to transform source code into executable program, i.e. they translate code from high-level programming languages into low (or lower) level languages, mostly assembly or machine code.</li> </ul>"},{"location":"blog/m01/#interpeter","title":"Interpeter","text":"<ul> <li>An interpreter is a computer program that executes instructions written in a programming language.</li> <li>It can either execute the source code directly or translate the source code in a first step into a more efficient representation and execute this code.</li> </ul>"},{"location":"blog/m01/#differences-in-variable-references-between-python-and-java","title":"Differences in variable references between Python and Java","text":"<pre><code>x  = 1\ny = x\n\nx = x + 1\nprint(y)\n</code></pre> <pre><code>|   x  = 1\n\n';' expected\n\n\n\n|   y = x\n\n';' expected\n\n\n\n|   x = x + 1\n\n';' expected\n\n\n\n|   x  = 1\n\ncannot find symbol\n\n  symbol:   variable x\n\n\n\n|   y = x\n\ncannot find symbol\n\n  symbol:   variable y\n\n\n\n|   y = x\n\ncannot find symbol\n\n  symbol:   variable x\n\n\n\n|   x = x + 1\n\ncannot find symbol\n\n  symbol:   variable x\n\n\n\n|   x = x + 1\n\ncannot find symbol\n\n  symbol:   variable x\n\n\n\n|   print(y)\n\ncannot find symbol\n\n  symbol:   variable y\n</code></pre> <p>In java</p> <pre><code>int i = 1;\ni++;\nSystem.out.println(i);\n</code></pre> <pre><code>2\n2\n</code></pre>"},{"location":"java-notes/md_java/imperative_vs_functional_language/","title":"Difference betwenn functional and imperative programming languages","text":"<p>Definition: An imperative language uses a sequence of statements to determine how to reach a certain goal. These statements are said to change the state of the program as each one is executed in turn.</p> <p>Examples: Java is an imperative language. For example, a program can be created to add a series of numbers:</p> <pre><code> int total = 0;\n int number1 = 5;\n int number2 = 10;\n int number3 = 15;\n total = number1 + number2 + number3; \n</code></pre> <p>Each statement changes the state of the program, from assigning values to each variable to the final addition of those values. Using a sequence of five statements the program is explicitly told how to add the numbers 5, 10 and 15 together.</p> <p>Functional languages: The functional programming paradigm was explicitly created to support a pure functional approach to problem solving. Functional programming is a form of declarative programming.</p> <p>Advantages of Pure Functions: The primary reason to implement functional transformations as pure functions is that pure functions are composable: that is, self-contained and stateless. These characteristics bring a number of benefits, including the following: Increased readability and maintainability. This is because each function is designed to accomplish a specific task given its arguments. The function does not rely on any external state.</p> <p>Easier reiterative development. Because the code is easier to refactor, changes to design are often easier to implement. For example, suppose you write a complicated transformation, and then realize that some code is repeated several times in the transformation. If you refactor through a pure method, you can call your pure method at will without worrying about side effects.</p> <p>Easier testing and debugging. Because pure functions can more easily be tested in isolation, you can write test code that calls the pure function with typical values, valid edge cases, and invalid edge cases.</p> <p>For OOP People or Imperative languages:</p> <p>Object-oriented languages are good when you have a fixed set of operations on things and as your code evolves, you primarily add new things. This can be accomplished by adding new classes which implement existing methods and the existing classes are left alone.</p> <p>Functional languages are good when you have a fixed set of things and as your code evolves, you primarily add new operations on existing things. This can be accomplished by adding new functions which compute with existing data types and the existing functions are left alone.</p> <p>Cons:</p> <p>It depends on the user requirements to choose the way of programming, so there is harm only when users don\u2019t choose the proper way.</p> <p>When evolution goes the wrong way, you have problems:</p> <ul> <li>Adding a new operation to an object-oriented program may require editing many class definitions to add a new method</li> <li>Adding a new kind of thing to a functional program may require editing many function definitions to add a new case</li> </ul> <p>source: stackoverflow</p>"},{"location":"java-notes/md_java/old_intro/","title":"Old intro","text":"<p>Next step of evolution were imperative languages which are the sequences of statements designed to reach a certain goal, for example C language. They provided abstraction for an assembly language however they were so so specific that you weren't able to leave the realm of thinking in terms of the computer structure to focus on the problem itself. The product of that effort is the code that is hard to read and understand.</p> <p>Imperative Programming</p> <p>imperative programming is a programming paradigm that uses statements \"Statement (computer science)\") that change a program's state \"State (computer science)\"). You might want to read imperative vs functional language</p> <p>Alternatively to computer-like models there are languages with the focus on problems you're trying to solve - Prolog for example - it uses chains of relations which can be checked by queries. They have one caveat though which is that if you step out the domain of the problems those languages are designed for, you will end up with pretty unwieldy code - for example Prolog's non-deterministic (definition: even for the same input algorithm, can exhibit different behaviors on different runs) evaluation strategy is problematic for deterministic computations.</p> <p>Deterministic Computation</p> <p>A deterministic model of computation, for example a deterministic Turing machine , is a model of computation such that the successive states of the machine and the operations to be performed are completely determined by the preceding state.</p> <p>Non-deterministic Algorithm</p> <p>a nondeterministic algorithm is an algorithm that, even for the same input, can exhibit different behaviors on different runs, as opposed to a [deterministic algorithm](https://en.wikipedia.org/wiki/Deterministic_algorithm \"Deterministic algorithm\".</p> <p>The Object-Oriented Programming paradigm tries to overcome this issue by providing general tools for working with the problems, so instead thinking about the language you can focus on the work you're trying to do (to some extent).</p> <p>Fundamental part of being able to grasp general concepts is the process of creating abstractions, in OOP we use abstract data types which are called classes. If you had the luck of learning about Aristotle, you can think about classes a bit like in his concept used for the classification of living things - for example: the abstract class of live bearing tetrapods can be represented by specific object like someone's cat named Oreo.</p> <p>In OOP we create new definitions for the reality we are trying to map, and the new ways to represent data - we call them data types.</p> <p>So, to be specific with definitions: a class is description for object's characteristics (data) and functionalities (behavior) which becomes interface of the communication.</p> <p>If you're interested of what is a true OOP approach, we could look at what Alan Kay said about Small Talk (first influential OOP language):</p>"},{"location":"java-notes/md_java/old_intro/#alan-kay-definition-of-oop-by-small-talk","title":"Alan Kay definition of OOP by Small Talk","text":"<ol> <li>Everything is an object. It works like special variable that stores data and you give request    to achieve desired effect and change its state - like you press button to get soda from a vending    machine, but you can map virtually anything to object representation.</li> <li>Objects can communicate by sending and receiving messages - working program is like multiple    ports (objects) that send each other ships (data) through river streams (it could be inside    program or in the network)</li> <li>Each object has its ow memory which consists of other objects. You can picture it as some    kind of bento meal - the whole dish consists of many sub    parts, but you take one package, so you just eat whole thing and don't think about complexity    inside when you don't have to.</li> <li>Each object is an instance of a class. Class is representing general grouping like for example \\(1    \\in \\mathbb{N}\\) 1 is an instance (object) of an \\(\\mathbb{N}\\) set.</li> <li>The class is the repository for behavior associated with an object. It means that all objects    of the same class can perform the same action. For example mouse button and keyboard key are    Buttons, so they both have Key Pressed functionality.</li> </ol>"},{"location":"java-notes/md_java/old_intro/#interface-of-the-object","title":"Interface of the Object","text":"<p>In real world many objects are of the same kind movies, games etc. A class (which is often called a type - a pet Captain Meows is a type of Cat) is an abstract data type for object: a blueprint</p> <ul> <li>it describes functionalities by what kind of behaviors are possible so we can modify object   characteristics - an interface. If we have specified class we can create as many objects as we can   and the only constraints are resources of the computer.</li> </ul> <pre><code>classDiagram \nclass Duck\nDuck : -beakSize \nDuck : -legHeight \nDuck : +walk(distance) \nDuck : +quack(loudness)</code></pre> <pre><code>Duck d1=new Duck();\nd1.quack(\"loudly\")\n</code></pre> <p><code>Duck</code> has 2 functionalities in its interface: it can walk and quack (this is what ducks mostly do). The interface describes what you can request from specific object, you send it (<code>d1.quack()</code>) and object performs action based upon it (specific duck performs its quacking code). Also a small but important bit of terminology:</p> <ul> <li><code>d1</code> is a reference for the <code>Duck</code>object.</li> <li>processing data in object is done via methods (<code>walk(distance)</code> is a method) and method is an   object-oriented fuction</li> </ul> <p>fuction vs method</p> <p>A function is a piece of code that is called by name. It can be passed data to operate on (i.e. the parameters) and can optionally return data (the return value). All data that is passed to a function is explicitly passed. A method is a piece of code that is called by a name that is associated with an object. In most respects it is identical to a function except for two key differences:</p> <ol> <li>A method is implicitly passed the object on which it was called</li> <li>A method is able to operate on data that is contained within the class (remembering that an    object is an instance of a class - the class is the definition, the object is an instance of that    data).</li> </ol> <p>To send a message you choose the object reference (<code>d1</code>) place dot after it and write method name.</p>"},{"location":"java-notes/md_java/old_intro/#objects-as-service-providers","title":"Objects As Service Providers","text":"<p>When you are designing on working with Object-Oriented Program you can look at objects as service providers. In that way you are creating, importing (or pasting form stackoverflow) set of objects that are providing services that solve your problem. Thinking in such way may help you improve * cohesiveness* of your code, in other words your parts of program will fit together well, and you won't have desire to put too many functionalities in a single object. For example when you are designing a calculator, the object <code>Button</code> should provide service for pressing it, not the calculation itself. After that you can pair specific <code>Button</code> press to perform a request to <code>Calculation</code> object that has <code>multiply</code> method.</p> <p>Treating objects as service providers brings benefits also for consumers of your program - if someone finds services of your object useful, they can be fitted to other programs more easily.</p>"},{"location":"java-notes/md_java/old_intro/#hiding-the-implementation","title":"Hiding the implementation","text":"<p>As you have seen - we should consider other people using our programs - clients.</p> <p>The goal of the client programmer is to collect a toolbox full of classes to use for rapid application development. Our job is to build a class that exposes only what\u2019s necessary to the client programmer and hide everything else and keeps everything else hidden. It is useful, because we can change the hidden portion without worrying about the impact of breaking workflow of a client. Why? Because if it\u2019s hidden, the client programmer which means the class creator can change the hidden portion at will without worrying about the impact on anyone else and it reduces the possibility of introducing new bugs, because client has less stuff to break. It is also beneficial for the client because if we hide code that is not used for problem-solving by them.</p> <p>Java has 4 ways of setting access boundaries for a class:</p> <ul> <li> <p>public</p> </li> <li> <p>means the element is available to everyone</p> </li> <li> <p>private</p> </li> <li> <p>means no one can access the element except you - inside methods of that type. Anyone trying to     access a private member gets a compile-time error.</p> </li> <li> <p>protected</p> </li> <li> <p>protected works like private, except of the inheriting class which can access protected     members</p> </li> <li> <p>default</p> </li> <li> <p>It is when you don't use any access modifier. It is sometimes called the package access     because classes can access the members of other classes in the package, but outsite those look     like private.</p> </li> </ul>"},{"location":"java-notes/md_java/old_intro/#reuse","title":"Reuse","text":"<p>There are two methods of reusing your code in Java:</p> <ul> <li>composition</li> <li>inheritance</li> </ul>"},{"location":"java-notes/md_java/old_intro/#composition","title":"Composition","text":"<p>If you think your class needs features of another class you can place object of that class inside. It is called composition, because you compose a new class from existing classes. The need for such design is when you ask yourself \"does my class has a ...?\" (has-a relationship). For example <code>Heart</code> is good candidate to be used in composition with a <code>Person</code> - <code>Person</code> has a <code>Heart</code>.</p> <p>Diagram for such construction looks like that:</p> <pre><code>classDiagram\n\nPerson *-- Heart : Composition\nclass Person {\n    -int age\n    -String name\n\n    +addYears(int years)\n    +setName(String name)\n    +getAge() int\n    +getName() String\n}\nclass Heart {\n    -double heartBlooodPressure\n    -int heartRate\n\n    +getHeartBloodPressure() double\n    +getHeartRate() int\n}</code></pre> <p>Clarification of the diagram</p> <p>We should be more specific and use the composition link in cases where in addition to the part-of relationship between <code>Person</code> and <code>Heart</code> - there\u2019s a strong lifecycle dependency between the two, meaning that when <code>Person</code> is deleted then <code>Heart</code> is also deleted as a result. The composition link shows that a class (container, whole) has exclusive ownership over other class/s (parts), meaning that the container object and its parts constitute a parent-child/s relationship. If you are interested in reading more about class diagrams you can check it here and diagrams in this article are built by Mermaid library (you should read that too).</p> <p>Features of the Composition:</p> <ul> <li>it is flexible:</li> <li>member objects of new class are private most of the time so changing them does not break     client code.</li> <li>you can change your code at the runtime, so you don't have worry if your program won't compile (   good for extending features) and inheritance imposes compile-time restrictions.</li> </ul>"},{"location":"java-notes/md_java/old_intro/#inheritance","title":"Inheritance","text":"<p>Sometimes you might want to clone a class and add few features to it to extend it. Inheritance is just that, but you don't have to rewrite unchanged part of the functionalities or if you change the first class the class under it is changed too. The base class is called a  superclass or a parent and copy is called a subclass or a child. I prefer using superclass and subclass terminology, because it is used extensively in the official documentation. Here is diagram representation of inheritance.</p> <pre><code>classDiagram\nSuperClass &lt;|-- SubClass : Inheritance </code></pre> <p>Arrow should point to the base class.</p>"},{"location":"java-notes/md_java/old_intro/#general-features-of-the-inheritance","title":"General Features of The Inheritance","text":"<ul> <li>Superclass should contain the core of functionalities shared amongst its subclasses.</li> <li>With the inheritance you don't need to create intermediate models to provide solution for a   problem</li> <li>It represents is-a relationship: superclass has in possession all the members of the base   class (however private elements are not available at clients disposition), so it duplicates   all its features (and has possibility to add more functionalities), so subclass is always a type   of superclass</li> </ul>"},{"location":"java-notes/md_java/old_intro/#the-ways-of-implementing-the-inheritance","title":"The Ways of Implementing The Inheritance","text":"<p>You can implement inheritance in two ways:</p> <ul> <li>Add new methods to a subclass.</li> </ul> <p>You basically add new functionalities to the subclasses thus   differentiate and make them more specific.   This is the most common way of implementing inheritance.</p> <pre><code>classDiagram\n\nShape &lt;|-- Circle\nShape &lt;|-- Triangle\n\nclass Shape {\n    -int area\n\n    +draw() void\n    +erase() void\n}\n\nclass Circle {\n    -int radius\n\n    +getRadius() int\n    +setRadius() void\n}\nclass Triangle {\n    -int height\n    +rotateClockwise(double degrees) void\n    +rotateCounterClockwise(double degrees) void\n}</code></pre> <ul> <li>Change behavior of existing classes.   It relies on the fact that the base class already has methods and you can change what they do.   It is like telling the program \"I have superclass method here, but I want it to perform something   different\". There is special term for this process called overriding.   In the following example we are overriding <code>draw</code> and <code>erase</code> method of <code>Shape</code> class.</li> </ul> <pre><code>classDiagram\nShape &lt;|-- Square\nShape &lt;|-- Circle\n\nclass Shape {\n  -int area\n\n  +draw() void\n  +erase() void\n}\n\nclass Square {\n  +draw() void\n  +erase() void\n}\nclass Circle {\n  +draw() void\n  +erase() void\n}</code></pre> <p>We are drawing shapes in different ways: <code>circle.draw()</code> and <code>triangle.draw()</code> will perform task in specific way.</p> <p>Inheriting from an existing type creates a new type. This new type contains not only all the members of the existing type (although the private ones are hidden away and inaccessible), but more importantly it duplicates the interface of the base class. That is, all messages accepted by base-class objects are also accepted by derived-class objects. We know the type of a class by the messages it accepts, so the derived class is the same type as the base class.</p> <p>Understanding the concepts of the inheritance is not enough to write a good code while using it. There are several design principles that you should follow when implementing your solutions, you can read more about them here.</p> <p>Warning</p> <p>This is still work in progress and everything past following line will be changed / removed soon</p> <p>[comment]:</p>"},{"location":"java-notes/md_java/old_intro/#objects-vs-normal-life","title":"Objects vs normal life","text":"<p>Real-world objects share two characteristics: They all have state and behavior. Dogs have state (name, color, breed, hungry) and behavior (barking, fetching, wagging tail).</p> <p>Software objects are conceptually similar to real-world objects: they too consist of state and related behavior. An object stores its state in fields (variables in some programming languages) and exposes its behavior through methods (functions in some programming languages). Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication.</p> <p></p> <p>For example in object - bike attributing state (current speed, current pedal cadence, and current gear) and providing methods for changing that state, the object remains in control of how the outside world is allowed to use it.</p> <p></p> <p>!!! warning Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation - a fundamental principle of object-oriented programming.</p>"},{"location":"java-notes/md_java/old_intro/#subsec:benefits-of-object-oriented-programming","title":"Benefits Of Object Oriented Programming","text":"<ul> <li> <p>Modularity   Source code for objects can be maintained independently of other objects source code (like parts   for modular guns can make close combat rifle or sniper rifle)</p> </li> <li> <p>Information-hiding   By interacting only with an object's methods, the details of its internal implementation remain   hidden from the outside world (like computer's keyboard keys - we provide plastic shell for   touching and do not expose circuits which can be easily damaged)</p> </li> <li> <p>Code re-use   If an object already exists (perhaps written by another software developer), you can use that   object in your program. This allows specialists to implement/test/debug complex, task-specific   objects, which you can then trust to run in your own code (You can copy stuff from stackoverflow   and it works, and you still have a job)</p> </li> <li> <p>Pluggability and debugging ease   If a particular object turns out to be problematic, you can simply remove it from your application   and plug in a different object as its replacement. This is analogous to fixing mechanical problems   in the real world.</p> </li> </ul>"},{"location":"java-notes/md_java/old_intro/#sec:what-is-a-class?","title":"What Is a Class?","text":"<p>In the real world, you'll often find many individual objects all the same kind. There may be thousands of other bicycles in existence, all the same make and model. Each bicycle was built from the same set of blueprints and therefore contains the same components. In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles. A class is the blueprint from which individual objects are created.</p> <p>Let see class describing bicycle:</p> <pre><code>package core.oop_concepts.e02_classes;\n\npublic class Bicycle {\n// Those fields will represent object's state\nint cadence = 0;\npublic int speed = 0;\nint gear = 1;\n\n//  Those methods will represent object behaviour\nvoid changeCadence(int newValue) {\ncadence = newValue;\n}\n\nvoid changeGear(int newValue) {\ngear = newValue;\n}\n\nvoid speedUp(int increment) {\nspeed = speed + increment;\n}\n\nvoid applyBrakes(int decrement) {\nspeed = speed - decrement;\n}\n\nvoid printStates() {\nSystem.out.println(\"cadence:\" +\ncadence + \" speed:\" +\nspeed + \" gear:\" + gear);\n}\n}\n</code></pre> <p>And here is code that will create bicycle objects and change their state via methods:</p> <pre><code>package core.oop_concepts.e02_classes;\nimport helpers.OutToFile;\n\npublic class BicycleDemo\n{\npublic static void main(String[] args) {\n//  Create helper object for saving console output to file (for automation in my writing)\nOutToFile of = new OutToFile(\"classes_out\");\n// Create two different\n// Bicycle objects\nBicycle bike1 = new Bicycle();\nBicycle bike2 = new Bicycle();\n\n// Invoke methods on\n// those objects\nbike1.changeCadence(50);\nbike1.speedUp(10);\nbike1.changeGear(2);\nbike1.printStates();\n\nbike2.changeCadence(50);\nbike2.speedUp(10);\nbike2.changeGear(2);\nbike2.changeCadence(40);\nbike2.speedUp(10);\nbike2.changeGear(3);\nbike2.printStates();\n}\n}\n</code></pre> <p>Output:</p> <pre><code>cadence:50 speed:10 gear:2\ncadence:40 speed:20 gear:3\n</code></pre>"},{"location":"java-notes/md_java/old_intro/#sec:what-is-inheritance","title":"What Is Inheritance","text":"<p>Object-oriented programming allows classes to inherit commonly used state and behavior from other classes. In this example, Bicycle now becomes the superclass of MountainBike, RoadBike, and TandemBike. In the Java programming language, each class is allowed to have one direct superclass, and each superclass has the potential for an unlimited number of subclasses:</p> <p></p> <p>The syntax for creating a subclass is simple. At the beginning of your class declaration, use the extends keyword, followed by the name of the class to inherit from:</p> <pre><code>package core.oop_concepts.e03_inheritance;\n\nimport core.oop_concepts.e02_classes.Bicycle;\n\npublic class MountainBike extends Bicycle\n{\n// This gives MountainBike all the same fields and methods as Bicycle  yet allows its code to focus exclusive on the features that make it unique\nint num_of_dampers = 1; // field only for mountain bikes\n\n/*\n        This makes code for your subclasses easy to read. However, you must take care to properly document the state and behavior that each superclass defines, since that code will not appear in the source file of each subclass.\n    */\n}\n</code></pre>"},{"location":"java-notes/md_java/old_intro/#sec:what-is-an-interface","title":"What Is an Interface","text":"<p>As you've already learned, objects define their interaction with the outside world through the methods that they expose. Methods form the object's interface with the outside world; the buttons on the front of your television set, for example, are the interface between you and the electrical wiring on the other side of its plastic casing. You press the \\\"power\\\" button to turn the television on and off. In its most common form, an interface is a group of related methods with empty bodies. A bicycle's behavior, if specified as an interface, might appear as follows:</p> <pre><code>package core.oop_concepts.e04_interfaces;\npublic interface BicycleInterface\n{\nvoid changeCadence(int newValue);\n\nvoid changeGear(int newValue);\n\nvoid speedUp(int increment);\n\nvoid applyBrakes(int decrement);\n}\n</code></pre> <p>To implement this interface, you'd use the <code>implements</code> keyword in the class declaration:</p> <pre><code>package core.oop_concepts.e04_interfaces;\n\npublic class GiantBike implements BicycleInterface\n{\nint cadence = 0;\nint speed = 0;\nint gear = 1;\n\n// The compiler will now require that methods\n// changeCadence, changeGear, speedUp, and applyBrakes\n// all be implemented. Compilation will fail if those\n// methods are missing from this class.\n\n\npublic void changeCadence(int newValue) {\ncadence = newValue;\n}\n\npublic void changeGear(int newValue) {\ngear = newValue;\n}\n\npublic void speedUp(int increment) {\nspeed = speed + increment;\n}\n\npublic void applyBrakes(int decrement) {\nspeed = speed - decrement;\n}\n\nvoid printStates() {\nSystem.out.println(\"cadence:\" +\ncadence + \" speed:\" +\nspeed + \" gear:\" + gear);\n}\n}\n</code></pre> <p>Implementing an interface allows a class to become more formal about the behavior it promises to provide. Interfaces form a contract between the class and the outside world, and this contract is enforced at build time by the compiler. If your class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.</p>"},{"location":"java-notes/md_java/old_intro/#sec:what-is-a-package","title":"What Is a Package","text":"<p>A package is a namespace that organizes a set of related classes and interfaces. Conceptually you can think of packages as being similar to different folders on your computer. You might keep HTML pages in one folder, images in another, and scripts or applications in yet another. Because software written in the Java programming language can be composed of hundreds or thousands of individual classes, it makes sense to keep things organized by placing related classes and interfaces into packages. The Java platform provides an enormous class library (a set of packages) suitable for use in your own applications. This library is known as the \\\"Application Programming Interface\\\", or \\\"API\\\" for short. Its packages represent the tasks most commonly associated with general-purpose programming. For example, a String object contains state and behavior for character strings; a File object allows a programmer to easily create, delete, inspect, compare, or modify a file on the filesystem; a Socket object allows for the creation and use of network sockets; various GUI objects control buttons and check boxes and anything else related to graphical user interfaces. There are literally thousands of classes to choose from. This allows you, the programmer, to focus on the design of your particular application, rather than the infrastructure required to make it work.</p> <p>Here is the view of packages that are created for this chapter:</p> <p></p>"},{"location":"java-notes/md_java/collections/","title":"Overview","text":""},{"location":"java-notes/md_java/collections/Properties/","title":"Java Properties","text":""},{"location":"java-notes/md_java/collections/Properties/#basic-definition","title":"Basic definition","text":"<p>The Properties class represents a persistent set of <code>String</code> pairs in <code>Map</code> representation (\"Key\" -&gt; \"Value\"). It can write those pairs to a disk and read them back to <code>String</code> or <code>Stream</code>. This class is used for storing configs for applications. If you are familiar with Linux or macOS (less likely, but I hope you are, and on Windows - dunno) operating system you probably edited some configuration files.</p>"},{"location":"java-notes/md_java/collections/Properties/#usage","title":"Usage","text":""},{"location":"java-notes/md_java/collections/Properties/#setting-properties","title":"Setting Properties","text":"<p>To set properties instance we use the <code>setProperty\u200b(String key, String value)</code> It calls the <code>Hashtable</code> method <code>put</code> and enforces use of strings for property keys and values. The value returned is the result of the <code>Hashtable</code> call to put.</p> <p>The construction of this metod should look like this: </p> <pre><code>class Properties extends Hashtable&lt;Object,Object&gt; {\n// ...\npublic synchronized Object setProperty(String key, String value) {\nreturn put(key, value);\n}\n// ...\n}\n</code></pre> <p>A you see, it uses <code>synchronised</code> keyword, which provides support for parallelism with <code>getProperty</code> method (it is <code>synchronised</code> too)  Let see how it works on the example:</p> Setting PropertiesOutput <pre><code>package collections.properties;\nimport java.util.Properties;\n\npublic class SetProperties {\npublic static void main(String[] args) {\nProperties properties  = new Properties();\n// set petting property\nproperties.setProperty(\"window-manager\", \"i3-gaps\");\nproperties.setProperty(\"os\", \"nixOS\");\nproperties.setProperty(\"user\", \"andy\");\n\n// iterating over key and value of every property\nproperties.forEach(\n(key, value) -&gt; System.out.println(key + \" : \" + value));\nproperties.setProperty(\"group\", \"wheel\");\n// will return value, because key exists\nSystem.out.println(\n\"print::properties.setProperty():\" + properties.setProperty(\"group\", \"wheel\"));\nSystem.out.println();\nproperties.forEach(\n(key, value) -&gt; System.out.println(key + \" : \" + value));\n}\n}\n</code></pre> <pre><code>os : nixOS\nwindow-manager : i3-gaps\nuser : andy\nprint::properties.setProperty():wheel\n\nos : nixOS\nwindow-manager : i3-gaps\nuser : andy\ngroup : wheel\n</code></pre> <p>Warning</p> <p>Because <code>Properties</code> inherits from <code>Hashtable</code>, the put and <code>putAll</code> methods can be applied to a  Properties object.   Their use is strongly discouraged as they allow the caller to insert entries whose keys or   values are not Strings.   The <code>setProperty</code> method should be used instead.    If the store or save method is called on a \"compromised\" Properties object that contains    a non-String key or value, the call will fail.</p> <p>This is an example of breaking Liskov Substitution Principle.   They should use composition instead inheritance, but idk, too late I guess.</p> <p>Here is an example that points out this bad design decision:</p> Properties BreakOutput <pre><code>    package collections.properties;  import java.util.Properties;\n\npublic class BreakProperties {\npublic static void main(String[] args) {\nProperties properties = new Properties();\nproperties.put(\"KeyStringValNot\", 2);\nSystem.out.println(properties.getProperty(\"KeyStringValNot\")); System.out.println(properties.get(\"KeyStringValNot\"));\n}\n}\n</code></pre> <pre><code>null\n2  </code></pre>"},{"location":"java-notes/md_java/collections/Properties/#storing-properties","title":"Storing Properties","text":"<p>You can store the property key and value pairs to a  file via <code>store()</code> method.</p> <pre><code>package collections.properties;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class StoreProperties {\npublic static void main(String[] args) throws IOException {\nProperties prop = new Properties();\nprop.setProperty(\"newkey1\", \"newvalue1\");\nprop.setProperty(\"newkey2\", \"newvalue2\");\nprop .store(new FileOutputStream(\n\"./src/collections/properties/properties.conf\"), null);\n\n// Store as XML\nprop = new Properties();\nprop.setProperty(\"1st\", \"first\");\nprop.setProperty(\"2nd\", \"second\");\nprop.storeToXML(new FileOutputStream(\n\"./src/collections/properties/properties.xml\"), null);\n}\n}\n</code></pre> <ul> <li>Content of <code>properties.conf</code> is:</li> </ul> <pre><code>#Thu Oct 28 23:10:51 CEST 2021\nnewkey1=newvalue1\nnewkey2=newvalue2\n</code></pre> <ul> <li>And <code>properties.xml</code>:</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;\n&lt;properties&gt;\n&lt;entry key=\"1st\"&gt;first&lt;/entry&gt;\n&lt;entry key=\"2nd\"&gt;second&lt;/entry&gt;\n&lt;/properties&gt;\n</code></pre>"},{"location":"java-notes/md_java/collections/Properties/#loading-properties","title":"Loading Properties","text":"Loading PropertiesOutput <pre><code>package collections.properties;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class LoadProperties {\npublic static void main(String[] args) throws IOException {\nProperties properties = new Properties();\n// will load a properties file located in the same package as\n// the class LoadProperties.\nInputStream in = LoadProperties\n.class\n.getResourceAsStream(\"properties.conf\");\nproperties.load(in);\nproperties\n.forEach((k, v) -&gt; System.out.println(k +  \" -&gt; \" + v));\n\nSystem.out.println(\"XML Properties\");\nin  = LoadProperties\n.class\n.getResourceAsStream(\"properties.xml\");\nproperties = new Properties();\nproperties.loadFromXML(in);\nproperties.forEach((key, value) -&gt; System.out.println(\nkey +\" -&gt; \"+ value));\n}\n}\n</code></pre> <pre><code>newkey1 -&gt; newvalue1\nnewkey2 -&gt; newvalue2\nXML Properties\n1st -&gt; first\n2nd -&gt; second\n</code></pre>"},{"location":"java-notes/md_java/collections/Properties/#default-properties","title":"Default Properties","text":"<p>There are two ways to provide default value for properties:</p> <ul> <li>With using <code>Properties</code> constructor which accepts another <code>Properties</code> object as a parameter: <code>Properties\u200b(Properties defaults)</code>:</li> </ul> Defaults ConstructorOutput <pre><code>Properties defauts = new Properties();  defauts.setProperty(\"os\", \"ArchLinux\");  defauts.setProperty(\"user\", \"root\");  // printing defaults:  \nSystem.out.println(\"defaults:\");  defauts.forEach(  (key, value) -&gt; System.out.println(key + \" : \" + value)  );  // providing defaults with constructor  \nProperties props = new Properties(defauts);  // props.setProperty(\"environment\", \"i3-gaps\");  \n// printing props  \nSystem.out.println(\"props:\");  props.forEach((key, val) -&gt; System.out.println(key + \" : \" + val));  System.out.println(\"props.getProperty(\\\"os\\\") = \" + props.getProperty(\"os\"));\n</code></pre> <pre><code>defaults:\nos : ArchLinux\nuser : root\nprops:\nprops.getProperty(\"os\") = ArchLinux\n</code></pre> <p>As you see, after setting default properties you can't just browse through them. There is no method in <code>Properties</code> class that will show you default values for keys. I am not a master of the good design, but this thing looks awful, because a client might want ask: \"Hmm, I wonder what are defaults of this app?\", and the answer is well... there is no answer.</p> <ul> <li>By providing default value with using method parameter: <code>getProperty\u200b(String key, String defaultValue)</code> If value for key does not exist, method returns <code>defaultValue</code> String.</li> </ul> Default Method ParameterOutput <pre><code>Properties props2 = new Properties();\nString defaultJedi = props2.getProperty(\"jedi\", \"Obi-Wan Kenobi\");\nSystem.out.println(\"defaultJedi = \" + defaultJedi);\n</code></pre> <pre><code>defaultJedi = Obi-Wan Kenobi\n</code></pre>"},{"location":"java-notes/md_java/core/","title":"Java Articles","text":"<ul> <li>Object Oriented Concepts</li> </ul> <p>Basics of objects abstractions and basic look in Java</p> <ul> <li> <p>Objects In Java</p> </li> <li> <p>concurrent-programming</p> </li> <li> <p>maptest</p> </li> </ul>"},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/","title":"Introduction","text":"","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#object-oriented-programming-paradigms","title":"Object-Oriented Programming Paradigms","text":"<ul> <li>Object-Oriented Programming (OOP) is an attempt in using the computer as an   expressive medium to port our ideas into the machine.</li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#abstractions","title":"Abstractions","text":"<ul> <li>Like all languages, programming languages are abstractions - general tools   that are designed to represent more specific models of real life concepts.</li> <li>Let's take a look into different programming languages sorted by least   abstract (closest to the   machine) and most abstract (closest to natural language).</li> </ul> <ul> <li> </li> </ul> <pre><code>.DATA\nvar   DB 64   ; Declare a byte, referred to as location var, containing the value 64.\nvar2  DB ?    ; Declare an uninitialized byte, referred to as location var2.\nDB 10 ; Declare a byte with no label, containing the value 10. Its location is var2 + 1.\nX DW ?    ; Declare a 2-byte uninitialized value, referred to as location X.\nY DD 30000        ; Declare a 4-byte value, referred to as location Y, initialized to 30000.\n</code></pre> <pre><code>- In order to convert assembly language into machine code it needs to be\n  translated using an\n  assembler.\n- This converts each statement into the specific machine code needed for the\n  hardware on\n  which it is being run.\n- There is a one-to-one relationship between an assembly language\n  instruction and its machine code\n  equivalent.\n- Each CPU has its own version of machine code and assembly language.\n- Although assembly languages are easier to program with than machine code,\n  it is still\n  time-consuming and specialist work.\n- It is mainly reserved for writing specific instructions for embedded\n  systems such as washing\n  machines or air-conditioning control systems.\n</code></pre> <ul> <li> </li> <li> <p>Imperative programming can be described as being concerned with:</p> <p>\"how to do something, not what to do\"</p> </li> <li> <p>Imperative Programming can take many forms, two most important approaches in   historical (ascending) order are:</p> </li> <li> </li> <li> </li> </ul> <pre><code>flowchart TD\nTask-1 --&gt; General-Task-1\nTask-2 --&gt; General-Task-1\n\nTask-3 --&gt; General-Task-2\nTask-4 --&gt; General-Task-2\nGeneral-Task-1 --&gt; Problem-Solution\nGeneral-Task-2 --&gt; Problem-Solution</code></pre> <ul> <li> </li> </ul> Characteristic Imperative approach Functional approach Programmer focus How to perform tasks (algorithms) and how to track changes in state. What information is desired and what transformations are required. State changes Important. Non-existent. Order of execution Important. Low importance. Primary flow control Loops, conditionals, and function (method) calls. Function calls, including recursion. Primary manipulation unit Instances of structures or classes. Functions as first-class objects and data collections. <p>Paradigms vs Real Life</p> <p>Modern programming languages tend to integrate many paradigms, for example in OCaml you can use object-oriented, imperative, functional programming paradigms. t mixes all these paradigms and lets you use the most appropriate (or most familiar) programming paradigm for the task at hand.</p> <pre><code>Java is mainly an Object-Oriented Language, however as seen in previous code block it supports functional programming.\n</code></pre>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#assembly","title":"Assembly","text":"<ul> <li>In the world of computers an Assembly Language is the minimal abstraction   of the   communication between human and the computer, which is often described as   low-level language.   It can be directly translated into machine code, but it uses mnemonics to   represent the instructions   to make it easier to understand (for example, on an Intel microprocessor,   inc (\"increase by one\") is a mnemonic.).</li> <li>Example of an Assembly code:</li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#imperative-programming","title":"Imperative Programming","text":"","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#procedural-paradigm","title":"Procedural Paradigm","text":"<ul> <li>Based on subroutines (a sequence of program instructions that performs a   specific task) that contain a series of computational steps to be carried   out prepared for re-executing a predefined block of code. In simple words:   the sequences of statements designed to reach a certain goal.</li> <li> <p>It is takes a top-down approach to problem-solving, where the problem   is divided hierarchically into a number of smaller tasks and those tasks   can be divided into smaller sub-tasks and so on:   <pre><code>flowchart TD\nProblem --&gt; Task-1\nProblem --&gt; Task-2\n\nTask-1 --&gt; Subtask-1\nTask-1 --&gt; Subtask-2\n\nTask-2 --&gt; Subtask-3\nTask-2 --&gt; Subtask-4</code></pre></p> </li> <li> <p>The most known procedural languages are: FORTRAN, BASIC, C</p> </li> <li>Example of C code: <pre><code>#include&lt;stdio.h&gt;\n\n// function declaration\nfloat findArea(float l, float b); int main()\n{\nfloat length, width, result;\n\nprintf(\"Enter the length and width of the rectangle: \");\nscanf(\"%f %f\", &amp;length, &amp;width);\n\nresult = findArea(length, width); //function calling\nprintf(\"Area of rectangle = %.2f\\n\",result);\n\nreturn 0;\n}\n\n// function to find ara of rectangle\n// function definition\nfloat findArea(float l, float b)\n{\nfloat area;\narea = l * b;\nreturn area; //return statement\n} </code></pre></li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#object-orietned-paradigm","title":"Object-Orietned Paradigm","text":"<ul> <li>It is designed to provide general tools for solving problems</li> <li>Representation of solutions for problems is done by using objects -   entities with grouped functionalities and information</li> <li>It takes a bottom-up approach: bottom level modules developed first (   Lower level module developed, tested and debugged). Then the next module   developed, tested and debugged. This process is continued until all   modules have been completed:</li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#declarative-programming","title":"Declarative Programming","text":"<ul> <li>Declarative programming can be described as being concerned with: <p>\"what to do something, not how to do it.\"</p> </li> <li>Declarative programming is to program on a higher level of abstraction   than imperative programming.</li> <li> <p>Two most known approaches are:</p> </li> <li> </li> <li> </li> <li> <p>Table with key differences between declarative and imperative   approaches:</p> </li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#logical-paradigm","title":"Logical Paradigm","text":"<ul> <li>Is largely based on formal logic.</li> <li>Any program written in a logic programming language is a set of   sentences in logical form, expressing facts and rules about some   problem domain.</li> <li>Semantic of logic programming:<ul> <li><code>H if B1 and \u2026 and Bn.</code><ul> <li><code>H</code> is called the head of the rule and <code>B1, ..., Bn</code> is called   the body. Facts are rules that do not have body.</li> </ul> </li> </ul> </li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#functional-paradigm","title":"Functional Paradigm","text":"<ul> <li>It is a programming paradigm where programs are constructed by   applying and composing functions.</li> <li>Those functions ideally are pure functions - whose results are   dependent only upon the input parameters, and operations initiates no   side effect, that is, makes no external impact besides the return   value.</li> <li>Functional programming philosophy is not to modify data outside the   function</li> <li>Functional example in Java:   <pre><code>// Program creates list with numbers and letters, then searches for those starting with letter \"c\" and\n// changes them to uppercase, sorts them and prints them out\nList&lt;String&gt; myList =\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\");\n\n\nmyList\n// functions\n.stream()\n.filter(s -&gt; s.startsWith(\"c\"))\n.map(String::toUpperCase)\n.sorted()\n.forEach(System.out::println);\n</code></pre></li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#diving-into-object-oriented-thinking","title":"Diving into Object-Oriented Thinking","text":"<ul> <li>Objects are representations of abstract data types - classes</li> <li>Creating abstract data types (classes) is a fundamental concept in   object-oriented programming</li> <li>A class describes a set of objects that have identical characteristics (data   elements, like variables or other objects) and behaviors (functionality).</li> <li>Once a class is established, you can make as many objects of that class as you   like and then manipulate their state.</li> <li>You make a request of that object\u2014complete a transaction, draw something on   the screen, turn on a switch</li> <li>Each object accepts only certain requests, defined by its interface.</li> <li>Example: <code>class Duck diagram</code>:</li> </ul> <pre><code>classDiagram \n  class Duck\n  Duck : -beakSize \n  Duck : -legHeight \n  Duck : +walk(distance) # (1)!\n  Duck : +quack(loudness) </code></pre> <ul> <li> <p><code>class Duck</code> code:   <pre><code>class Duck { // (1)! \nint beakSize;\nint legHeight;\n\n\nvoid walk(int distance) { // (2)!\n// ...\n}\nString quack(int loudness) { // (3)!\n// ...\n}\n}\n</code></pre></p> <ol> <li>class is sometimes called a type like <code>Duck</code> type</li> <li>This is part of the interface of the class</li> <li>This is part of the interface of the class too</li> </ol> </li> <li> <p>creating <code>Duck</code> object:   Creating Duck Object<pre><code>Duck duck_1 = new Duck();\nduck_1.quack(\"loudly\")  // (1)! \n</code></pre></p> <ol> <li>Using the interface of the <code>Duck</code> class</li> </ol> </li> </ul> <ul> <li><code>Duck</code> has 2 functionalities in its interface: it can walk and quack (this   is what ducks do).</li> <li>The interface describes what you can request from specific object, you send   it (<code>d1.quack()</code>) and object performs action based upon it (specific duck   performs its quacking code).</li> <li>Processing data in object is done via methods <code>walk(distance)</code> is a method (   method is function that is associated with an object) and method is an   object-oriented function.</li> <li>To send a message you choose the object reference (<code>d1</code>) place dot after it   and write method name.</li> </ul> <p>Difference Between Function and Method</p> <p>A function is a mathematical concept. For example:</p> <pre><code>   `f(x,y) = sin(x) + cos(y)`\n\nsays that function `f()` will return the sin of the first parameter added to the cosine of the second parameter.  It's just math.  As it happens `sin()` and `cos()` are also functions.  \nA function has another property: **all calls to a function with the same parameters, should return the same result.**\n\nA method, on the other hand, is a function that is related to an object in an object-oriented language.  It has one implicit parameter: the object being acted upon (and it's state).\n\nSo, if you have an object `Z` with a method `g(x)`, you might see the following:\n\n  `Z.g(x) = sin(x) + cos(Z.y)`\n\nIn this case, the parameter `x` is passed in, the same as in the function example earlier.  However, the parameter to `cos()` is a value that lives inside the object `Z`.  `Z` and the data that lives inside it (`Z.y`) are implicit parameters to `Z`'s `g()` method.\n</code></pre>","tags":["Java"]},{"location":"java-notes/md_java/core/Object-Oriented-Concepts/#hiding-implementation-details","title":"Hiding Implementation Details","text":"<ul> <li>We can break up the playing field into class creators (those who create new data types) and client programmers (the class consumers who use the data types in their applications).~</li> <li>The goal of the class creator is to build a class that exposes only what\u2019s necessary to the client programmer and keeps everything else hidden.</li> <li>So the first reason for access control is to keep client programmers\u2019 hands off portions they  shouldn\u2019t touch\u2014parts necessary for the internal operation of the data type but not part of the   interface that users need to solve their particular problems.<ul> <li>This is actually a service to client programmers because they can easily see what\u2019s important and  what they can ignore.</li> </ul> </li> <li> <p>The second reason for access control is to enable the library designer to change the internal     workings of the class without worrying about how it will affect the client programmer.</p> </li> <li> <p>C`lass creator can change the hidden portion at will without  worrying  about the impact on anyone else. The hidden portion usually  represents  the </p> </li> </ul> <p>Inspirations and Sources</p> <ul> <li>Alan Kay's Definition Of Object-Oriented</li> <li>Explanation of UML Diagrams</li> <li>Mermaid Class Diagrams used in my documents</li> <li>https://amzotti.github.io/programming%20paradigms/2015/02/13/what-is-the-difference-between-procedural-function-imperative-and-declarative-programming-paradigms/</li> <li>https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function</li> </ul>","tags":["Java"]},{"location":"java-notes/md_java/core/concurrent-programming/","title":"Concurrent Programming","text":""},{"location":"java-notes/md_java/core/concurrent-programming/#race-condition","title":"Race Condition","text":""},{"location":"java-notes/md_java/core/maptest/","title":"This is A tests","text":"<pre><code>flowchart TD\n    Start --&gt; Stop</code></pre> <pre><code>mindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness&lt;br/&gt;and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n</code></pre>"},{"location":"java-notes/md_java/core/objects-in-java/","title":"Objects in java","text":""},{"location":"java-notes/md_java/core/objects-in-java/#objects-in-java","title":"Objects in Java","text":"<p>It is safe to assume that Java language expects you are going to write only Object-Oriented programs. Even though you are treating everything as an object you manipulate directly its reference.</p> <p>Reference to an object can be compared to a gamepad (reference) of a console (object). As long as you have gamepad in your hands you can send messages to console to turn on the game, pause it or simply shut down the device. So you are able to modify object via its reference, reference itself has no use when it is not connected to the object. If gamepad is not paired with console you cannot control it.</p> <p>Let's take look at objects and references with <code>String</code> example. To create reference first we must specify a type of object it can be connected to and after that name of the reference (it cannot start with the number or take name of any reserved keyword in Java) <pre><code>  // type reference_name\nString str;\n</code></pre></p> <p>Here we have only reference of type <code>String</code> with variable name <code>str</code> (we will cover variables soon - I need to explain few things before). If I tried print <code>str</code> I would get compile error that our <code>str</code> might not be initialized</p> <p>It is always safer to initialize reference as early as you know what to put to them, ideally in the same line as they are declared.</p> <pre><code>  // type reference_name    value\nString str = \"Big Fat Cat\";\n</code></pre> <p>Other objects than strings use a bit different initialization syntax, which consist of a <code>new</code> keyword.</p> <pre><code>StringBuilder sb = new StringBuilder();\n</code></pre> <p>That is how we create new object of type <code>StringBuilder</code> and assign it to the reference <code>sb</code>.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#where-java-stores-objects","title":"Where Java Stores Objects?","text":"<p>There are five places where Java stores objects:</p>"},{"location":"java-notes/md_java/core/objects-in-java/#registers","title":"Registers","text":"<ul> <li>It is the fastest storage option.</li> <li>They temporarily holds frequently used data, instructions, and memory address that are to be used by CPU.</li> <li>They hold instructions that are currently processed by the CPU.</li> <li>Since Java runs inside a virtual machine it is not possible to access low-level hardware such as the registers of your CPU. Especially because their representation and presence may change from one system to another.</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#stack","title":"Stack","text":"<ul> <li>This (second fastest)  option is stored inside RAM memory, however CPU can access it via stack pointer.</li> <li>The order of adding stuff to it is  Last In First Out (LIFO), which means first item is last to leave   the stack and last item is first to leave the stack (it is like adding things atop of each other).</li> </ul> <ul> <li>Every thread running in Java has its own stack and the scope of stack is limited to the thread.   </li> <li>Stack memory contains of method-specific values that are short-lived, variables including references to other objects (objects themselves are placed in the heap), local variables for methods that are being executed. If two threads are running the same code, they still create their own local variables.</li> <li>Memory allocated to stack lives until the function returns.</li> <li>If there is no space for creating the new objects, it throws the <code>java.lang.StackOverFlowError</code>.</li> </ul> <p>To visualize things I wrote above I'll show you the program that creates <code>Runnable</code> object and two <code>Thread</code> objects that are sharing the same <code>Runnable</code> and draw a diagram that will help you with finding out what's going on.</p> Shared Runnable <pre><code>package core.objects_java.memory_allocation;\n\npublic class SharedRunnable {\npublic static void main(String[] args) throws InterruptedException {\n\nMyRunnable mr = new MyRunnable();\nThread t1 = new Thread(mr, \"Thread 1\");\nThread t2 = new Thread(mr, \"Thread 2\");\n// starting threads\nt1.start();\nt2.start();\n\n// waiting for threads to finish their execution\nt1.join();\nt2.join();\n\n//printing counter value\nmr.printCounter();\n\n}\n}\n</code></pre> MyRunnable <pre><code>package core.objects_java.memory_allocation;\n\npublic class MyRunnable implements Runnable {\n\nprivate int counter = 0;\n\npublic void printCounter() {\nSystem.out.println(\"counter = \" + counter);\n}\n\n// This will be called by the thread.start() method.\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 100; i++) {\nthis.counter++;\n}\nSystem.out.println(\nThread\n.currentThread()\n.getName() + \" : \" + this.counter);\n}\n\n}\n</code></pre> Output <pre><code>Thread 1 : 100 \nThread 2 : 200 \ncounter = 200 \n</code></pre> <p>Below is the graphical of the stuff going inside JVM. For now there is no CPU - I don't want to show too much details at once. Solid arrows are representing references, dashed arrows are representing side effects of method calls.</p> step 1step 2step 3step 4step 5 <p></p> <p></p> <p></p> <p></p> <p></p> <p>After <code>main()</code> method is finished, all threads are finished and all objects are destroyed.</p> <p>And know let's modify a little our program by removing <code>syncronized</code> keyword from our <code>run()</code> method:</p> <pre><code>package core.objects_java.memory_model;\n\npublic class MyRunnable implements Runnable {\n\nprivate int counter = 0;\n\npublic void printCounter() {\nSystem.out.println(\"counter = \" + counter);\n}\n\n/// This will be called by the thread.start() method.\n@Override\n// synchronized\npublic void run() {\nfor (int i = 0; i &lt; 100; i++) {\nthis.counter++;\n}\nSystem.out.println(\nThread\n.currentThread()\n.getName() +\" : \" + this.counter);\n}\n}\n</code></pre> <p>That will lead to situation called race condition. It means that more than This topic is generally shown in more advanced parts in Java books and tutorials, we will talk about it in greater detail while exploring multithreaded features of Java language, but I want to show you what stays behind it so you will understand the significance of  hardware architecture you running your Java programs on, especially the CPU. Even if you don't have control over the CPU registers nor its cache it is still affecting your  results of the program.</p> <p>Let's return to the example of <code>SharedRunnable</code>and <code>MyRunnable</code> to see how it affects the results. In <code>SharedRunnable</code> there are two lines <code>t1.join();</code> and <code>t2.join();</code>. In this program both threads are finishing their execution before the value of <code>counter</code> is printed. However if we remove those lines, we have no guarantee that threads will do their job before final printing the value of <code>counter</code> and if we start running program over and over again we have guaranteed  occurrence of one of threads finishing job as last one. after printing value:</p> RacingOutput <pre><code>package core.objects_java.memory_allocation;\n\npublic class Racing {\npublic static void main(String[] args) {\nMyRunnable mr = new MyRunnable();\nThread t1 = new Thread(mr, \"Thread 1\");\nThread t2 = new Thread(mr, \"Thread 2\");\n// starting threads\nt1.start();\nt2.start();\n\n//printing counter value\nmr.printCounter(); }\n}\n</code></pre> <pre><code>counter = 100\nThread 1 : 100\nThread 2 : 200\n</code></pre> <p>The diagram of this problem is shown below. It might look like on the border of readability, however it is still simplified There are 13 steps showing the order of execution of the program. Most likely not you won't see every toggle button on the screen, so as soon as you click on the first one you'll be able to use Left and Right keys to scroll through them.</p> step 1step 2step 3step 4step 5step 6step 7step 8step 9step 10step 11step 12step 13 <ul> <li>Beginning of <code>main()</code> method.</li> <li>Structures occupying RAM are in dashed box (I will remove it in next slide to reduce clutter). </li> </ul> <ul> <li><code>MyRunnable</code> object is created with a reference <code>mr</code>.</li> <li>Information about the state of the <code>counter</code> is sent to CPU registers. </li> </ul> <ul> <li><code>Thread</code> object is created with a reference <code>t1</code>.</li> <li>The object holds a reference to <code>MyRunnable</code> object.</li> <li>New thread stack is assigned in the RAM. </li> </ul> <p>-<code>Thread</code> object is created with a reference <code>t2</code>. -The object holds a reference to <code>MyRunnable</code> object. -New thread stack is assigned in the RAM. </p> <ul> <li><code>t1</code> thread is started via <code>start()</code> method, which calls <code>run()</code> method.</li> <li><code>run()</code> method increments <code>counter</code> variable in <code>MyRunnable</code> object - it sends information to CPU to update the value of <code>counter</code> variable and we see that <code>counter</code> variable is 1 in CPU register. </li> </ul> <ul> <li>CPU sends updated value to the cache and then it propagates information to the RAM to the <code>MyRunnable</code> object. </li> </ul> <ul> <li><code>t1</code> threads finish execution and it is destroyed.</li> <li><code>t2</code> thread is started via <code>start()</code> method, which calls <code>run()</code> method and it begins   sending information to CPU. </li> </ul> <ul> <li>In the meantime <code>mr.printCounter()</code> method is called and it prints <code>counter</code> variable:   thread runs independently from the main() once started it happens to do stuff slower than   <code>mr.printCounter()</code> method. ]</li> </ul> <ul> <li><code>run()</code> method finishes sending information to the CPU. </li> </ul> <ul> <li>CPU sends updated value to the cache and then it propagates information to the RAM to the <code>MyRunnable</code> object. </li> </ul> <ul> <li><code>t2.start()</code> finishes execution and it is destroyed.</li> <li>stack of <code>t2</code> thread is freed by the Garbage Collector  </li> </ul> <p> - <code>t2</code> reference is destroyed and it's object is freed by the Garbage Collector.</p> <ul> <li><code>mr</code> reference is destroyed and it's object is freed by the Garbage Collector.</li> <li>Program ends </li> </ul> <p>You can read about the stack.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#the-heap","title":"The Heap","text":"<ul> <li>Like the stack it is a pool of memory in the RAM.</li> <li>It is the place where objects are stored - when you write <code>new</code> keyword, the object is created   and placed in the heap.</li> <li>It can be dynamically allocated and deallocated - compiler doesn't have to know how long   objects need to stay in the heap(unlike in the stack).</li> <li>Cleanup of the heap is done by the garbage collector, it is not automatic, unlike in stack   than in stack.</li> <li>It is slower than the stack.</li> <li>If heap space is full, Java throws <code>java.lang.OutOfMemoryError</code>.</li> <li>You can change heap size via argument</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#constant-storage","title":"Constant Storage","text":"<ul> <li>The constant value is usually placed inside the program code.   This is safe because it will never be changed.   Example of constant Read Only Memory (ROM) is a <code>String Memory Pool</code> - every <code>String</code>   (not created by <code>new</code>) is stored in this static storage and becomes a constant.   I will explain it with all details later, when I will talk about <code>String</code> class later.</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#non-ram-storage","title":"Non-RAM Storage","text":"<ul> <li>It is permanent storage of the computer.</li> <li>It can store program data even if it is not running.</li> <li>It is often used for:</li> <li><code>serialized objects</code> - objects converted to sequence of bytes usually of sending it over the     network for the other program to read.</li> <li><code>persistent objects</code> - data that is stored in the file system for saving objects state after     program is closed. Something like saving the game state.</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#primitive-data-types","title":"Primitive  Data Types","text":"<p>Allocating memory for every small bit of data on the heap is somewhat costly thing to do. That is why there are few data types that are allocated on the stack so we do not write <code>new</code> to create them and instead of being reference, they hold the actual value. We call them \"primitive\" data types or \"simple\" data types or \"primitives\". Ranges of primitive types are not dependent on the machine you are running on your program, which is really cool thing, because it means programs are portable unlike C or C++, which creates different sizes for 32-bit and 64-bit machines (and other).</p> Primitive Size Min Max Wrapper <code>boolean</code> - - - <code>Boolean</code> <code>byte</code> 8 bits \\(-128\\) \\(+127\\) <code>Byte</code> <code>char</code> 16 bits Unicode 0<code>\\u0000</code> \\(65,535\\) <code>\\uffff</code> <code>Character</code> <code>short</code> 16 bits \\(-32,768\\) \\(+32,767\\) <code>Short</code> <code>int</code> 32 bits \\(2^-31\\) \\(+2^31 - 1\\) <code>Integer</code> <code>long</code> 64 bits \\(-2^63\\) \\(+2^63 - 1\\) <code>Long</code> <code>float</code> 32 bits IEE754 (6-7 significant digits) IEE754 <code>Float</code> <code>double</code> 64 bits IEEE754(15 significant decimal digits) IEEE754 <code>Double</code> <code>void</code> - - - <code>Void</code>"},{"location":"java-notes/md_java/core/objects-in-java/#boolean","title":"<code>boolean</code>","text":"<ul> <li><code>boolean</code> size is not specified, it can take either <code>true</code> or <code>false</code> literal values.</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#byte","title":"<code>byte</code>","text":"<ul> <li>byte data type is an 8-bit signed two's complement integer.</li> <li>It has a minimum value of -128 and a maximum value of 127 (inclusive).</li> <li>The byte data type can be useful for saving memory in large arrays.</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#int","title":"<code>int</code>","text":"<ul> <li>an <code>int</code> is most common data type in Java.</li> <li>it is 32-bit signed integer. (signed datatype is the one that can hold negative values).</li> <li>To see its min and max value you can use <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code> constants.</li> <li>it has a minimum value of \\(-2^{31}\\) and a maximum value of \\(2^{31}-1\\)</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#long","title":"<code>long</code>","text":"<ul> <li>long data type is a 64-bit two's complement integer. It has minimum value of \\(-2^{63}\\)   and a maximum value of \\(2^{63}-1\\)</li> <li>to create <code>long</code> value you need to add <code>L</code> or <code>l</code> suffix to the number, for example   <code>123L</code> is a <code>long</code> value of <code>123</code>.   You are encouraged to use <code>L</code> suffix for clarity: <code>l</code> looks similar to <code>1</code>.</li> <li>To check min and max <code>long value</code> you can use <code>Long.MIN_VALUE</code> and <code>Long.MAX_VALUE</code> constants.</li> <li>If we do not add <code>L</code> suffix, , Java will interpret the number as <code>int</code> value even if we specified   <code>long</code> type.:</li> </ul> <p><pre><code>long l = 1234567891011;\n</code></pre> we will get compile error:</p> <p><pre><code>java: integer number too large\n</code></pre> However this will compile just fine:</p> <pre><code>long l = 1234567891011L;\n</code></pre>"},{"location":"java-notes/md_java/core/objects-in-java/#float","title":"<code>float</code>","text":"<ul> <li><code>float</code>is single precision 32-bit floating point number.</li> <li>To create <code>float</code> value you need to add <code>F</code> or <code>f</code> suffix to the number, for example <code>123.45F</code> </li> <li>is a <code>float</code> value of <code>123.45</code>.</li> <li>If you do not specify <code>F</code> suffix Java will interpret the number as <code>double</code> value, even if we   defined type as <code>float</code>:</li> </ul> float test<pre><code>      // java: incompatible types: possible lossy conversion \n//        from double to float\n\n// float f = 1.23456789;\n\n// fine\nfloat f = 1.23456789F;\n</code></pre>"},{"location":"java-notes/md_java/core/objects-in-java/#double","title":"<code>double</code>","text":"<ul> <li><code>double</code> name refers to the fact that it has twice the precision of <code>float</code> type.</li> <li>for double we can use <code>d</code> or <code>D</code> suffix, but it is quite useless, because every   floating-point number is <code>double</code> by default.</li> </ul> <p>Warning</p> <p>Do not use <code>double</code> (or any primitive) data type  for storing money or time, because it dosesn't provide enough precision. For example <code>System.out.println(2.0 - 1.1);</code> will print out <code>0.8999999999999999</code>. To deal with high precision numbers, you should use <code>BigDecimal</code> or <code>BigInteger</code> class. <code>BigInteger</code> supports arbitrary-precision integers, while <code>BigDecimal</code> supports arbitrary-precision fixed-point numbers. Both classes have methods that work like their primitive counterparts.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#life-of-objects","title":"Life of Objects","text":""},{"location":"java-notes/md_java/core/objects-in-java/#scope","title":"Scope","text":"<p>The scope  describes the extent of the visibility of the variables that program can see and utilize them.. Scope is created by using <code>{}</code> braces. Braces and area between them form the block of code.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#scope-of-primitive-data-types","title":"Scope of Primitive Data Types","text":"<p>Primitives are created when they are declared and destroyed when they are no longer in the scope.</p> <p>Here is an example of scope of primitives:</p> scope example<pre><code>{\n// Only x is visible here\nint x = 10;\n{\nint b = 20;\n// x and b are visible here\n}\n// Only x is visible here, b is not in scope\n}\n</code></pre> Scope <pre><code>package core.objects_java.scopes;\n\npublic class Scope {\npublic static void main(String[] args) {\n{\nint x = 10;\nSystem.out.println(\"x = \" + x);\n{\nint y = 20;\nSystem.out.println(\"y = \" + y);\nint z = 30;\nSystem.out.println(\"z = \" + z);\n}\n// we can declare y again, because scope of last y is in inner block\nint y = 30;\nSystem.out.println(\"y = \" + y);\nx = 40;\nSystem.out.println(\"x = \" + x);\n//            System.out.println(\"z = \" + z);\n// java: cannot find symbol\n//  symbol:   variable z\n//  location: class core.objects_java.scopes.Scope\n}\n}\n}\n</code></pre> Output <p><code>console x = 10 y = 20 z = 30 y = 30 x = 40</code> As you can see above <code>z</code> is not visible afer its scope is closed.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#scope-of-objects","title":"Scope of Objects","text":"<p>Objects lifetime differs from primitives. After objects scope ends, its reference is destroyed, but object itself remains in the memory. You might ask yourself, well, if we do not destroy objects how they are cleaned up?</p> <p>In java there is special tool that automatically does that task for you - it is called garbage collector. It searches for all objects created with <code>new</code> keyword and destroys them when they are no longer referenced anywhere. It is siginificant addition of comfort over programming in <code>C++</code> which requires manual destruction of objects.</p> <p>There even was architecture of CPU (IBM Cell Processor) in Playstation 3, that required programmers writing in <code>C++</code> to manually perform destroying objects in specific order and not doing it significantly reduced game performance. So if you ever wonder why most multiplatform games of that era looked worse on PS3 than Xbox 360, there you have it. It is the easiest to see it on \"Red Dead Redemption\" it even has lower resolution on PS3. It had some cool games though, like \"Folklore\" or \"Metal Gear Solid IV\"</p> <p>If you heard about \"memory leak\", it happens when programmer forgets to destroy objects and they accumulate in RAM. With Java you do not have to worry about it - garbage collector does it for you.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#creating-new-data-types","title":"Creating New Data Types","text":"<p>To define our own datatypes we form classes and put our ideas about the objects into them. If you feel uncertanity about the concept of classes, you can jump to this chapter Object Oriented Concepts, but I will write a short reminder so you can focus on the topic: Classes are the blueprints for creating the objects - they define what you can do with the object and how to communicate with it (ie the inteface).</p> <p>Each class can consist of:</p> <ul> <li>fields (data members):</li> <li>methods:</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#fields","title":"Fields","text":"<p>Fields are references to objects or defined primitive variables, that are part of a class. If a field is a reference to an object, we have to initialize it with <code>new</code> keyword somewhere. Object initializatio in classes is art in itself and I will cover it later. I shown it in example below, but don't form  assumption that this is the only way to perform it correctly.</p> <p>Fields Example<pre><code>class Fields {\nint primitive_field;\nObject some_object = new Object();\n}\n}\n</code></pre> To initialize object of <code>Fields</code> class we need to use <code>new</code> keyword:</p> <p>Fields Test<pre><code>Fields f = new Fields();\n</code></pre> If you want get access to a value of the field we use the dot notation (if members do not have a private access modifier):</p> <p>Dot Notation<pre><code>Fields f = new Fields();\nf.primitive_field = 10;\nf.some_object = new Object();\n</code></pre> If you happen to have reference to an object inside you can add another dot to access it:</p> <p>Modifying Object State<pre><code>Car c = new Car(new Engine());\ncar.engine.start();\ncar.engine.setRPM(1000);\n</code></pre> You can access nested objects using dot notation indefinitely, but it might decrease the readability.! In my opinion, after addition of a second dot it is good idea to restructure code with newline after each dot. You will bump into this problem when using Java Stream API.</p> <pre><code>...\nmyList\n.stream()\n.filter(s -&gt; s.startsWith(\"c\"))\n.map(String::toUpperCase)\n.sorted()\n.forEach(System.out::println);\n...\n</code></pre>"},{"location":"java-notes/md_java/core/objects-in-java/#default-values-of-primitive-data-types","title":"Default Values of Primitive Data Types","text":"<p>When you declare a field with a primitive data type in a class, it is initialized with a default value if you do not specify one explicitly.</p> Type Default Value <code>boolean</code> <code>false</code> <code>char</code> <code>\\u0000</code> <code>byte</code> <code>0</code>(<code>byte</code>) <code>short</code> <code>0</code>(<code>short</code>) <code>int</code> <code>0</code> <code>long</code> <code>0L</code> <code>float</code> <code>0F</code> <code>double</code> <code>0D</code> <p>Danger</p> <p>Default values of primitive data types are guaranteed only for variables that are members of a class. Local variables are not initialized with default values. It is good practice to initialize all variables with a value and do not rely default values, because it reduces the possibility of creating bugs. If you do not initialize local variable and use it your code will not compile and you will get <code>java: variable x might not have been initialized</code> where x is the name of the variable.</p> <p>Here is program demonstrating default values:</p> DefaultValues <pre><code>package core.objects_java;\n\npublic class DefaultValues {\nboolean b;\nchar c;\nbyte by;\nshort s;\nint i;\nlong l;\nfloat f;\ndouble d;\n\npublic static void main(String[] args) {\nDefaultValues dv = new DefaultValues();\nSystem.out.println(\"boolean = \" + dv.b);\nSystem.out.println(\"char = \" + dv.c);\nSystem.out.println(\"byte = \" + dv.by);\nSystem.out.println(\"short = \" + dv.s);\nSystem.out.println(\"int = \" + dv.i);\nSystem.out.println(\"long = \" + dv.l);\nSystem.out.println(\"float = \" + dv.f);\nSystem.out.println(\"double = \" + dv.d);\nint x;\n// x++; // java: variable x might not have been initialized\n}\n}\n</code></pre> Output <pre><code>boolean = false // default char value is '\\u0000' (null character) which is not \nprintable char =  byte = 0 short = 0 int = 0 long = 0 float = 0.0 double = 0.0 \n</code></pre>"},{"location":"java-notes/md_java/core/objects-in-java/#methods","title":"Methods","text":"<p>Methods in Java form the interface of communication between objects. Methods are quite similar to a functions with a few differences: Functions require us to pass them all of their data explicitly - function can only work with data you provide to it (with the exception of global variables).</p> <p>Methods presume the existence of an object, which is passed when we call them. For this reason, a method can access all of the data that is associated with the class to which that object belongs.</p> <p>Methods consist of:</p> <ul> <li>return type:  indicates what type of value the method will give when it ends</li> <li>method name:  specifies what you will have to type when you will call the method</li> <li>arguments:    variables that you pass to the method to do something with them</li> <li>method body:  space in which you write code to perform some task</li> </ul> <p>Here is structural representation of those 4 things:</p> <p><pre><code>ReturnType methodName(argument_1, argument_2, argument_N) {\n// Method Body\n}\n</code></pre> The name of a method and its argument list form a signature, which is its unique identifier -  you can't have two methods with the same signature in a single class. When you run Java program, it automatically creates list of all method signatures in the class and when you call one it checks if it is in the list.</p> <p>Methods in Java can be created only as part of a class unlike in Python and Bash - those do not  force you to have any class encapsulating them, so it is not a universal thing among the   programming languages.</p> <p>A method can be called only from an object or a class, if method is static. I will cover what does static mean shortly so don't worry. To call a method we need object reference, place dot after that and then type method name:</p> <p>Calling a Method<pre><code>// we need to have an object first\nCat c = new Cat();\n// calling meow method with an int argument\nint loudness = 4;\nc.meow(loudness); </code></pre> If a method return values you can save it to a variable:</p> <p>Method Returing a Value<pre><code>int getTwo() {\nreturn 2;\n}\n</code></pre> Then it is possible to:</p> <p>Saving Return Value<pre><code>int two = obj.getTwo();\n</code></pre> where <code>obj</code> is an object of some class that contains <code>getTwo()</code> method. Type of the variable has to be compatible with the return type of the method.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#method-arguments","title":"Method Arguments","text":"<p>If you ever asked yourself - \"what are exactly method arguments: references to variables outside of  the method? Copies? Is there a unique mechanism for passing data to a method?\", this paragraph   is for you.</p> <p>In Computer Science there are two terms for describing how parameters are passed to a method,</p> <ul> <li>call by value - it means that the method gets a copy of the value of the argument.</li> <li>call by reference - it means method gets the memory location of the argument that is passed.</li> </ul> <p>Some language can provide both mechanisms, like <code>C++</code> and here is call by reference mechanism of <code>C++</code> so you can have a visualization of the concept (<code>&amp;</code> symbol is used to indicate that the argument is passed by reference):</p> C++ ReferencesOutput <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// swap two integers\nvoid swap(int &amp;a, int &amp;b) {\nint temp = a;\na = b;\nb = temp;\n}\n\nint main() {\nint a = 5;\nint b = 10;\n// cout stands for console output\ncout &lt;&lt; \"Before swap: a = \" &lt;&lt; a &lt;&lt; \", b = \" &lt;&lt; b &lt;&lt; endl;\n\nswap(a, b);\n\ncout &lt;&lt; \"After swap: a = \" &lt;&lt; a &lt;&lt; \", b = \" &lt;&lt; b &lt;&lt; endl;\n\n// everything run fine so we return 0 exit code\nreturn 0;\n}\n</code></pre> <pre><code>Before swap: a = 5, b = 10 After swap: a = 10, b = 5 \n</code></pre> <p>Java has only one mechanism for passing data to a method, and it is call by value - when you pass primitives into a method, you get a copy of a primitive, when you pass reference to an object, you get a copy of that reference (which points to the same object as previous one).</p> <p>Because we operate on copies, it is impossible to change contents of the variable passed as an argument.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#primitive-type-parameters","title":"Primitive Type Parameters","text":"<p><pre><code>double centimeters = 10;\n\nbob.raiseHeight(centimeters);\n</code></pre> Whatever we do in the <code>raiseTemperature</code> method, the value of <code>centimeters</code> will not change. Based on the fact we can't modify parameter value and primitive types are not references in Java  all changes of their values are lost if we won't <code>return</code> them.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#_1","title":"Objects in java","text":"<p>To see what happens under the hood with primitive parameters (arguments), lets check out method that  is supposed to add coupons for lowering the price:</p> <pre><code>package core.objects_java;\n\npublic class PassByValPrimitive {\npublic static void main(String[] args) {\n\ndouble price = 100;\napplyTenPctDisc(price);\nSystem.out.println(\"price = \" + price);\n}\n\npublic static void applyTenPctDisc(double x) {\nx = x * 0.9;\n}\n}\n</code></pre> <p></p> <p>As you can expect after looking from the picture, the value of <code>price</code> is not changed. This is what happens:</p> <ol> <li><code>price</code> is initialized with the value of 100.</li> <li><code>applyTenPctDisc</code> method is called, and it gets a copy of     the value of <code>price</code> and assigns it to <code>x</code>.</li> <li><code>x</code> is updated with the new value of <code>0.9</code></li> <li>the function ends and <code>x</code> is destroyed.</li> </ol>"},{"location":"java-notes/md_java/core/objects-in-java/#object-reference-parameters","title":"Object Reference Parameters","text":"<p>As I wrote earlier - even if we pass a reference to an object to a method, the method gets a copy of  that reference. To demonstrate that, lets try to swap two objects:</p> Swap Objects <pre><code>package core.objects_java;\n\npublic class SwapObjects {\n\npublic static void main(String[] args) {\n\nPerson p1 = new Person();\np1.setName(\"John\");\nPerson p2 = new Person();\np2.setName(\"Mary\");\n\nSystem.out.println(\"p1.getName() = \" + p1.getName());\nSystem.out.println(\"p2.getName() = \" + p2.getName());\n\nPerson.swap(p1, p2);\n\nSystem.out.println(\"p1.getName() = \" G+ p1.getName());\nSystem.out.println(\"p2.getName() = \" + p2.getName());\n}\n}\nclass Person {\nprivate String name;\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\npublic static void swap(Person a, Person b) {\nPerson temp = a;\na = b;\nb = temp;\n}\n}\n</code></pre> <p>Here we have two references to <code>Person</code> objects, and we call <code>swap</code> method on them. <code>a</code> and <code>b</code> are copies of <code>p1</code> and <code>p2</code> references respectively and method swaps those copies. After method finishes, <code>p1</code> and <code>p2</code> their references are destroyed from the stack memory. In summary, a method can't make an object parameter refer to a new object, because copied reference will be destroyed after the method ends.</p> <p></p> <ul> <li>orange arrows show copying of the references</li> <li>blue arrows show references outside the method</li> <li>green arrows show references inside the method, which are destroyed after the method ends</li> </ul> <p>As you have seen earlier - it is impossible to change primitive type parameters. It works differently with arguments that are object references: even if in the inside of the method we operate with a copy of the original reference, we can still  modify object state, because copied reference  points to the same object as the original one. It is like you have two file shortcuts (soft links for UNIX people) pointing to the same file. Let's check this feature with an example of swapping names of two <code>Person</code> objects:</p> Swap NamesOutput <pre><code>package core.objects_java;\n\npublic class ModifyObjectParameter {\npublic static void main(String[] args) {\n// Create a new object\nPerson person_1 = new Person();\nperson_1.setName(\"John\");\nPerson person_2 = new Person();\nperson_2.setName(\"Mary\");\n\nSystem.out.println(\"Before swap: \");\nSystem.out.println(\"person_1.getName() = \" + person_1.getName());\nSystem.out.println(\"person_2.getName() = \" + person_2.getName());\n\nswapNames(person_1, person_2);\n\nSystem.out.println(\"After swap: \");\nSystem.out.println(\"person_1.getName() = \" + person_1.getName());\nSystem.out.println(\"person_2.getName() = \" + person_2.getName());\n\n}\n\npublic static void swapNames(Person p_1, Person p_2) {\n// step 1\nString tmp_name = p_1.getName();\n// step 2\np_1.setName(p_2.getName());\n// step 3\np_2.setName(tmp_name);\n}\n}\n</code></pre> <pre><code>Before swap: \nperson_1.getName() = John\nperson_2.getName() = Mary\nAfter swap: \nperson_1.getName() = Mary\nperson_2.getName() = John\n</code></pre> <p>Here is the visual representation of the code above, everything that is not on the Heap is on the Stack.</p> step 1step 1.1step 2step 2.1step 3end <p><code>p_1.getName()</code> returns <code>\"John\"</code> </p> <p><code>tmp_name</code> refers to <code>String</code> object with value <code>\"John\"</code> </p> <p><code>p_2.getName()</code> returns <code>\"Mary\"</code> </p> <p><code>p1_setName</code> method is called with <code>\"Mary\"</code> as an argument </p> <p><code>p_2.setName(tmp_name)</code> is called with <code>\"John\"</code> as an argument </p> <p>Method <code>swapNames</code> ends and all local variables are destroyed. </p> <p>To prove that passed reference to the method points to the same object as the original one, we can write small test program with a little help of default printing mechanism of Java: if \\(x\\) is a  reference to an object of type \\(T\\), and \\(T\\) does not have special method for printing, which is  called <code>toString</code>, then \\(x\\) will be printed as <code>T@address_of_x</code> or if \\(T\\) is in the package \\(p\\)  which we imported, then \\(x\\) will be printed as <code>p.T@address_of_x.</code></p> <p>Tip</p> <p>I will cover packages later, because right now I'm trying to focus on explaining the inner  workings of the objects and references. All you need to know right now about packages is they organize classes like directories: so <code>package core.objects_java;</code> means that all classes in this package are in the  <code>core/objects_java</code> BTW, I'm writing such comments to form something storytelling for you. You can let me know if it is beneficial for you or you rather find it annoying.</p> Printing Adress<pre><code>package core.objects_java;\n\npublic class ObjReferencesMethods {\n\npublic static void main(String[] args) {\nObjReferencesMethods o = new ObjReferencesMethods();\nSystem.out.println(\"o in main() = \" + o);\nprintRefAddress(o);\n}\n\npublic static void printRefAddress(ObjReferencesMethods obj) {\nSystem.out.println(\"obj in printRefAddress = \" + obj);\n}\n}\n</code></pre> Output<pre><code>o in main() = core.objects_java.ObjReferencesMethods@36baf30c\nobj in printRefAddress = core.objects_java.ObjReferencesMethods@36baf30c\n</code></pre> <p>As you see <code>o</code> and <code>obj</code> are references to the same object. This is a treat in terms of efficiency, because we don't need to assign new resources for  duplicating the object.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#static-keyword","title":"<code>static</code> keyword","text":"<p>Explicit definition of the <code>static</code> is \"bound by class / not bound by the object\" Practically it is used for two things:</p> <ul> <li>you want to have a single shared field of the class regardless of how many objects you create</li> <li>you need method that can run without existence of the object of enclosing class</li> </ul>"},{"location":"java-notes/md_java/core/objects-in-java/#static-fields","title":"<code>static</code> fields","text":"<pre><code>package core.objects_java.static_test;\n\npublic class Employee {\nprivate static int globalId = 0;\nprivate int empId;\nprivate String name;\n\npublic void setEmpId() {\nempId = ++globalId;\n}\npublic int getEmpId() {\nreturn empId;\n}\n\npublic void setName(String n) {\nname = n;\n}\n\npublic String getName() {\nreturn name;\n}\n}\n</code></pre> <pre><code>package core.objects_java.static_test;\n\npublic class StaticFieldTest {\n// step 1 start main()\npublic static void main(String[] args) {\n\n// creating employee objects\n// step 2\nEmployee employee_1 = new Employee();\n// step 3\nEmployee employee_2 = new Employee();\n\n// setting names\n\n// step 4\nemployee_1.setName(\"Lucy\");\n// step 5\nemployee_2.setName(\"Sally\");\n\n// setting ids\n\n// step 6\nemployee_1.setEmpId();\n// step 7\nemployee_2.setEmpId();\n\n\n// printing out info about the employees\nSystem.out.println(\"employee_1.getEmpId() = \"\n+ employee_1.getEmpId());\nSystem.out.println(\"employee_1.getName() = \"\n+ employee_1.getName());\nSystem.out.println();\nSystem.out.println(\"employee_2.getEmpId() = \"\n+ employee_2.getEmpId());\nSystem.out.println(\"employee_2.getName() = \"\n+ employee_2.getName());\n}\n}\n</code></pre> Output<pre><code>employee_1.getEmpId() = 1\nemployee_1.getName() = Lucy\n\nemployee_2.getEmpId() = 2\nemployee_2.getName() = Sally\n</code></pre> <p>Here is how Java sees the code shown above in simplified form (Java has few special areas in heap):</p> step 1step 2step 3step 4step 5step 6step 7step 8 <p><code>static globalId</code> is created in the heap  (even if we do not create any <code>Employee</code> object) and after that <code>main</code> method is called. </p> <p><code>Employee</code> object is created with <code>employee_1</code> reference to it </p> <p><code>Employee</code> object is created with <code>employee_2</code> reference to it </p> <p><code>employee_1.setName(\"Lucy\")</code> is called </p> <p>employee_2.setName(\"Sally\") is called </p> <p><code>employee_1.setEmpId()</code> is called <code>empId</code> = ++globalId means that <code>globalId</code> is incremented by 1 and then assigned to <code>empId</code> <code>globalId</code> is seen by all the objects of the class and as you see there is only one <code>globalId</code> in the heap and so every object has the same information about it and  that is what <code>static</code> does. </p> <p><code>employee_2.setEmpId()</code> is called, which adds 1 to <code>globalId</code> and then assigns it to <code>empId</code>. </p> <p> This slide is just a quick recap of final state of the variables.</p> <p>In the other hand, if we do not use <code>static</code> keyword, we will have as many <code>globalId</code> as many objects   of <code>Employee</code> class we create. A field that is not declared <code>static</code> is called instance field or non-static field.</p>"},{"location":"java-notes/md_java/core/objects-in-java/#static-methods","title":"<code>static</code> methods","text":"<p>If we want to have method that is not tied to the object, we make them <code>static</code>. In this case, we can call them even without creating any objects. To use static methods, we need to use <code>class name.method_name()</code> syntax or we can call it from the object: <code>object_name.method_name()</code>, but first way is preferred, because it emphasizes the fact that we do not need to create any object to call the method.</p> <p>Here is an example of static method and use of both syntaxes: <pre><code>package core.objects_java.static_test;\n\n/**\n * StaticMethods\n */\n\npublic class StaticMethods {\nstatic int counter = 0;\npublic static void main(String[] args) {\nIncrementable inc = new Incrementable();\ninc.increment();\nSystem.out.println(\"counter = \" + counter);\nIncrementable.increment();\nSystem.out.println(\"counter = \" + counter);\n}\n}\n\nclass Incrementable {\npublic static void increment() {\nStaticMethods.counter++;\n}\n}\n</code></pre></p> Output<pre><code>counter = 1\ncounter = 2\n</code></pre> <p>An example of static method is <code>public static void main(String[] args)</code>, in which we put all code that we want to run. It is static, because, we might run code that do not create any object in which <code>main</code> method is contained (we might not to create any object at all, however in Java it is highly unlikely).</p>"},{"location":"java-notes/md_java/core/objects-in-java/#aliasing","title":"Aliasing","text":"<p>It describes the situation when we have more than one reference to the same object. It is often confusing for newcomers, when something is written to one of them:</p> <pre><code>package core.objects_java.aliasing;\n\n/**\n * Alias\n */\npublic class Alias {\n\nprivate int val;\n\npublic void setVal(int v) {\nval = v;\n}\n\npublic int getVal() {\nreturn val;\n}\n\npublic static void main(String[] args) {\nAlias a = new Alias();\na.setVal(10);\nAlias b = a;\nSystem.out.println(\"a.getVal(): \"+ a.getVal());\nSystem.out.println(\"b.getVal(): \" + b.getVal());\nb.setVal(20);\nSystem.out.println(\"a.getVal(): \"+ a.getVal());\nSystem.out.println(\"b.getVal(): \" + b.getVal());\n}\n}\n</code></pre> Output<pre><code>a.getVal(): 10\nb.getVal(): 10\na.getVal(): 20\nb.getVal(): 20\n</code></pre> <p><code>Alias a</code> an <code>Alias b</code> both point to the same object, because only one <code>new</code> was used.</p> step 1step 2step 3step 4 <p><code>new Alias()</code> is called </p> <p><code>a.setVal(10)</code> is called </p> <p><code>b = a</code> is called </p> <p><code>b.setVal(20)</code> is called </p> <p>That works differently with primitive types: <pre><code>package core.objects_java.aliasing;\n\npublic class PrimitiveNoAlias {\npublic static void main(String[] args) {\nint a = 10;\nint b = a;\nSystem.out.println(\"a: \" + a);\nSystem.out.println(\"b: \" + b);\nb = 20;\nSystem.out.println(\"a: \" + a);\nSystem.out.println(\"b: \" + b);\n}\n}\n</code></pre></p> Output<pre><code>a: 10\nb: 10\na: 10\nb: 20\n</code></pre> <p>Primitive types are copied by value, so when we change <code>b</code> value, it does not change <code>a</code> value. As you have seen earlier with methods, when we pass object reference into a method in fact it is an alias.</p> <p>Making exact copies of object in Java is quite complex, and we will cover it in  later chapter: Copying Objects</p> <ul> <li>test ** test2</li> </ul>"},{"location":"java-notes/md_java/design/","title":"Overview","text":"<ul> <li>Single-responsibility principle</li> <li>Open-Closed principle</li> <li>Liskov substitution principle</li> <li>Interface segregation principle</li> <li>Dependency inversion principle</li> </ul>"},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/","title":"Liskov Substitution Principle","text":"<p>Definition</p> <p>Subtype Requirement: \\(\\phi(x)\\) be a property provable about objects \\(x\\) of type \\(T\\). Then  \\(\\phi(y)\\) should be true for objects \\(y\\) of type \\(S\\) where \\(S\\) is a subtype of \\(T\\).</p> <p>It basically means subtypes must be behaviorally substitutable for their base types.</p>"},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/#benefits","title":"Benefits","text":"<ul> <li>it gives a way to define good inheritance hierarchies</li> <li>increases caution when designing classes to avoid creation of hierarchies that do not conform to the Open-Closed-Principle.</li> </ul> <p>Example</p> <p>In clientMethod, superObj may be an instance of SuperClass or any of its subclasses. Hence, if clientMethod works with instances of Superlass, it does so with instances of any subclass of SuperClass. They provide all methods of SuperClass and can be extended by adding more</p> <pre><code>classDiagram \n\nSuperClass &lt;|-- SubClass1\nSuperClass &lt;|-- SubClass2\nSuperClass : +doStuff()\n\nclass SubClass1 {\n    +doStuff()\n}\nclass SubClass2 {\n    +doStuff()\n}</code></pre> <pre><code>public void clientMethod(SuperClass sc)\n{\nsc.doStuff();\n}\n</code></pre>"},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/#lsp-by-example","title":"LSP by Example","text":""},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/#lsp-non-compliant-example","title":"LSP-non-compliant Example","text":"<p>Let assume that we want classes that represents rectangles and squares. Since square is a rectangle designer of class might think it is a good idea to make <code>Square</code> class a subclass of <code>Rectangle</code>.</p> <pre><code>classDiagram \n\nRectangle &lt;|-- Square\nRectangle: +setWidth()\nRectangle: +setHeight()\nRectangle: + int area()\n\nclass Square {\n    +setWidth()      \n    +setHeight() \n}</code></pre> <pre><code>package design.lsp.bad;\n\npublic class Rectangle\n{\nint width;\nint height;\n\npublic void setWidth(int width) {this.width = width;}\n\npublic void setHeight(int height) {this.height = height;\n}\n\npublic int area() {return  height * width;}\n}\n</code></pre> <p>We override <code>setWidth</code> and <code>setHeight</code> so both will stay the same and we can reuse the implementation of <code>area</code>.</p> <pre><code>package design.lsp.bad;\n\npublic class Square extends Rectangle\n{\n@Override\npublic void setWidth(int width)\n{\nSystem.out.println(\"==== Square begin setWidth() ====\");\nsuper.setWidth(width);\nsuper.setHeight(width);\nSystem.out.println(\"==== Square end setWidth()   ====\");\n}\n\n@Override\npublic void setHeight(int height)\n{\nSystem.out.println(\"Square begin setHeight()\");\nsuper.setHeight(height);\nsuper.setWidth(height);\nSystem.out.println(\"Square end setHeight()\");\n}\n}\n</code></pre> <p>We can  pass <code>Square</code> wherever <code>Rectangle</code> is expected, as far as the Java type system is concerned so the model is consistent with that regard. However, if we use such design, our program might break when client is making <code>Rectangle</code> assumptions on our <code>Squares</code> without knowledge that operation on the subclass is performed and the first side change will be overridden.</p> SourceOutput <pre><code>package design.lsp.bad;\n\npublic class Client\n{\npublic static void main(String[] args)\n{\nSquare square = new Square();\nclientMethod(square);\n}\npublic static void clientMethod(Rectangle rectangle)\n{\nrectangle.setHeight(5);\nrectangle.setWidth(3);\nSystem.out.println(\"rectangle.area() = \" + rectangle.area());\nassert (rectangle.area() == 15) : \"Outcome is not 15\";\n}\n}\n</code></pre> <pre><code>Square begin setHeight()\nRectangle.setHeight()\nRectangle.setWidth()\nSquare end setHeight()\n==== Square begin setWidth() ====\nRectangle.setWidth()\nRectangle.setHeight()\n==== Square end setWidth()   ====\nrectangle.area() = 9\nException in thread \"main\" java.lang.AssertionError: Outcome is not 15\nat design.lsp.bad.Client.clientMethod(Client.java:15)\nat design.lsp.bad.Client.main(Client.java:8)\n\nProcess finished with exit code 1   </code></pre> <p>A Square does not comply with the behavior of a rectangle: Changing the height or width of a square is different  from changing dimensions of rectangle so the model breaks Liskov Substitution Principle.</p> <p>Warning</p> <p>Validity of hierarchy design cannot be judged by looking at hierarchy in isolation. We need to inspect possible uses by client and its assumptions.</p>"},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/#lsp-compliant-fix","title":"LSP-compliant Fix","text":"<ul> <li>To fix the issue we can introduce <code>Shape</code> class and two descendants: <code>Square</code> and <code>Rectangle</code></li> <li>Client of <code>Shape</code> should not make any assumptions on our setter methods.</li> <li>If client want to change property of shape it should contact specific concrete class.</li> <li>It allows to calculate correct area for object of that class.</li> </ul> <pre><code>classDiagram\n\nShape &lt;|-- Square\nShape &lt;|-- Rectangle\nShape : + int area()\nclass Square {\n    +setWidth()\n    +setHeight()\n}\nclass Rectangle {\n    +setWidth()\n    +setHeight()\n}</code></pre>"},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/#behavioral-subtyping","title":"Behavioral Subtyping","text":"<p>We can look at Liskov Substitution Principle in behavioral aspect: it requires behavioral  substitutability. </p> <p>Behavioral Substitutability</p> <p>\\(S\\) is a behavioral subtype of \\(T\\), if objects of type \\(T\\) in a program \\(P\\) may be replaced by objects of type \\(S\\) without altering any of the properties of \\(P\\).</p> <ul> <li>It is not enough that subclasses provide all methods declared in superclass, those method should behave like they were from that superclass</li> <li>subclasses have to be distinguishable by the client.</li> </ul>"},{"location":"java-notes/md_java/design/Liskov-Substitution-Principle/#breaking-lsp-in-the-wild","title":"Breaking LSP in the wild","text":"<p>Even Java has classes that break LSP, one of them is <code>Properties</code>. If you are like me and want to know everything about stuff you are reading about, there is Properties article.</p>"},{"location":"java-notes/md_java/design/Open-Closed-Principle/","title":"Open-Closed Principle","text":"<p>Definition</p> <p>In Object-Oriented Programming the open\u2013closed principle states \"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\"; that is, such an entity can allow its behaviour to be extended without modifying its source code</p> <p>Warning</p> <p>This page is not complete</p>"},{"location":"java-notes/src/control_flow/exercises/exercises/","title":"Control Flow - exercises","text":""},{"location":"java-notes/src/control_flow/exercises/exercises/#1","title":"1","text":""},{"location":"java-notes/src/core/oop_concepts/e01_objects/objects/","title":"What is an Object","text":"<ul> <li>Real-world objects share two characteristics: They all have state and behavior. Dogs have state   (name, color, breed, hungry) and behavior (barking, fetching, wagging tail).</li> <li>Software objects are conceptually similar to real-world objects:    they too consist of state and related behavior.__     An object stores its state in fields     (variables in some programming languages) and exposes its behavior through *methods     (functions in some programming languages).    Methods operate on an object's internal state and    serve as the primary mechanism for object-to-object communication.   </li> </ul> <p>Object representation: </p> <p>### Important!    Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation \u2014 a fundamental principle of object-oriented programming.</p>"},{"location":"java-notes/src/core/oop_concepts/e01_objects/objects/#bicycle-example","title":"Bicycle example","text":""},{"location":"java-notes/src/core/oop_concepts/e01_objects/objects/#benefits-of-object-oriented-programming","title":"Benefits of Object Oriented Programming","text":"<ul> <li> <p>Modularity</p> </li> <li> <p>The source code for an object can be written and maintained independently of the source code for other objects.        Once created, an object can be easily passed around inside the system.</p> </li> <li> <p>Information-hiding</p> <ul> <li>By interacting only with an object's methods, the details of its internal   implementation remain hidden from the outside world.</li> </ul> </li> <li> <p>Code re-use</p> <ul> <li>If an object already exists (perhaps written by another software developer),    you can use that object in your program. This allows specialists to implement/test/debug    complex, task-specific objects, which you can then trust to run in your own code.</li> </ul> </li> <li> <p>Pluggability and debugging ease</p> </li> <li>If a particular object turns out to be problematic,    you can simply remove it from your application and plug in a different   object as its replacement. This is analogous to fixing mechanical problems in the real world. If a bolt breaks, you replace it, not the entire machine.</li> </ul>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/","title":"Test 1","text":""},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-1","title":"Exercise 1","text":"<p>Write program with <code>for</code> loop that will print out even numbers in specific range </p> <ul> <li>do not use <code>if</code> statement</li> </ul>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-2","title":"Exercise 2","text":"<p>Write program that will calculate the factorial function</p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-3","title":"Exercise 3","text":"<p>Write program that will generate multiplication table</p> <ul> <li>biggest number should be 10</li> <li>use <code>\\t</code>(tab) for spacing between numbers</li> </ul> <pre><code>    Output:\n\n1       2       3       4       5       6       7       8       9       10\n2       4       6       8       10      12      14      16      18      20\n3       6       9       12      15      18      21      24      27      30\n4       8       12      16      20      24      28      32      36      40\n5       10      15      20      25      30      35      40      45      50\n6       12      18      24      30      36      42      48      54      60\n7       14      21      28      35      42      49      56      63      70\n8       16      24      32      40      48      56      64      72      80\n9       18      27      36      45      54      63      72      81      90\n10      20      30      40      50      60      70      80      90      100\n</code></pre> <p>Let's imagine that we have boxes for coins. When the box is full, we take another one.  All boxes have <code>n</code> coin capacity. Write the program that prints out how many containers do we need to keep <code>x</code> number of coins and how much of them is in the last box.</p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-5","title":"Exercise 5","text":"<p>Write program that generates an integer array with either 0 or 1 in random places. Count total occurrences for 0 and 1.</p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-6","title":"Exercise 6","text":"<p>Create an integer array with random length.</p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-7","title":"Exercise 7","text":"<ul> <li>Create double array with length of 10 filled with random numbers.</li> <li>Write code that will print out the content of it (do not use built-in functions)</li> <li>Change all  the values of the array accordingly: 1 if value is even, 0 if it's not.</li> </ul>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-8","title":"Exercise 8","text":"<p>Create two-dimensional array with random values in range of 0 to 9 (inclusive),  then print it, so the output will be formatted like this (use <code>\\t</code> for spacing) <pre><code>7       3       6       0\n0       0       2       0\n4       5       8       5\n9       2       9       0\n0       4       7       5\n</code></pre></p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-9","title":"Exercise 9","text":"<p>Create an array with a random size, but not bigger than 5 x 5. Fill it with random numbers from 0 to 9 (inclusive). Print the index of the first occurrence of the lowest number as well as the value of this number.</p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-10","title":"Exercise 10","text":"<p>Write program that will check if matrix (square array) is diagonal.</p>"},{"location":"java-notes/src/exercises/langBasics_cFlow/Test_1/#exercise-11","title":"Exercise 11","text":"<p>Write program that will create arrays in such way: <pre><code>    3 3 3 3 3 3 3 3\n    3 2 2 2 2 2 2 3\n    3 2 1 1 1 1 2 3\n    3 2 1 0 0 1 2 3\n    3 2 1 0 0 1 2 3\n    3 2 1 1 1 1 2 3\n    3 2 2 2 2 2 2 3\n    3 3 3 3 3 3 3 3\n</code></pre></p>"},{"location":"java-notes/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/","title":"Strong vs weak static vs dynamic","text":"<p>This is often misunderstood so let me clear it up.</p>"},{"location":"java-notes/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#staticdynamic-typing","title":"Static/Dynamic Typing","text":"<p>Static typing is where the type is bound to the variable.  Types are checked at compile time.</p> <p>Dynamic typing is where the type is bound to the value.  Types are checked at run time.</p> <p>So in Java for example:</p> <pre><code>String s = \"abcd\";\n</code></pre> <p><code>s</code> will \"forever\" be a <code>String</code>. During its life it may point to different <code>String</code>s (since <code>s</code> is a reference in Java). It may have a <code>null</code> value but it will never refer to an <code>Integer</code> or a <code>List</code>. That's static typing.</p> <p>In PHP:</p> <pre><code>$s = \"abcd\";          // $s is a string\n$s = 123;             // $s is now an integer\n$s = array(1, 2, 3);  // $s is now an array\n$s = new DOMDocument; // $s is an instance of the DOMDocument class\n</code></pre> <p>That's dynamic typing.</p>"},{"location":"java-notes/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#strongweak-typing","title":"Strong/Weak Typing","text":"<p>Strong typing is a phrase with no widely agreed upon meaning.  Most programmers who use this term to mean something other than static typing use it to imply that there is a type discipline that is enforced by the compiler.  For example, CLU has a strong type system that does not allow client code to create a value of abstract type except by using the constructors provided by the type.  C has a somewhat strong type system, but it can be \"subverted\" to a degree because a program can always cast a value of one pointer type to a value of another pointer type.  So for example, in C you can take a value returned by <code>malloc()</code> and cheerfully cast it to <code>FILE*</code>, and the compiler won't try to stop you\u2014or even warn you that you are doing anything dodgy.</p> <p>(The original answer said something about a value \"not changing type at run time\".  I have known many language designers and compiler writers and have not known one that talked about values changing type at run time, except possibly some very advanced research in type systems, where this is known as the \"strong update problem\".)</p> <p>Weak typing implies that the compiler does not enforce a typing discpline, or perhaps that enforcement can easily be subverted.</p> <p>The original of this answer conflated weak typing with implicit conversion (sometimes also called \"implicit promotion\"). For example, in Java:</p> <pre><code>String s = \"abc\" + 123; // \"abc123\";\n</code></pre> <p>This is code is an example of implicit promotion: 123 is implicitly converted to a string before being concatenated with <code>\"abc\"</code>. It can be argued the Java compiler rewrites that code as:</p> <pre><code>String s = \"abc\" + new Integer(123).toString();\n</code></pre> <p>Consider a classic PHP \"starts with\" problem:</p> <pre><code>if (strpos('abcdef', 'abc') == false) {\n  // not found  \n}\n</code></pre> <p>The error here is that <code>strpos()</code> returns the index of the match, being 0. 0 is coerced into boolean <code>false</code> and thus the condition is actually true. The solution is to use <code>===</code> instead of <code>==</code> to avoid implicit conversion.</p> <p>This example illustrates how a combination of implicit conversion and dynamic typing can lead programmers astray.</p> <p>Compare that to Ruby:</p> <pre><code>val = \"abc\" + 123\n</code></pre> <p>which is a runtime error because in Ruby the object 123 is not implicitly converted just because it happens to be passed to a <code>+</code> method. In Ruby the programmer must make the conversion explicit:</p> <pre><code>val = \"abc\" + 123.to_s\n</code></pre> <p>Comparing PHP and Ruby is a good illustration here. Both are dynamically typed languages but PHP has lots of implicit conversions and Ruby (perhaps surprisingly if you're unfamiliar with it) doesn't.</p>"},{"location":"java-notes/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#staticdynamic-vs-strongweak","title":"Static/Dynamic vs Strong/Weak","text":"<p>The point here is that the static/dynamic axis is independent of the strong/weak axis. People confuse them probably in part because strong vs weak typing is not only less clearly defined, there is no real consensus on exactly what is meant by strong and weak. For this reason strong/weak typing is far more of a shade of grey rather than black or white.</p> <p>So to answer your question: another way to look at this that's mostly correct is to say that static typing is compile-time type safety and strong typing is runtime type safety.</p> <p>The reason for this is that variables in a statically typed language have a type that must be declared and can be checked at compile time. A strongly-typed language has values that have a type at run time, and it's difficult for the programmer to subvert the type system without a dynamic check.</p> <p>But it's important to understand that a language can be Static/Strong, Static/Weak, Dynamic/Strong or Dynamic/Weak.</p>"},{"location":"java-notes/src/language_basics/e01_primitives/strong_vs_weak_static_vs_dynamic/#java-is-strongly-typed","title":"Java is Strongly-Typed","text":"<p>source: https://www.cs.usfca.edu/~wolber/courses/110/lectures/java_is_strongly.htm All variables must be declared.</p> <pre><code>You cannot say assign to a variable before it is declared.\n\nDeclaration specifies the type of the variable\n\n    &lt;type&gt; &lt;variable&gt;;\n\nYou can define a variable as a scalar:\n\n    int x;\n    float f;\n\nor programmer-defined type (some class)\n\n    Person p;\n    ArrayList list;\n    ProgramStatement statement;\n\nWhen you define a class, you create a new programmer-defined type.\n</code></pre> <p>After a variable is declared, you can assign to it.</p> <pre><code>    int x;\n    x = 4;\n</code></pre> <p>You can also declare and assign with one fell swoop:</p> <pre><code>    int x=4;  // equivalent to above two lines.\n</code></pre> <p>We call a variable which has a class for a type an object.</p> <p>Once an object is declared, you can 1) assign to it, often with a creation statement. 2) access its data members, and 3) call its methods.</p> <pre><code>Person p;\np = new Person(\"Wolber\",25); // note constructor with parameters\np.age=27; // assigning to data member\np.older(jones) ;   // call a method\n\nWith objects as well, you can declare and assign with one fell swoop:\n\n    Person p = new Person();\n\nQuestion: why does the sentence above say 'often' with a creation statement. How else do we assign to an object?\n</code></pre> <p>Now let's convert a Python program to Java step by step. Here's the program.</p> <p>The key changes are:</p> <ol> <li>use of { ...} instead of indenting</li> <li>Declaring the types of all data members, local variables, parameters, and return values.</li> <li>Create objects using 'new'</li> <li>Input data using Scanner class.</li> <li>Use ArrayList instead of python built-in lists.</li> </ol> <p>We'll also need some Math functions, so we'll import java.lang.Math.* and take a look at the API docs for it. And we'll need to convert some integers to Strings, so we'll use the valueof function from the String class</p>"},{"location":"math/Logika/","title":"Logika","text":""},{"location":"math/Logika/#zdania","title":"Zdania","text":""},{"location":"math/Logika/#zdanie-atomowe","title":"Zdanie Atomowe","text":"<ul> <li>Zdanie, kt\u00f3re ma warto\u015b\u0107 prawda albo fa\u0142sz, bez wzl\u0119du na kontekst np.   \\(x &gt; 0\\)</li> </ul>"},{"location":"math/Logika/#zmiena-zdaniowa","title":"Zmiena Zdaniowa","text":"<ul> <li>Litera, kt\u00f3ra okre\u015bla dowolne zdanie.</li> <li>Je\u015bli za zmienn\u0105 zdaniow\u0105 p podstawiono zdanie prawdziwe,   to m\u00f3wimy, \u017ce dokonano podstawienia p = 1</li> </ul>"},{"location":"math/Logika/#zdanie","title":"Zdanie","text":"<ul> <li>Wyra\u017cenie z\u0142o\u017cone ze zda\u0144 atomowych po\u0142\u0105czonych sp\u00f3jnikami logicznymi</li> <li>Przyk\u0142ad: \\(x &gt; 0 \\iff x^2 &gt; 0\\)</li> </ul>"},{"location":"math/Logika/#formua-zdaniowa","title":"Formu\u0142a Zdaniowa","text":"<ul> <li>Zdania lub zmienne zdaniowe po\u0142\u0105czone sp\u00f3jnikami logicznymi</li> <li>Przyk\u0142ady:</li> <li>\\(p \\land q \\implies p \\lor q\\)</li> <li>\\(1 + 1 = 0\\)</li> </ul>"},{"location":"math/Logika/#warunki","title":"Warunki","text":""},{"location":"math/Logika/#warunek-konieczny","title":"Warunek Konieczny","text":"<ul> <li>Wniosek wyp\u0142ywaj\u0105cy z danego faktu.</li> <li>Je\u017celi fakt ma zaistnie\u0107, to zaistnie\u0107 (koniecznie) musi r\u00f3wnie\u017c fakt b\u0119d\u0105cy wnioskiem.</li> <li>Przyk\u0142ad</li> <li>\\(\\lnot p   \\implies \\lnot q\\)<ul> <li>p jest warunkiem koniecznym dla q, bo gdyby p nie zachodzi\u0142o, to nie zajdzie r\u00f3wnie\u017c q</li> </ul> </li> <li>\\(p \\implies q\\)<ul> <li>q jest warunkiem koniecznym dla p</li> </ul> </li> <li>Podzielno\u015b\u0107 liczby ca\u0142kowitej przez 2 i przez 3 jest warunkiem koniecznym i wystarczaj\u0105cym podzielno\u015bci tej liczby przez 6.</li> </ul>"},{"location":"math/Logika/#warunek-dostateczny-wystarczajacy","title":"Warunek Dostateczny (wystarczaj\u0105cy)","text":"<ul> <li>to taki, kt\u00f3ry, gdy wyst\u0105pi warunek konieczny (warunek wystarczaj\u0105cy nie musi by\u0107 warunkiem koniecznym) wystarcza, \u017ceby jaki\u015b fakt zachodzi\u0142</li> <li>Przyk\u0142ady:</li> <li>\\(p \\implies q\\)<ul> <li>p jest warunkiem dostatecznym (i niewystarczaj\u0105cym), bo je\u015bli tylko zachodzi p, to zachodzi r\u00f3wnie\u017c q.</li> </ul> </li> <li>je\u017celi liczba jest podzielna przez 10, to jest podzielna przez 5.<ul> <li>Fakt podzielno\u015bci przez 10 jest warunkiem wystarczaj\u0105cym dla podzielno\u015bci przez 5</li> <li>Fakt podzielno\u015bci przez 5 jest warunkiem koniecznym dla podzielno\u015bci przez 10.</li> </ul> </li> <li>warunkiem koniecznym i dostatecznym na to by liczba dzieli\u0142a si\u0119 przez 3, jest by suma jej cyfr by\u0142a podzielna przez 3</li> <li>je\u015bli suma cyfr danej liczby nie dzieli si\u0119 przez 3, to liczba nie dzieli si\u0119 przez 3 (warunekiem koniecznym na to by liczba dzieli\u0142a si\u0119 przez 3 jest by suma jej cyfr dzieli\u0142a si\u0119 przez 3),</li> </ul>"},{"location":"math/Logika/#semantyka","title":"Semantyka","text":"<ul> <li>funkcja warto\u015bciuj\u0105ca - \\(w\\) - funkcja przypisuj\u0105ca warto\u015b\u0107 logiczn\u0105: \\(1\\) je\u015bli zdanie jest prawidziwe, \\(0\\) gdy zdanie jest fa\u0142szywe.</li> </ul>"},{"location":"math/Logika/#matryce-logiczne","title":"Matryce Logiczne","text":"<ul> <li>negacja</li> </ul> \\(w(p)\\) \\(w(\\lnot p)\\) 0 1 1 0 <ul> <li>koniunkcja</li> </ul> \\(w(p)\\) \\(w(q)\\) \\(w(p) \\land w(q)\\) 0 0 0 0 1 0 1 0 0 1 1 1 <ul> <li>alternatywa</li> </ul> \\(w(p)\\) \\(w(q)\\) \\(w(p) \\lor w(q)\\) 0 0 0 0 1 1 1 0 1 1 1 1 <ul> <li>implikacja</li> </ul> \\(w(p)\\) \\(w(q)\\) \\(w(p) \\implies w(q)\\) 0 0 1 0 1 1 1 0 0 1 1 1 <ul> <li>r\u00f3wnowa\u017cno\u015b\u0107</li> </ul> \\(w(p)\\) \\(w(q)\\) \\(w(p) \\iff w(q)\\) 0 0 1 0 1 0 1 0 0 1 1 1 <ul> <li>dysjunkcja Sheffera</li> </ul> \\(p\\) \\(q\\) \\(p \\mid q\\) 0 0 1 0 1 1 1 0 1 1 1 0 <ul> <li>Funktor Sheffera, sam jeden, wystarcza do zdefiniowania wszystkich pozosta\u0142ych funktor\u00f3w zdaniotw\u00f3rczych, zar\u00f3wno jednoargumentowych jak i dwuargumentowych.</li> </ul>"},{"location":"math/Logika/#spojniki-logiczne-z-funktora-sheffera","title":"Sp\u00f3jniki logiczne z funktora Sheffera","text":"<ul> <li>zaprzeczenie (Sheffer)</li> </ul> \\(p\\) \\(\\lnot p\\) \\(p\\mid p\\) 0 1 1 1 0 0 <ul> <li>alternatywa (Sheffer)</li> </ul> \\(p\\) \\(q\\) \\(p \\lor q\\) \\((p \\mid p)\\) \\((q \\mid q)\\) \\((p \\mid p) \\mid (q \\mid q)\\) 0 0 0 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 0 0 1 <ul> <li>koniunkcja</li> </ul> \\(p\\) \\(q\\) \\(p \\land q\\) \\((p \\mid q)\\) \\((p \\mid q)\\) \\((p \\mid q) \\mid (p \\mid q)\\) 0 0 0 1 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 1 1 0 0 1 <ul> <li>implikacja</li> </ul> \\(p\\) \\(q\\) \\(p \\implies q\\) \\((q \\mid q)\\) \\((p \\mid (q \\mid q))\\) 0 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 1 0 1 <ul> <li>implikacja (2)</li> </ul> \\(p\\) \\(q\\) \\(p \\implies q\\) \\((q \\mid q)\\) \\((p \\mid (p \\mid q))\\) 0 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 1 0 1 <ul> <li> <p>\\(\\lnot, \\ \\land, \\ \\lor, \\ \\implies, \\ \\iff\\) nazywamy funktorami logicznymi</p> </li> <li> <p>Funktor ekstensjonalny - warto\u015b\u0107 logiczna zdania, utworzonego za jego pomoc\u0105 zale\u017cy tylko od warto\u015bci logicznych zda\u0144 sk\u0142adowych, a nie od sensu tych zda\u0144 (\\(\\lnot, \\ \\land, \\ \\lor, \\ \\implies, \\ \\iff\\) cechuje ekstensjonalno\u015b\u0107).</p> </li> <li> <p>Przyk\u0142ady:</p> <ul> <li>Zdanie eksnensjonalne: Je\u015bli Piotr jest najlepszym studentem, to ma najlepsze wyniki w nauce.</li> <li>Zdanie nieekstensjonalne: Wydaje mi si\u0119, \u017ce Piotr jest najlepszym studentem.</li> <li>Nie wiadomo jaka jest warto\u015b\u0107 takiego zdania. Nasze odczucia mog\u0105 by\u0107 niezgodne z faktami. \"Wydaje si\u0119\" jest rodzajem operatora zdaniotw\u00f3rczego, ale nie ma cech ekstensjonalno\u015bci.</li> </ul> </li> </ul> <ul> <li>Zbi\u00f3r {0, 1}  z operacjami: \\(\\lnot, \\ \\land, \\ \\lor, \\ \\implies\\) naywamy dwuargumenow\u0105 algebr\u0105\u00a0Boole'a i oznacza si\u0119 j\u0105 jako \\(B_0\\).</li> </ul>"},{"location":"math/Logika/#tautologie","title":"Tautologie","text":"<ul> <li>Tautologie to zdania lub schematy zda\u0144, utworzone ze zmiennych zdaniowych za pomoc\u0105 funktor\u00f3w zdaniotw\u00f3rczych, kt\u00f3rych warto\u015bci\u0105 jest zawsze prawda, tzn. te, kt\u00f3re s\u0105 spe\u0142nione przez wszystkie mo\u017cliwe warto\u015bciowania zmiennych zdaniowych.</li> <li>Zdanie sprzeczne  jego warto\u015bci\u0105 jest fa\u0142sz, niezale\u017cnie od warto\u015bci zmiennych zdaniowych w nim wyst\u0119puj\u0105cych, nazywamy zdaniem sprzecznym.</li> <li>Formu\u0142a \\(\\alpha\\) rachunku zda\u0144 jest tautologi\u0105 wtedy i tylko wtedy, gdy \\(\\lnot \\alpha\\) a jest zdaniem sprzecznym.</li> </ul>"},{"location":"math/Logika/#przykady-tautologii","title":"Przyk\u0142ady Tautologii","text":"<ul> <li>Prawo To\u017csamo\u015bci Implikacji</li> <li>\\(a \\implies a\\)</li> <li>ka\u017cde zdanie implikuje siebie</li> <li>Prawo Wy\u0142\u0105czonego \u015arodka</li> <li>\\(a \\lor \\lnot a\\)</li> <li>z dw\u00f3ch zda\u0144: zdania lub jego zaprzeczenia jedno zawsze jest prawdziwe</li> <li>Prawo Wy\u0142\u0105czonej Sprzeczno\u015bci</li> <li>\\(\\lnot (a \\land \\lnot a)\\)</li> <li>nie mo\u017ce by\u0107 jednocze\u015bnie prawdziwe zdanie i jego zaprzeczenie</li> <li>Prawo Podw\u00f3jnego Przeczeczenia</li> <li>\\(p \\iff \\lnot \\lnot p\\)</li> <li>dowolne zdanie r\u00f3wnowa\u017cne jest podw\u00f3jnej negacji tego zdania</li> <li>Prawdo Dunsa Szkota</li> <li>\\(\\lnot p \\implies (p \\implies q)\\)<ul> <li>je\u017celi zdanie jest fa\u0142szywe, to wynika z niego ka\u017cde inne zdanie  </li> </ul> </li> <li>Prawo Claviusa</li> <li>\\((\\lnot p \\implies p) \\implies p\\)<ul> <li>je\u017celi zdanie wynika ze swojego zaprzeczenia, to jest prawdziwe</li> </ul> </li> <li>Prawo Transpozycji</li> <li>\\((p \\implies q) \\implies (\\lnot q \\implies \\lnot p)\\)<ul> <li>je\u017celi z jednego zdania wynika drugie, to z zaprzeczenia drugiego wynika zaprzeczenie pierwszego</li> </ul> </li> <li>Prawo Zaprzeczenia Implikacji</li> <li>\\(\\lnot (p \\implies q) \\iff (p \\land q)\\)</li> <li>Pierwsze Prawo de Morgana</li> <li>\\(\\lnot (p \\land q) \\iff (\\lnot p \\lor \\lnot q)\\)</li> <li>Drugie Prawo de Morgana</li> <li>\\(\\lnot (p \\lor q) \\iff (\\lnot p \\land \\lnot q)\\)</li> <li>prawo sylogizmu / prawo przechodno\u015bci implikacji</li> <li>\\([p\\Rightarrow q)\\land (q\\Rightarrow r)]\\Rightarrow (p\\Rightarrow r)\\)<ul> <li>je\u017celi z jednego zdania wynika drugie i z drugiego trzecie, to z pierwszego wynika trzecie</li> </ul> </li> </ul>"},{"location":"math/Logika/#regua-podstawiania","title":"Regu\u0142a Podstawiania","text":"<ul> <li>Je\u017celi zdanie P jest tautologi\u0105, to je\u015bli wszystkie wyst\u0105pienia jakiej\u015b zmiennej (np. p) zast\u0105pimy dowolnym zdaniem, to otrzymane zdanie z\u0142o\u017cone b\u0119dzie r\u00f3wnie\u017c tautologi\u0105</li> <li>Przyk\u0142ad:</li> <li>Prawo Podw\u00f3jnego Przeczenia \\(p \\iff \\lnot \\lnot p\\)</li> <li>Niech \\(p = p \\implies q\\)</li> <li>\\(w((p \\implies q) \\iff \\lnot \\lnot (p \\implies q))\\) mo\u017ce r\u00f3wna\u0107 si\u0119 0 wtedy gdy L = 0 i P = 1 lub L = 1 i P = 0, wi\u0119c je\u017celi zdanie nie jest tautologi\u0105 to s\u0105 jedyne mo\u017cliwo\u015bci na fa\u0142sz.</li> <li>Niech L = 0, wtedy \\(p = 1\\) i \\(q = 0\\), wtedy P = \\(\\lnot \\lnot (p \\implies q) = \\lnot \\lnot (1 \\implies 0) = \\lnot \\lnot 0 = \\lnot 1 = 0\\), wi\u0119c \\((L \\iff P) = (0 \\iff 0) = 1\\) </li> <li>Gdy L = 1, to wtedy \\(p \\implies q\\) jest prawdziwe, wi\u0119c P te\u017c b\u0119dzie = 1, bo tam s\u0105 te same sp\u00f3jniki. </li> </ul>"},{"location":"math/Logika/#sprzecznosc-niesprzecznosc","title":"Sprzeczno\u015b\u0107 / Niesprzecznos\u0107","text":""},{"location":"math/Logika/#sprzeczny-zbior-zdan","title":"Sprzeczny Zbi\u00f3r Zda\u0144","text":"<ul> <li>Zbi\u00f3r, w kt\u00f3rym nie ma opcji na to, \u017ceby wszystkie w nim zdania by\u0142y prawdziwe</li> <li>Np \\(\\{a \\in X, a \\notin X\\}\\)</li> <li>Mo\u017ce si\u0119 zdarzy\u0107, \u017ce \u017cadna para zda\u0144 nie prowadzi do sprzeczno\u015bci, natomiast wszystkie zdania razem nie mog\u0105 by\u0107 r\u00f3wnocze\u015bnie prawdziwe:</li> <li>\\(\\{X \\subset Y, Y \\subset Z, Z \\subset U, U \\subset X\\}.\\)</li> </ul>"},{"location":"math/Logika/#niesprzczeczny-zbior-zdan","title":"Niesprzczeczny Zbi\u00f3r Zda\u0144","text":"<ul> <li>Zbi\u00f3r zda\u0144, w kt\u00f3rym istnieje taki uk\u0142ad warto\u015bci zmiennych, \u017ce wszystkie zdania s\u0105 prawdziwe.</li> </ul>"},{"location":"math/Logika/#dowody-nie-wprost","title":"Dowody Nie Wprost","text":"<ul> <li>Metoda ta polega na przyj\u0119ciu hipotezy odwrotnej do tej, kt\u00f3r\u0105 chcemy udowodni\u0107, i wydedukowaniu st\u0105d, albo zaprzeczenia jednego z za\u0142o\u017ce\u0144, albo zaprzeczenia dowodzonej tezy.</li> <li>Dowody oparte o t\u0119 zasad\u0119 nosz\u0105 nazw\u0119 apagogicznych, a inaczej m\u00f3wi si\u0119 o nich, \u017ce s\u0105 to dowody przez sprowadzanie do niedorzeczno\u015bci.</li> <li>Do dow\u00f3d\u00f3w nie wprost, mo\u017cna te\u017c u\u017cywa\u0107 prawa transpozycji:</li> <li>\\(a \\implies b \\iff \\lnot b \\implies \\lnot a\\)</li> </ul>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#java","title":"Java","text":"<ul> <li>Object-Oriented Concepts</li> </ul>"}]}